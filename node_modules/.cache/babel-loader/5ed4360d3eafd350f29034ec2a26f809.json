{"ast":null,"code":"import { current } from \"@reduxjs/toolkit\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"UPDATE_INPUT_LOG\":\n      return inputLogUpdater(action.payload.enteredWord, action.payload.currentWord, state);\n\n    default:\n      return state;\n  }\n};\n\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\n  let updatedInputLog = [];\n\n  if (enteredWord.word != \"\") {\n    updatedInputLog = prevInputLog;\n    updatedInputLog[currentWord.index] = enteredWord;\n    console.log();\n  } else {\n    updatedInputLog = prevInputLog;\n    updatedInputLog.splic(currentWord.index, 1);\n  }\n\n  return updatedInputLog;\n}\n\nexport default reducer;","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/inputLog.js"],"names":["current","reducer","state","action","type","inputLogUpdater","payload","enteredWord","currentWord","prevInputLog","updatedInputLog","word","index","console","log","splic"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAOC,eAAe,CACpBF,MAAM,CAACG,OAAP,CAAeC,WADK,EAEpBJ,MAAM,CAACG,OAAP,CAAeE,WAFK,EAGpBN,KAHoB,CAAtB;;AAKF;AACE,aAAOA,KAAP;AARJ;AAUD,CAXD;;AAaA,SAASG,eAAT,CAAyBE,WAAzB,EAAsCC,WAAtC,EAAmDC,YAAnD,EAAiE;AAC/D,MAAIC,eAAe,GAAG,EAAtB;;AACA,MAAIH,WAAW,CAACI,IAAZ,IAAoB,EAAxB,EAA4B;AAC1BD,IAAAA,eAAe,GAAGD,YAAlB;AACAC,IAAAA,eAAe,CAACF,WAAW,CAACI,KAAb,CAAf,GAAqCL,WAArC;AACAM,IAAAA,OAAO,CAACC,GAAR;AACD,GAJD,MAIO;AACLJ,IAAAA,eAAe,GAAGD,YAAlB;AACAC,IAAAA,eAAe,CAACK,KAAhB,CAAsBP,WAAW,CAACI,KAAlC,EAAyC,CAAzC;AACD;;AACD,SAAOF,eAAP;AACD;;AAED,eAAeT,OAAf","sourcesContent":["import { current } from \"@reduxjs/toolkit\";\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_INPUT_LOG\":\r\n      return inputLogUpdater(\r\n        action.payload.enteredWord,\r\n        action.payload.currentWord,\r\n        state\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\r\n  let updatedInputLog = [];\r\n  if (enteredWord.word != \"\") {\r\n    updatedInputLog = prevInputLog;\r\n    updatedInputLog[currentWord.index] = enteredWord;\r\n    console.log();\r\n  } else {\r\n    updatedInputLog = prevInputLog;\r\n    updatedInputLog.splic(currentWord.index, 1);\r\n  }\r\n  return updatedInputLog;\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}