{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\CountdownTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { decrementLiveTime, resetLiveTime } from \"../state/action-creators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CountdownTimer() {\n  _s();\n\n  // states and functions for showing the countdown timer once the test starts\n  const testOn = useSelector(state => state.testOn);\n  const liveTime = useSelector(state => state.testTimer.liveTime);\n  const timeForDisplay = useSelector(state => state.testTimer.forDisplay);\n  const dispatch = useDispatch();\n\n  function runTimer() {\n    let countDownTimer = setInterval(function () {\n      dispatch(decrementLiveTime());\n    }, 1000);\n  }\n\n  useEffect(() => {}, []);\n  useEffect(() => {\n    if (liveTime < 0) {\n      clearInterval(countDownTimer);\n      dispatch(resetLiveTime());\n    }\n\n    console.log(` live: ${liveTime}; forD: ${timeForDisplay}`);\n  }, [liveTime]);\n  return /*#__PURE__*/_jsxDEV(TimeView, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"time-view\",\n      children: liveTime <= 60 ? `${liveTime}s` : `${timeForDisplay.minutes}:${timeForDisplay.seconds}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownTimer, \"D43b2ad/uhuCWkFZ8wYWZQ0MJPo=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = CountdownTimer;\nexport default CountdownTimer;\nconst TimeView = styled.div``;\n_c2 = TimeView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountdownTimer\");\n$RefreshReg$(_c2, \"TimeView\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/CountdownTimer.js"],"names":["React","useState","useEffect","useDispatch","useSelector","styled","decrementLiveTime","resetLiveTime","CountdownTimer","testOn","state","liveTime","testTimer","timeForDisplay","forDisplay","dispatch","runTimer","countDownTimer","setInterval","clearInterval","console","log","minutes","seconds","TimeView","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,0BAAjD;;;AAEA,SAASC,cAAT,GAA0B;AAAA;;AACxB;AACA,QAAMC,MAAM,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACD,MAAlB,CAA1B;AACA,QAAME,QAAQ,GAAGP,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACE,SAAN,CAAgBD,QAA5B,CAA5B;AACA,QAAME,cAAc,GAAGT,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACE,SAAN,CAAgBE,UAA5B,CAAlC;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AAEA,WAASa,QAAT,GAAoB;AAClB,QAAIC,cAAc,GAAGC,WAAW,CAAC,YAAY;AAC3CH,MAAAA,QAAQ,CAACT,iBAAiB,EAAlB,CAAR;AACD,KAF+B,EAE7B,IAF6B,CAAhC;AAGD;;AAEDJ,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,EAAX,CAAT;AAEAA,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,GAAG,CAAf,EAAkB;AAChBQ,MAAAA,aAAa,CAACF,cAAD,CAAb;AACAF,MAAAA,QAAQ,CAACR,aAAa,EAAd,CAAR;AACD;;AAEDa,IAAAA,OAAO,CAACC,GAAR,CAAa,UAASV,QAAS,WAAUE,cAAe,EAAxD;AACD,GAPQ,EAON,CAACF,QAAD,CAPM,CAAT;AASA,sBACE,QAAC,QAAD;AAAA,2BACE;AAAG,MAAA,EAAE,EAAC,WAAN;AAAA,gBACGA,QAAQ,IAAI,EAAZ,GACI,GAAEA,QAAS,GADf,GAEI,GAAEE,cAAc,CAACS,OAAQ,IAAGT,cAAc,CAACU,OAAQ;AAH1D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAjCQf,c;UAEQJ,W,EACEA,W,EACMA,W,EACND,W;;;KALVK,c;AAmCT,eAAeA,cAAf;AAEA,MAAMgB,QAAQ,GAAGnB,MAAM,CAACoB,GAAI,EAA5B;MAAMD,Q","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { decrementLiveTime, resetLiveTime } from \"../state/action-creators\";\r\n\r\nfunction CountdownTimer() {\r\n  // states and functions for showing the countdown timer once the test starts\r\n  const testOn = useSelector((state) => state.testOn);\r\n  const liveTime = useSelector((state) => state.testTimer.liveTime);\r\n  const timeForDisplay = useSelector((state) => state.testTimer.forDisplay);\r\n  const dispatch = useDispatch();\r\n\r\n  function runTimer() {\r\n    let countDownTimer = setInterval(function () {\r\n      dispatch(decrementLiveTime());\r\n    }, 1000);\r\n  }\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  useEffect(() => {\r\n    if (liveTime < 0) {\r\n      clearInterval(countDownTimer);\r\n      dispatch(resetLiveTime());\r\n    }\r\n\r\n    console.log(` live: ${liveTime}; forD: ${timeForDisplay}`);\r\n  }, [liveTime]);\r\n\r\n  return (\r\n    <TimeView>\r\n      <p id=\"time-view\">\r\n        {liveTime <= 60\r\n          ? `${liveTime}s`\r\n          : `${timeForDisplay.minutes}:${timeForDisplay.seconds}`}\r\n      </p>\r\n    </TimeView>\r\n  );\r\n}\r\n\r\nexport default CountdownTimer;\r\n\r\nconst TimeView = styled.div``;\r\n"]},"metadata":{},"sourceType":"module"}