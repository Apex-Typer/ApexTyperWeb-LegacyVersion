{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TextInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { firstWord, nextWord, prevWord, updateInput, resetInput, newWords, evaluateWords, updateCurrentWordForward, focusInput, blurInput, confirmWord, updateCurrentWord, skipCurrentWordForward } from \"../state/action-creators/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TextInput(props) {\n  _s();\n\n  const currentWord = useSelector(state => state.currentWord);\n  const enteredWord = useSelector(state => state.enteredWord);\n  const testWords = useSelector(state => state.testWords);\n  const inputFocused = useSelector(state => state.inputFocused);\n  const dispatch = useDispatch();\n  const inputType = localStorage.getItem(\"input\") === null ? \"FLOAT\" : localStorage.getItem(\"input\");\n  const testContentScrollerCount = useRef(1);\n  const prevWordAtScroll = useRef(\"\");\n  var textInput = document.getElementById(\"textInput\");\n  useEffect(() => {\n    if (currentWord.key > 0) {\n      textInput.focus();\n\n      if (currentWord.key > 1) {\n        if (document.getElementById(currentWord.id).offsetLeft - document.getElementById(currentWord.id).parentElement.offsetLeft == 0 && currentWord.word != prevWordAtScroll.current) {\n          testContentScroller();\n        }\n      }\n    }\n  }, [currentWord]);\n  useEffect(() => {\n    dispatch(firstWord());\n    dispatch(focusInput());\n  }, []);\n  useEffect(() => {\n    if (currentWord.key > 0) {\n      if (inputFocused) {\n        textInput.focus();\n      } else {\n        textInput.blur();\n      }\n    }\n  }, [inputFocused]);\n  useEffect(() => {\n    if (currentWord.key != 0) {\n      // dispatch(evaluateWords(enteredWord.word, currentWord, inputType));\n      dispatch(updateCurrentWord(currentWord, enteredWord));\n    }\n  }, [enteredWord]);\n\n  function testContentScroller() {\n    let currentLineHeight = parseInt(window.getComputedStyle(document.getElementById(\"testContent\")).getPropertyValue(\"line-height\"));\n    document.getElementById(\"testContentChild\").style.transform = `translateY(-${currentLineHeight * testContentScrollerCount.current}px)`;\n    testContentScrollerCount.current++;\n    prevWordAtScroll.current = currentWord.word;\n  }\n\n  function textInputChangeHandler(e) {\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n    dispatch(updateInput(enteredValue, currentWord.word));\n  }\n\n  function keyDownHandler(e) {\n    let keyClicked = e.nativeEvent.code;\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n\n    if (keyClicked == \"Space\" && enteredValue != \"\") {\n      // dispatch(\n      //   updateCurrentWordForward(enteredWord.word, currentWord, inputType)\n      // );\n      dispatch(skipCurrentWordForward(currentWord, enteredWord));\n      dispatch(nextWord());\n      dispatch(resetInput());\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    width: `${currentWord.width}px`,\n    left: `${currentWord.left}px`,\n    inputType: inputType,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"textInput\",\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      maxLength: \"15\",\n      value: enteredWord.word,\n      onKeyDown: e => keyDownHandler(e),\n      onChange: e => setTimeout(textInputChangeHandler(e), 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextInput, \"LB5WJchmAeUdXpKS5Mgs0CQAIyE=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = TextInput;\nexport default TextInput;\nconst Container = styled.div`\n  width: 100%;\n  position: ${props => props.inputType == \"INLINE\" ? \"absolute\" : \"relative\"};\n  input {\n    background-color: transparent;\n    border: none;\n    border-bottom: ${props => props.inputType == \"INLINE\" ? \"none\" : \"#aaa solid 2px\"};\n    caret-color: ${props => props.inputType == \"INLINE\" ? \"transparent\" : \"#ffff\"};\n    font-size: 1.2em;\n    font-family: \"Quicksand\", sans-serif;\n    font-weight: 500;\n    text-align: center;\n    margin: 10px 0 20px;\n    padding: 3px 3px 5px;\n    color: ${props => props.inputType == \"INLINE\" ? \"transparent\" : \"#ffff\"};\n    width: ${props => props.width};\n    transform: translateX(${props => props.left});\n    transition: all 150ms ease-in-out;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TextInput.js"],"names":["React","useState","useEffect","useRef","styled","useSelector","useDispatch","firstWord","nextWord","prevWord","updateInput","resetInput","newWords","evaluateWords","updateCurrentWordForward","focusInput","blurInput","confirmWord","updateCurrentWord","skipCurrentWordForward","TextInput","props","currentWord","state","enteredWord","testWords","inputFocused","dispatch","inputType","localStorage","getItem","testContentScrollerCount","prevWordAtScroll","textInput","document","getElementById","key","focus","id","offsetLeft","parentElement","word","current","testContentScroller","blur","currentLineHeight","parseInt","window","getComputedStyle","getPropertyValue","style","transform","textInputChangeHandler","e","enteredValue","String","target","value","replace","keyDownHandler","keyClicked","nativeEvent","code","width","left","setTimeout","Container","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  firstWord,\r\n  nextWord,\r\n  prevWord,\r\n  updateInput,\r\n  resetInput,\r\n  newWords,\r\n  evaluateWords,\r\n  updateCurrentWordForward,\r\n  focusInput,\r\n  blurInput,\r\n  confirmWord,\r\n  updateCurrentWord,\r\n  skipCurrentWordForward\r\n} from \"../state/action-creators/index\";\r\n\r\nfunction TextInput(props) {\r\n  const currentWord = useSelector((state) => state.currentWord);\r\n  const enteredWord = useSelector((state) => state.enteredWord);\r\n  const testWords = useSelector((state) => state.testWords);\r\n  const inputFocused = useSelector((state) => state.inputFocused);\r\n  const dispatch = useDispatch();\r\n  const inputType =\r\n    localStorage.getItem(\"input\") === null\r\n      ? \"FLOAT\"\r\n      : localStorage.getItem(\"input\");\r\n\r\n  const testContentScrollerCount = useRef(1);\r\n  const prevWordAtScroll = useRef(\"\");\r\n\r\n  var textInput = document.getElementById(\"textInput\");\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key > 0) {\r\n      textInput.focus();\r\n      if (currentWord.key > 1) {\r\n        if (\r\n          document.getElementById(currentWord.id).offsetLeft -\r\n            document.getElementById(currentWord.id).parentElement.offsetLeft ==\r\n            0 &&\r\n          currentWord.word != prevWordAtScroll.current\r\n        ) {\r\n          testContentScroller();\r\n        }\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  useEffect(() => {\r\n    dispatch(firstWord());\r\n    dispatch(focusInput());\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (currentWord.key > 0) {\r\n      if (inputFocused) {\r\n        textInput.focus()\r\n      } else {\r\n        textInput.blur();\r\n      }\r\n    }\r\n  }, [inputFocused]);\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key != 0) {\r\n      // dispatch(evaluateWords(enteredWord.word, currentWord, inputType));\r\n      dispatch(updateCurrentWord(currentWord,enteredWord))\r\n    }\r\n  }, [enteredWord]);\r\n\r\n  function testContentScroller() {\r\n    let currentLineHeight = parseInt(\r\n      window\r\n        .getComputedStyle(document.getElementById(\"testContent\"))\r\n        .getPropertyValue(\"line-height\")\r\n    );\r\n    document.getElementById(\r\n      \"testContentChild\"\r\n    ).style.transform = `translateY(-${\r\n      currentLineHeight * testContentScrollerCount.current\r\n    }px)`;\r\n    testContentScrollerCount.current++;\r\n    prevWordAtScroll.current = currentWord.word;\r\n  }\r\n\r\n  function textInputChangeHandler(e) {\r\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    dispatch(updateInput(enteredValue, currentWord.word));\r\n  }\r\n\r\n  function keyDownHandler(e) {\r\n    let keyClicked = e.nativeEvent.code;\r\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    if (keyClicked == \"Space\" && enteredValue != \"\") {\r\n      // dispatch(\r\n      //   updateCurrentWordForward(enteredWord.word, currentWord, inputType)\r\n      // );\r\n      dispatch(skipCurrentWordForward(currentWord,enteredWord))\r\n      dispatch(nextWord());\r\n      dispatch(resetInput());\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      width={`${currentWord.width}px`}\r\n      left={`${currentWord.left}px`}\r\n      inputType={inputType}\r\n    >\r\n      <input\r\n        id=\"textInput\"\r\n        autoCapitalize=\"off\"\r\n        autoComplete=\"off\"\r\n        spellCheck=\"false\"\r\n        maxLength=\"15\"\r\n        value={enteredWord.word}\r\n        onKeyDown={(e) => keyDownHandler(e)}\r\n        onChange={(e) => setTimeout(textInputChangeHandler(e), 1)}\r\n      ></input>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  position: ${(props) =>\r\n    props.inputType == \"INLINE\" ? \"absolute\" : \"relative\"};\r\n  input {\r\n    background-color: transparent;\r\n    border: none;\r\n    border-bottom: ${(props) =>\r\n      props.inputType == \"INLINE\" ? \"none\" : \"#aaa solid 2px\"};\r\n    caret-color: ${(props) =>\r\n      props.inputType == \"INLINE\" ? \"transparent\" : \"#ffff\"};\r\n    font-size: 1.2em;\r\n    font-family: \"Quicksand\", sans-serif;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    margin: 10px 0 20px;\r\n    padding: 3px 3px 5px;\r\n    color: ${(props) =>\r\n      props.inputType == \"INLINE\" ? \"transparent\" : \"#ffff\"};\r\n    width: ${(props) => props.width};\r\n    transform: translateX(${(props) => props.left});\r\n    transition: all 150ms ease-in-out;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}