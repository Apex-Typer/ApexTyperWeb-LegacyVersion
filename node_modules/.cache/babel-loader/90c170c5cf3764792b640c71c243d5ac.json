{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TestResult.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TestResult() {\n  _s();\n\n  const inputLog = useSelector(state => state.inputLog);\n  const time = useSelector(state => state.testTimer.time);\n  const timeMultiplier = 60 / time;\n  const totalWords = inputLog.log.length;\n  const totalWrongWords = inputLog.wrongWords;\n  const totalCorrectWords = totalWords - totalWrongWords;\n  const WPM = Math.round(totalCorrectWords * timeMultiplier);\n  const [WPMforDisplay, setWPMforDisplay] = useState(0);\n\n  function resultReveal(element) {\n    const counters = element;\n    const speed = 100;\n    counters.forEach(counter => {\n      const animate = () => {\n        const value = +counter.value;\n        const data = +counter.display;\n        const time = value / speed;\n\n        if (data < value) {\n          // counter.display.current = Math.ceil(data + time);\n          counter.display(Math.ceil(data + time));\n          setTimeout(animate, 1);\n        } else {\n          // counter.display.current = value;\n          display(value);\n        }\n      };\n\n      animate();\n    });\n  }\n\n  resultReveal([{\n    value: WPM,\n    display: setWPMforDisplay\n  }]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"speedResult\",\n        children: WPMforDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), \"_wpm\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TestResult, \"cyDV3fwLp8kdnGbJK5WmCUOe82o=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = TestResult;\nexport default TestResult;\nconst Container = styled.div`\n  p {\n    font-size: 3rem;\n    color: cyan;\n  }\n  span {\n    font-size: 2rem;\n    color: #aaa;\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TestResult\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TestResult.js"],"names":["React","useState","useEffect","useRef","useSelector","styled","TestResult","inputLog","state","time","testTimer","timeMultiplier","totalWords","log","length","totalWrongWords","wrongWords","totalCorrectWords","WPM","Math","round","WPMforDisplay","setWPMforDisplay","resultReveal","element","counters","speed","forEach","counter","animate","value","data","display","ceil","setTimeout","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAMC,QAAQ,GAAGH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACD,QAAlB,CAA5B;AACA,QAAME,IAAI,GAAGL,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACE,SAAN,CAAgBD,IAA5B,CAAxB;AACA,QAAME,cAAc,GAAG,KAAKF,IAA5B;AACA,QAAMG,UAAU,GAAGL,QAAQ,CAACM,GAAT,CAAaC,MAAhC;AACA,QAAMC,eAAe,GAAGR,QAAQ,CAACS,UAAjC;AACA,QAAMC,iBAAiB,GAAGL,UAAU,GAAGG,eAAvC;AAEA,QAAMG,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,iBAAiB,GAAGN,cAA/B,CAAZ;AAEA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCrB,QAAQ,CAAC,CAAD,CAAlD;;AAEA,WAASsB,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,UAAMC,QAAQ,GAAGD,OAAjB;AACA,UAAME,KAAK,GAAG,GAAd;AAEAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC5B,YAAMC,OAAO,GAAG,MAAM;AACpB,cAAMC,KAAK,GAAG,CAACF,OAAO,CAACE,KAAvB;AACA,cAAMC,IAAI,GAAG,CAACH,OAAO,CAACI,OAAtB;AAEA,cAAMvB,IAAI,GAAGqB,KAAK,GAAGJ,KAArB;;AACA,YAAIK,IAAI,GAAGD,KAAX,EAAkB;AAChB;AACAF,UAAAA,OAAO,CAACI,OAAR,CAAgBb,IAAI,CAACc,IAAL,CAAUF,IAAI,GAAGtB,IAAjB,CAAhB;AACAyB,UAAAA,UAAU,CAACL,OAAD,EAAU,CAAV,CAAV;AACD,SAJD,MAIO;AACL;AACAG,UAAAA,OAAO,CAACF,KAAD,CAAP;AACD;AACF,OAbD;;AAeAD,MAAAA,OAAO;AACR,KAjBD;AAkBD;;AACDN,EAAAA,YAAY,CAAC,CAAC;AAAEO,IAAAA,KAAK,EAAEZ,GAAT;AAAcc,IAAAA,OAAO,EAAEV;AAAvB,GAAD,CAAD,CAAZ;AAEA,sBACE,QAAC,SAAD;AAAA,2BACE;AAAA,8BACE;AAAG,QAAA,EAAE,EAAC,aAAN;AAAA,kBAAqBD;AAArB;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA5CQf,U;UACUF,W,EACJA,W;;;KAFNE,U;AA8CT,eAAeA,UAAf;AAEA,MAAM6B,SAAS,GAAG9B,MAAM,CAAC+B,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;MAAMD,S","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction TestResult() {\r\n  const inputLog = useSelector((state) => state.inputLog);\r\n  const time = useSelector((state) => state.testTimer.time);\r\n  const timeMultiplier = 60 / time;\r\n  const totalWords = inputLog.log.length;\r\n  const totalWrongWords = inputLog.wrongWords;\r\n  const totalCorrectWords = totalWords - totalWrongWords;\r\n\r\n  const WPM = Math.round(totalCorrectWords * timeMultiplier);\r\n\r\n  const [WPMforDisplay, setWPMforDisplay] = useState(0);\r\n\r\n  function resultReveal(element) {\r\n    const counters = element;\r\n    const speed = 100;\r\n\r\n    counters.forEach((counter) => {\r\n      const animate = () => {\r\n        const value = +counter.value;\r\n        const data = +counter.display;\r\n\r\n        const time = value / speed;\r\n        if (data < value) {\r\n          // counter.display.current = Math.ceil(data + time);\r\n          counter.display(Math.ceil(data + time));\r\n          setTimeout(animate, 1);\r\n        } else {\r\n          // counter.display.current = value;\r\n          display(value);\r\n        }\r\n      };\r\n\r\n      animate();\r\n    });\r\n  }\r\n  resultReveal([{ value: WPM, display: setWPMforDisplay }]);\r\n\r\n  return (\r\n    <Container>\r\n      <span>\r\n        <p id=\"speedResult\">{WPMforDisplay}</p>_wpm\r\n      </span>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TestResult;\r\n\r\nconst Container = styled.div`\r\n  p {\r\n    font-size: 3rem;\r\n    color: cyan;\r\n  }\r\n  span {\r\n    font-size: 2rem;\r\n    color: #aaa;\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}