{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TextInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { firstWord, nextWord, prevWord, updateInput, resetInput, focusInput, blurInput, updateCurrentWord, updateAndChangeCurrentWord } from \"../state/action-creators/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TextInput(props) {\n  _s();\n\n  const currentWord = useSelector(state => state.currentWord);\n  const enteredWord = useSelector(state => state.enteredWord);\n  const inputFocused = useSelector(state => state.inputFocused);\n  const dispatch = useDispatch();\n  var textInput = document.getElementById(\"textInput\");\n  useEffect(() => {\n    if (currentWord.key > 0) {\n      textInput.focus();\n\n      if (currentWord.key > 1) {\n        if (document.getElementById(currentWord.id).offsetLeft - document.getElementById(currentWord.id).parentElement.offsetLeft == 0 && currentWord.word != prevWordAtScroll.current) {\n          testContentScroller();\n        }\n      }\n    }\n  }, [currentWord]);\n  useEffect(() => {\n    dispatch(firstWord());\n    dispatch(focusInput());\n  }, []);\n  useEffect(() => {\n    if (currentWord.key > 0 && inputFocused) {\n      setInputFocus();\n    }\n  }, [inputFocused]);\n  useEffect(() => {\n    if (currentWord.key != 0) {\n      dispatch(updateCurrentWord(currentWord, enteredWord));\n    }\n  }, [enteredWord]);\n\n  function testContentScroller() {\n    let currentLineHeight = parseInt(window.getComputedStyle(document.getElementById(\"testContent\")).getPropertyValue(\"line-height\"));\n    document.getElementById(\"testContentChild\").style.transform = `translateY(-${currentLineHeight * testContentScrollerCount.current}px)`;\n    testContentScrollerCount.current++;\n    prevWordAtScroll.current = currentWord.word;\n  }\n\n  function textInputChangeHandler(e) {\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n    dispatch(updateInput(enteredValue, currentWord.word));\n  }\n\n  function keyDownHandler(e) {\n    let keyClicked = e.nativeEvent.code;\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n\n    if (keyClicked == \"Space\" && enteredValue != \"\") {\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\n      dispatch(nextWord());\n      dispatch(resetInput());\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      id: \"textInput\",\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      maxLength: \"15\",\n      value: enteredWord.word,\n      onKeyDown: e => keyDownHandler(e),\n      onChange: e => setTimeout(textInputChangeHandler(e), 1) // onFocus={() => inputOnFocus()}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextInput, \"edzmJT+qIAPNj/bMvIXKEqAz2Ac=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = TextInput;\nexport default TextInput;\nconst Container = styled.div`\n  width: 100%;\n  position: \"absolute\";\n\n  input {\n    background-color: transparent;\n    border: none;\n    border: white 1px solid;\n    cursor: default;\n    border-bottom: \"none\";\n    caret-color: transparent;\n    caret-color: white;\n    font-size: 1.2em;\n    font-family: \"Quicksand\", sans-serif;\n    font-weight: 500;\n    text-align: center;\n    color: transparent;\n    transition: all 150ms ease-in-out;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TextInput.js"],"names":["React","useState","useEffect","useRef","styled","useSelector","useDispatch","firstWord","nextWord","prevWord","updateInput","resetInput","focusInput","blurInput","updateCurrentWord","updateAndChangeCurrentWord","TextInput","props","currentWord","state","enteredWord","inputFocused","dispatch","textInput","document","getElementById","key","focus","id","offsetLeft","parentElement","word","prevWordAtScroll","current","testContentScroller","setInputFocus","currentLineHeight","parseInt","window","getComputedStyle","getPropertyValue","style","transform","testContentScrollerCount","textInputChangeHandler","e","enteredValue","String","target","value","replace","keyDownHandler","keyClicked","nativeEvent","code","inputRef","setTimeout","Container","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  firstWord,\r\n  nextWord,\r\n  prevWord,\r\n  updateInput,\r\n  resetInput,\r\n  focusInput,\r\n  blurInput,\r\n  updateCurrentWord,\r\n  updateAndChangeCurrentWord,\r\n} from \"../state/action-creators/index\";\r\n\r\nfunction TextInput(props) {\r\n  const currentWord = useSelector((state) => state.currentWord);\r\n  const enteredWord = useSelector((state) => state.enteredWord);\r\n  const inputFocused = useSelector((state) => state.inputFocused);\r\n  const dispatch = useDispatch();\r\n\r\n  var textInput = document.getElementById(\"textInput\");\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key > 0) {\r\n      textInput.focus();\r\n      if (currentWord.key > 1) {\r\n        if (\r\n          document.getElementById(currentWord.id).offsetLeft -\r\n            document.getElementById(currentWord.id).parentElement.offsetLeft ==\r\n            0 &&\r\n          currentWord.word != prevWordAtScroll.current\r\n        ) {\r\n          testContentScroller();\r\n        }\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  useEffect(() => {\r\n    dispatch(firstWord());\r\n    dispatch(focusInput());\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key > 0 && inputFocused) {\r\n      setInputFocus();\r\n    }\r\n  }, [inputFocused]);\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key != 0) {\r\n      dispatch(updateCurrentWord(currentWord, enteredWord));\r\n    }\r\n  }, [enteredWord]);\r\n\r\n  function testContentScroller() {\r\n    let currentLineHeight = parseInt(\r\n      window\r\n        .getComputedStyle(document.getElementById(\"testContent\"))\r\n        .getPropertyValue(\"line-height\")\r\n    );\r\n    document.getElementById(\r\n      \"testContentChild\"\r\n    ).style.transform = `translateY(-${\r\n      currentLineHeight * testContentScrollerCount.current\r\n    }px)`;\r\n    testContentScrollerCount.current++;\r\n    prevWordAtScroll.current = currentWord.word;\r\n  }\r\n\r\n  function textInputChangeHandler(e) {\r\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    dispatch(updateInput(enteredValue, currentWord.word));\r\n  }\r\n\r\n  function keyDownHandler(e) {\r\n    let keyClicked = e.nativeEvent.code;\r\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    if (keyClicked == \"Space\" && enteredValue != \"\") {\r\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\r\n      dispatch(nextWord());\r\n      dispatch(resetInput());\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <input\r\n        ref={inputRef}\r\n        id=\"textInput\"\r\n        autoCapitalize=\"off\"\r\n        autoComplete=\"off\"\r\n        spellCheck=\"false\"\r\n        maxLength=\"15\"\r\n        value={enteredWord.word}\r\n        onKeyDown={(e) => keyDownHandler(e)}\r\n        onChange={(e) => setTimeout(textInputChangeHandler(e), 1)}\r\n        // onFocus={() => inputOnFocus()}\r\n      ></input>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  position: \"absolute\";\r\n\r\n  input {\r\n    background-color: transparent;\r\n    border: none;\r\n    border: white 1px solid;\r\n    cursor: default;\r\n    border-bottom: \"none\";\r\n    caret-color: transparent;\r\n    caret-color: white;\r\n    font-size: 1.2em;\r\n    font-family: \"Quicksand\", sans-serif;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    color: transparent;\r\n    transition: all 150ms ease-in-out;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}