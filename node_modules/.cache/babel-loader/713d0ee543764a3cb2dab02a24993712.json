{"ast":null,"code":"import { current } from \"@reduxjs/toolkit\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    log: [],\n    wrongWords: 0,\n    errors: 0\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"UPDATE_INPUT_LOG\":\n      return inputLogUpdater(action.payload.enteredWord, action.payload.currentWord, state);\n\n    case \"INCREMENT_WRONG_COUNT_LOG\":\n      return { ...state,\n        errors: state.errors + 1\n      };\n\n    case \"INCREMENT_WRONG_COUNT_LOG\":\n      return { ...state,\n        errors: state.errors + 1\n      };\n\n    case \"RESET_INPUT_LOG\":\n      return {\n        log: [],\n        wrongWords: 0,\n        errors: 0\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\n  let updatedInputLog = [];\n\n  if (currentWord.key > prevInputLog.log.length) {\n    updatedInputLog = prevInputLog.log;\n    updatedInputLog[currentWord.index] = enteredWord;\n  } else {\n    updatedInputLog = prevInputLog.log;\n    updatedInputLog.splice(currentWord.index, 1);\n  }\n\n  const wrongWords = updatedInputLog.filter(prevLog => !prevLog.isComplete);\n  updatedInputLog = {\n    log: updatedInputLog,\n    wrongWords: wrongWords.length,\n    errors: prevInputLog.errors\n  };\n  return updatedInputLog;\n}\n\nexport default reducer;","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/inputLog.js"],"names":["current","reducer","state","log","wrongWords","errors","action","type","inputLogUpdater","payload","enteredWord","currentWord","prevInputLog","updatedInputLog","key","length","index","splice","filter","prevLog","isComplete"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,OAAO,GAAG,YAA2D;AAAA,MAA1DC,KAA0D,uEAAlD;AAAEC,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,UAAU,EAAE,CAAvB;AAA0BC,IAAAA,MAAM,EAAE;AAAlC,GAAkD;AAAA,MAAXC,MAAW;;AACzE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAOC,eAAe,CACpBF,MAAM,CAACG,OAAP,CAAeC,WADK,EAEpBJ,MAAM,CAACG,OAAP,CAAeE,WAFK,EAGpBT,KAHoB,CAAtB;;AAKF,SAAK,2BAAL;AACE,aAAO,EAAE,GAAGA,KAAL;AAAYG,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,GAAe;AAAnC,OAAP;;AACF,SAAK,2BAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYG,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,GAAe;AAAnC,OAAP;;AACF,SAAK,iBAAL;AACE,aAAO;AAAEF,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,UAAU,EAAE,CAAvB;AAA0BC,QAAAA,MAAM,EAAE;AAAlC,OAAP;;AACF;AACE,aAAOH,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,SAASM,eAAT,CAAyBE,WAAzB,EAAsCC,WAAtC,EAAmDC,YAAnD,EAAiE;AAC/D,MAAIC,eAAe,GAAG,EAAtB;;AACA,MAAIF,WAAW,CAACG,GAAZ,GAAkBF,YAAY,CAACT,GAAb,CAAiBY,MAAvC,EAA+C;AAC7CF,IAAAA,eAAe,GAAGD,YAAY,CAACT,GAA/B;AACAU,IAAAA,eAAe,CAACF,WAAW,CAACK,KAAb,CAAf,GAAqCN,WAArC;AACD,GAHD,MAGO;AACLG,IAAAA,eAAe,GAAGD,YAAY,CAACT,GAA/B;AACAU,IAAAA,eAAe,CAACI,MAAhB,CAAuBN,WAAW,CAACK,KAAnC,EAA0C,CAA1C;AACD;;AACD,QAAMZ,UAAU,GAAGS,eAAe,CAACK,MAAhB,CAAwBC,OAAD,IAAa,CAACA,OAAO,CAACC,UAA7C,CAAnB;AACAP,EAAAA,eAAe,GAAG;AAChBV,IAAAA,GAAG,EAAEU,eADW;AAEhBT,IAAAA,UAAU,EAAEA,UAAU,CAACW,MAFP;AAGhBV,IAAAA,MAAM,EAAEO,YAAY,CAACP;AAHL,GAAlB;AAKA,SAAOQ,eAAP;AACD;;AAED,eAAeZ,OAAf","sourcesContent":["import { current } from \"@reduxjs/toolkit\";\r\n\r\nconst reducer = (state = { log: [], wrongWords: 0, errors: 0 }, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_INPUT_LOG\":\r\n      return inputLogUpdater(\r\n        action.payload.enteredWord,\r\n        action.payload.currentWord,\r\n        state\r\n      );\r\n    case \"INCREMENT_WRONG_COUNT_LOG\":\r\n      return { ...state, errors: state.errors + 1 };\r\n    case \"INCREMENT_WRONG_COUNT_LOG\":\r\n      return { ...state, errors: state.errors + 1 };\r\n    case \"RESET_INPUT_LOG\":\r\n      return { log: [], wrongWords: 0, errors: 0 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\r\n  let updatedInputLog = [];\r\n  if (currentWord.key > prevInputLog.log.length) {\r\n    updatedInputLog = prevInputLog.log;\r\n    updatedInputLog[currentWord.index] = enteredWord;\r\n  } else {\r\n    updatedInputLog = prevInputLog.log;\r\n    updatedInputLog.splice(currentWord.index, 1);\r\n  }\r\n  const wrongWords = updatedInputLog.filter((prevLog) => !prevLog.isComplete);\r\n  updatedInputLog = {\r\n    log: updatedInputLog,\r\n    wrongWords: wrongWords.length,\r\n    errors: prevInputLog.errors,\r\n  };\r\n  return updatedInputLog;\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}