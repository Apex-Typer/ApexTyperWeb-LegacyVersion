{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\CountdownTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CountdownTimer(props) {\n  _s();\n\n  // states and functions for showing the countdown timer once the test starts\n  const [time, setTime] = useState(localStorage.getItem(\"time\") === null ? 30 : localStorage.getItem(\"time\"));\n  const [timerTime, setTimerTime] = useState(null);\n\n  function startTimer(duration) {\n    var timer = duration;\n    let minutes;\n    let seconds;\n    let r;\n    setInterval(function () {\n      minutes = parseInt(timer / 60, 10);\n      seconds = parseInt(timer % 60, 10);\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n      if (minutes > \"00\") {\n        r = minutes + \":\" + seconds;\n      } else {\n        r = seconds;\n      }\n\n      setTimerTime(r);\n\n      if (--timer < 0) {\n        timer = duration;\n      }\n    }, 1000);\n  }\n\n  useEffect(() => {\n    if (props.testOn && time > 0) {\n      startTimer(time);\n    }\n  }, [props.testOn]);\n  return /*#__PURE__*/_jsxDEV(TimeView, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"time-view\",\n      children: timerTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownTimer, \"VWRRUtVwO5k3sjPu+DmBqcqKA5A=\");\n\n_c = CountdownTimer;\nexport default CountdownTimer;\nconst TimeView = styled.div``;\n_c2 = TimeView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountdownTimer\");\n$RefreshReg$(_c2, \"TimeView\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/CountdownTimer.js"],"names":["React","useState","useEffect","styled","CountdownTimer","props","time","setTime","localStorage","getItem","timerTime","setTimerTime","startTimer","duration","timer","minutes","seconds","r","setInterval","parseInt","testOn","TimeView","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC7B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAC9BO,YAAY,CAACC,OAAb,CAAqB,MAArB,MAAiC,IAAjC,GAAwC,EAAxC,GAA6CD,YAAY,CAACC,OAAb,CAAqB,MAArB,CADf,CAAhC;AAGA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;;AAEA,WAASW,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,QAAIC,KAAK,GAAGD,QAAZ;AACA,QAAIE,OAAJ;AACA,QAAIC,OAAJ;AACA,QAAIC,CAAJ;AACAC,IAAAA,WAAW,CAAC,YAAY;AACtBH,MAAAA,OAAO,GAAGI,QAAQ,CAACL,KAAK,GAAG,EAAT,EAAa,EAAb,CAAlB;AACAE,MAAAA,OAAO,GAAGG,QAAQ,CAACL,KAAK,GAAG,EAAT,EAAa,EAAb,CAAlB;AAEAC,MAAAA,OAAO,GAAGA,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAzC;AACAC,MAAAA,OAAO,GAAGA,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAzC;;AAEA,UAAID,OAAO,GAAG,IAAd,EAAoB;AAClBE,QAAAA,CAAC,GAAGF,OAAO,GAAG,GAAV,GAAgBC,OAApB;AACD,OAFD,MAEO;AACLC,QAAAA,CAAC,GAAGD,OAAJ;AACD;;AACDL,MAAAA,YAAY,CAACM,CAAD,CAAZ;;AACA,UAAI,EAAEH,KAAF,GAAU,CAAd,EAAiB;AACfA,QAAAA,KAAK,GAAGD,QAAR;AACD;AACF,KAhBU,EAgBR,IAhBQ,CAAX;AAiBD;;AAEDX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,KAAK,CAACe,MAAN,IAAgBd,IAAI,GAAG,CAA3B,EAA8B;AAC5BM,MAAAA,UAAU,CAACN,IAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACD,KAAK,CAACe,MAAP,CAJM,CAAT;AAKA,sBACE,QAAC,QAAD;AAAA,2BACE;AAAG,MAAA,EAAE,EAAC,WAAN;AAAA,gBAAmBV;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAzCQN,c;;KAAAA,c;AA2CT,eAAeA,cAAf;AAEA,MAAMiB,QAAQ,GAAGlB,MAAM,CAACmB,GAAI,EAA5B;MAAMD,Q","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction CountdownTimer(props) {\r\n  // states and functions for showing the countdown timer once the test starts\r\n  const [time, setTime] = useState(\r\n    localStorage.getItem(\"time\") === null ? 30 : localStorage.getItem(\"time\")\r\n  );\r\n  const [timerTime, setTimerTime] = useState(null);\r\n\r\n  function startTimer(duration) {\r\n    var timer = duration;\r\n    let minutes;\r\n    let seconds;\r\n    let r;\r\n    setInterval(function () {\r\n      minutes = parseInt(timer / 60, 10);\r\n      seconds = parseInt(timer % 60, 10);\r\n\r\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n      if (minutes > \"00\") {\r\n        r = minutes + \":\" + seconds;\r\n      } else {\r\n        r = seconds;\r\n      }\r\n      setTimerTime(r);\r\n      if (--timer < 0) {\r\n        timer = duration;\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.testOn && time > 0) {\r\n      startTimer(time);\r\n    }\r\n  }, [props.testOn]);\r\n  return (\r\n    <TimeView>\r\n      <p id=\"time-view\">{timerTime}</p>\r\n    </TimeView>\r\n  );\r\n}\r\n\r\nexport default CountdownTimer;\r\n\r\nconst TimeView = styled.div``;\r\n"]},"metadata":{},"sourceType":"module"}