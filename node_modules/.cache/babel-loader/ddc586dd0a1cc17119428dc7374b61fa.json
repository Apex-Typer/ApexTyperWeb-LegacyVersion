{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\state\\\\reducers\\\\testWords.js\";\nimport { store } from \"../store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"NEW_WORDS\":\n      testWordsLoader();\n\n    case \"EVALUATE_WORDS\":\n      return testWordsUpdate(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nfunction testWordsLoader() {\n  let j = 500;\n  let wordList = [];\n  let prevRanNum = 0;\n\n  for (let i = 0; i < j; i++) {\n    var r = Math.floor(Math.random() * words.length);\n\n    if (r == prevRanNum) {\n      r++;\n      console.log(\"corrected\");\n    }\n\n    prevRanNum = r;\n    const word = words[r];\n    let letterArray = [];\n\n    for (let l = 0; l < word.length; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${i + 1}-letter-${l + 1}`,\n        className: \"letter\",\n        children: word[l]\n      }, `word-${i + 1}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this));\n    }\n\n    wordList.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `test-words${i == 0 ? \" current-word\" : \"\"}`,\n      id: `word-${i + 1}`,\n      children: letterArray\n    }, `word-${i + 1}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this));\n    wordList.push(\" \");\n  }\n\n  return wordList;\n}\n\nfunction testWordsUpdate(prevTestWords) {\n  currentWordSliced = states.currentWord.word.slice(0, states.enteredWord);\n  currentWordIndex = states.currentWord.key - 1;\n  updatedWord = \"\";\n\n  if (states.enteredWord != states.currentWord) {\n    console.log(\"wrong for\" + prevTestWords[currentWordIndex]);\n  }\n}","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/testWords.js"],"names":["store","reducer","state","action","type","testWordsLoader","testWordsUpdate","j","wordList","prevRanNum","i","r","Math","floor","random","words","length","console","log","word","letterArray","l","push","prevTestWords","currentWordSliced","states","currentWord","slice","enteredWord","currentWordIndex","key","updatedWord"],"mappings":";AAAA,SAAQA,KAAR,QAAqB,UAArB;;;AAEA,MAAMC,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACEC,MAAAA,eAAe;;AACjB,SAAK,gBAAL;AACE,aAAOC,eAAe,CAACJ,KAAD,CAAtB;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD,CATD;;AAWA,eAAeD,OAAf;;AAEA,SAASI,eAAT,GAA2B;AACzB,MAAIE,CAAC,GAAG,GAAR;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAC1B,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,KAAK,CAACC,MAAjC,CAAR;;AACA,QAAIL,CAAC,IAAIF,UAAT,EAAqB;AACnBE,MAAAA,CAAC;AACDM,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;AACDT,IAAAA,UAAU,GAAGE,CAAb;AACA,UAAMQ,IAAI,GAAGJ,KAAK,CAACJ,CAAD,CAAlB;AACA,QAAIS,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACH,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AACpCD,MAAAA,WAAW,CAACE,IAAZ,eACE;AAEE,QAAA,EAAE,EAAG,QAAOZ,CAAC,GAAG,CAAE,WAAUW,CAAC,GAAG,CAAE,EAFpC;AAGE,QAAA,SAAS,EAAC,QAHZ;AAAA,kBAKGF,IAAI,CAACE,CAAD;AALP,SACQ,QAAOX,CAAC,GAAG,CAAE,WAAUW,CAAC,GAAG,CAAE,EADrC;AAAA;AAAA;AAAA;AAAA,cADF;AASD;;AACDb,IAAAA,QAAQ,CAACc,IAAT,eACE;AACE,MAAA,SAAS,EAAG,aAAYZ,CAAC,IAAI,CAAL,GAAS,eAAT,GAA2B,EAAG,EADxD;AAEE,MAAA,EAAE,EAAG,QAAOA,CAAC,GAAG,CAAE,EAFpB;AAAA,gBAKGU;AALH,OAGQ,QAAOV,CAAC,GAAG,CAAE,EAHrB;AAAA;AAAA;AAAA;AAAA,YADF;AASAF,IAAAA,QAAQ,CAACc,IAAT,CAAc,GAAd;AACD;;AACD,SAAOd,QAAP;AACD;;AAED,SAASF,eAAT,CAAyBiB,aAAzB,EAAwC;AACtCC,EAAAA,iBAAiB,GAAGC,MAAM,CAACC,WAAP,CAAmBP,IAAnB,CAAwBQ,KAAxB,CAA8B,CAA9B,EAAiCF,MAAM,CAACG,WAAxC,CAApB;AACAC,EAAAA,gBAAgB,GAAGJ,MAAM,CAACC,WAAP,CAAmBI,GAAnB,GAAyB,CAA5C;AACAC,EAAAA,WAAW,GAAG,EAAd;;AACA,MAAIN,MAAM,CAACG,WAAP,IAAsBH,MAAM,CAACC,WAAjC,EAA8C;AAC5CT,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcK,aAAa,CAACM,gBAAD,CAAvC;AACD;AACF","sourcesContent":["import {store}  from \"../store\";\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"NEW_WORDS\":\r\n      testWordsLoader();\r\n    case \"EVALUATE_WORDS\":\r\n      return testWordsUpdate(state);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction testWordsLoader() {\r\n  let j = 500;\r\n  let wordList = [];\r\n  let prevRanNum = 0;\r\n  for (let i = 0; i < j; i++) {\r\n    var r = Math.floor(Math.random() * words.length);\r\n    if (r == prevRanNum) {\r\n      r++;\r\n      console.log(\"corrected\");\r\n    }\r\n    prevRanNum = r;\r\n    const word = words[r];\r\n    let letterArray = [];\r\n    for (let l = 0; l < word.length; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${i + 1}-letter-${l + 1}`}\r\n          id={`word-${i + 1}-letter-${l + 1}`}\r\n          className=\"letter\"\r\n        >\r\n          {word[l]}\r\n        </span>\r\n      );\r\n    }\r\n    wordList.push(\r\n      <span\r\n        className={`test-words${i == 0 ? \" current-word\" : \"\"}`}\r\n        id={`word-${i + 1}`}\r\n        key={`word-${i + 1}`}\r\n      >\r\n        {letterArray}\r\n      </span>\r\n    );\r\n    wordList.push(\" \");\r\n  }\r\n  return wordList;\r\n}\r\n\r\nfunction testWordsUpdate(prevTestWords) {\r\n  currentWordSliced = states.currentWord.word.slice(0, states.enteredWord);\r\n  currentWordIndex = states.currentWord.key - 1;\r\n  updatedWord = \"\";\r\n  if (states.enteredWord != states.currentWord) {\r\n    console.log(\"wrong for\" + prevTestWords[currentWordIndex]);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}