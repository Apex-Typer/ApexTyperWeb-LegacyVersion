{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TestResult.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TestResult() {\n  _s();\n\n  const inputLog = useSelector(state => state.inputLog);\n  const time = useSelector(state => state.testTimer.time);\n  const timeMultiplier = 60 / time;\n  const totalWords = inputLog.log.length;\n  const totalWrongWords = inputLog.wrongWords;\n  const totalCorrectWords = totalWords - totalWrongWords;\n  const totalCorrections = inputLog.wrongCount - totalWrongWords;\n  const wordAccuracy = totalCorrectWords * 100 / totalWords;\n  totalCorrections / wordAccuracy;\n  const accuracy = Math.round(wordAccuracy - totalCorrections / wordAccuracy);\n  const wpm = Math.round(totalCorrectWords * timeMultiplier);\n\n  function resultReveal(element) {\n    const counters = document.querySelectorAll(element);\n    const speed = 100;\n    counters.forEach(counter => {\n      const animate = () => {\n        const value = +counter.getAttribute(\"result\");\n        const data = +counter.innerText;\n        const time = value / speed;\n\n        if (data < value) {\n          counter.innerText = Math.ceil(data + time); // setTimeout(animate, 20 * (data / value));\n\n          setTimeout(animate, 2 * (value / data));\n        } else {\n          counter.innerText = value;\n        }\n      };\n\n      animate();\n    });\n  }\n\n  useEffect(() => {\n    resultReveal(\".result-num\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"result-num\",\n        result: wpm,\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), \"_wpm\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"result-num\",\n        result: accuracy,\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), \"%_accuracy\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TestResult, \"qxTFgWTWQMfK+NIphLTJMPm7Gy0=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = TestResult;\nexport default TestResult;\nconst Container = styled.div`\n  display: flex;\n  p {\n    font-size: 3rem;\n    color: cyan;\n    margin: 0;\n    /* width: 3.8rem; */\n  }\n  span {\n    margin-top: 20px;\n    font-size: 2rem;\n    color: #aaa;\n    display: flex;\n    align-items: baseline;\n    margin-right: 60px;\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TestResult\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TestResult.js"],"names":["React","useState","useEffect","useRef","useSelector","styled","TestResult","inputLog","state","time","testTimer","timeMultiplier","totalWords","log","length","totalWrongWords","wrongWords","totalCorrectWords","totalCorrections","wrongCount","wordAccuracy","accuracy","Math","round","wpm","resultReveal","element","counters","document","querySelectorAll","speed","forEach","counter","animate","value","getAttribute","data","innerText","ceil","setTimeout","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAMC,QAAQ,GAAGH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACD,QAAlB,CAA5B;AACA,QAAME,IAAI,GAAGL,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACE,SAAN,CAAgBD,IAA5B,CAAxB;AACA,QAAME,cAAc,GAAG,KAAKF,IAA5B;AACA,QAAMG,UAAU,GAAGL,QAAQ,CAACM,GAAT,CAAaC,MAAhC;AACA,QAAMC,eAAe,GAAGR,QAAQ,CAACS,UAAjC;AACA,QAAMC,iBAAiB,GAAGL,UAAU,GAAGG,eAAvC;AACA,QAAMG,gBAAgB,GAAGX,QAAQ,CAACY,UAAT,GAAsBJ,eAA/C;AACA,QAAMK,YAAY,GAAIH,iBAAiB,GAAG,GAArB,GAA4BL,UAAjD;AACAM,EAAAA,gBAAgB,GAACE,YAAjB;AAEA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,YAAY,GAAGF,gBAAgB,GAAGE,YAA7C,CAAjB;AACA,QAAMI,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAWN,iBAAiB,GAAGN,cAA/B,CAAZ;;AAEA,WAASc,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,UAAMC,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0BH,OAA1B,CAAjB;AACA,UAAMI,KAAK,GAAG,GAAd;AAEAH,IAAAA,QAAQ,CAACI,OAAT,CAAkBC,OAAD,IAAa;AAC5B,YAAMC,OAAO,GAAG,MAAM;AACpB,cAAMC,KAAK,GAAG,CAACF,OAAO,CAACG,YAAR,CAAqB,QAArB,CAAf;AACA,cAAMC,IAAI,GAAG,CAACJ,OAAO,CAACK,SAAtB;AAEA,cAAM5B,IAAI,GAAGyB,KAAK,GAAGJ,KAArB;;AACA,YAAIM,IAAI,GAAGF,KAAX,EAAkB;AAChBF,UAAAA,OAAO,CAACK,SAAR,GAAoBf,IAAI,CAACgB,IAAL,CAAUF,IAAI,GAAG3B,IAAjB,CAApB,CADgB,CAEhB;;AACA8B,UAAAA,UAAU,CAACN,OAAD,EAAU,KAAKC,KAAK,GAAGE,IAAb,CAAV,CAAV;AACD,SAJD,MAIO;AACLJ,UAAAA,OAAO,CAACK,SAAR,GAAoBH,KAApB;AACD;AACF,OAZD;;AAcAD,MAAAA,OAAO;AACR,KAhBD;AAiBD;;AAED/B,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,YAAY,CAAC,aAAD,CAAZ;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,YAAb;AAA0B,QAAA,MAAM,EAAED,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,YAAb;AAA0B,QAAA,MAAM,EAAEH,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAzDQf,U;UACUF,W,EACJA,W;;;KAFNE,U;AA2DT,eAAeA,UAAf;AAEA,MAAMkC,SAAS,GAAGnC,MAAM,CAACoC,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA;MAAMD,S","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction TestResult() {\r\n  const inputLog = useSelector((state) => state.inputLog);\r\n  const time = useSelector((state) => state.testTimer.time);\r\n  const timeMultiplier = 60 / time;\r\n  const totalWords = inputLog.log.length;\r\n  const totalWrongWords = inputLog.wrongWords;\r\n  const totalCorrectWords = totalWords - totalWrongWords;\r\n  const totalCorrections = inputLog.wrongCount - totalWrongWords;\r\n  const wordAccuracy = (totalCorrectWords * 100) / totalWords;\r\n  totalCorrections/wordAccuracy\r\n\r\n  const accuracy = Math.round(wordAccuracy - totalCorrections / wordAccuracy);\r\n  const wpm = Math.round(totalCorrectWords * timeMultiplier);\r\n\r\n  function resultReveal(element) {\r\n    const counters = document.querySelectorAll(element);\r\n    const speed = 100;\r\n\r\n    counters.forEach((counter) => {\r\n      const animate = () => {\r\n        const value = +counter.getAttribute(\"result\");\r\n        const data = +counter.innerText;\r\n\r\n        const time = value / speed;\r\n        if (data < value) {\r\n          counter.innerText = Math.ceil(data + time);\r\n          // setTimeout(animate, 20 * (data / value));\r\n          setTimeout(animate, 2 * (value / data));\r\n        } else {\r\n          counter.innerText = value;\r\n        }\r\n      };\r\n\r\n      animate();\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    resultReveal(\".result-num\");\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <span>\r\n        <p className=\"result-num\" result={wpm}>\r\n          0\r\n        </p>\r\n        _wpm\r\n      </span>\r\n      <span>\r\n        <p className=\"result-num\" result={accuracy}>\r\n          0\r\n        </p>\r\n        %_accuracy\r\n      </span>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TestResult;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  p {\r\n    font-size: 3rem;\r\n    color: cyan;\r\n    margin: 0;\r\n    /* width: 3.8rem; */\r\n  }\r\n  span {\r\n    margin-top: 20px;\r\n    font-size: 2rem;\r\n    color: #aaa;\r\n    display: flex;\r\n    align-items: baseline;\r\n    margin-right: 60px;\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}