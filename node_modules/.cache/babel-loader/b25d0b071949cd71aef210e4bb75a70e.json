{"ast":null,"code":"import { current } from \"@reduxjs/toolkit\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"UPDATE_INPUT_LOG\":\n      return inputLogUpdater(action.payload.enteredWord, action.payload.currentWord, state);\n\n    default:\n      return state;\n  }\n};\n\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\n  if (enteredWord.word != \"\") {\n    let updatedInputLog = prevInputLog;\n    updatedInputLog[currentWord.index] = enteredWord;\n  } else {\n    let updatedInputLog = prevInputLog;\n    updatedInputLog.splic(currentWord.index, 1);\n  }\n\n  return updatedInputLog;\n}\n\nexport default reducer;","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/inputLog.js"],"names":["current","reducer","state","action","type","inputLogUpdater","payload","enteredWord","currentWord","prevInputLog","word","updatedInputLog","index","splic"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAOC,eAAe,CAACF,MAAM,CAACG,OAAP,CAAeC,WAAhB,EAA4BJ,MAAM,CAACG,OAAP,CAAeE,WAA3C,EAAuDN,KAAvD,CAAtB;;AACF;AACE,aAAOA,KAAP;AAJJ;AAMD,CAPD;;AASA,SAASG,eAAT,CAAyBE,WAAzB,EAAqCC,WAArC,EAAiDC,YAAjD,EAA8D;AAC1D,MAAGF,WAAW,CAACG,IAAZ,IAAkB,EAArB,EAAwB;AACpB,QAAIC,eAAe,GAAIF,YAAvB;AACAE,IAAAA,eAAe,CAACH,WAAW,CAACI,KAAb,CAAf,GAAoCL,WAApC;AACH,GAHD,MAGK;AACD,QAAII,eAAe,GAAIF,YAAvB;AACAE,IAAAA,eAAe,CAACE,KAAhB,CAAsBL,WAAW,CAACI,KAAlC,EAAwC,CAAxC;AACH;;AACD,SAAOD,eAAP;AACH;;AAED,eAAeV,OAAf","sourcesContent":["import { current } from \"@reduxjs/toolkit\";\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_INPUT_LOG\":\r\n      return inputLogUpdater(action.payload.enteredWord,action.payload.currentWord,state)\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction inputLogUpdater(enteredWord,currentWord,prevInputLog){\r\n    if(enteredWord.word!=\"\"){\r\n        let updatedInputLog =  prevInputLog\r\n        updatedInputLog[currentWord.index]= enteredWord\r\n    }else{\r\n        let updatedInputLog =  prevInputLog\r\n        updatedInputLog.splic(currentWord.index,1) \r\n    }\r\n    return updatedInputLog\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}