{"ast":null,"code":"import _toConsumableArray from\"D:/APEX_TYPER/apex_typer_5.0/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import words from\"../../components/wordsData\";import{jsx as _jsx}from\"react/jsx-runtime\";var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{forHtml:[],rawWords:[]};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"NEW_WORDS\":return testWordsLoader();case\"UPDATE_CURRENT_WORD\":return{forHtml:updateCurrentWord(state.forHtml,action.payload.currentWord,action.payload.enteredWord,action.payload.blinkCurrentLetter,action.payload.wordChanged),rawWords:state.rawWords};default:return state;}};export default reducer;function testWordsLoader(){var j=500;var wordsArrayHtml=[];var wordsArray=[];var prevRanNum=0;for(var i=0;i<j;i++){var r=Math.floor(Math.random()*words.length);if(r==prevRanNum){r++;}prevRanNum=r;var word=words[r];var letterArray=[];for(var l=0;l<word.length;l++){letterArray.push(/*#__PURE__*/_jsx(\"span\",{id:\"word-\".concat(i+1,\"-letter-\").concat(l+1),className:\"letter\".concat(i==0&&l==0?\" current-letter\":\"\"),children:word[l]},\"word-\".concat(i+1,\"-letter-\").concat(l+1)));}wordsArrayHtml.push(/*#__PURE__*/_jsx(\"span\",{className:\"test-words\".concat(i==0?\" current-word\":\"\"),id:\"word-\".concat(i+1),children:letterArray},\"word-\".concat(i+1)));wordsArrayHtml.push(\" \");wordsArray.push(word);}return{forHtml:wordsArrayHtml,rawWords:wordsArray};}function updateCurrentWord(prevTestWords,currentWord,enteredWord,blinkCurrentLetter,wordChanged){var updatedWordList=[];var currentWordIndex=currentWord.htmlIndex;var enteredWordLength=enteredWord.word.length;var currentWordLength=currentWord.word.length;var letterArray=[];var updatedWord;if(currentWordLength>=enteredWordLength){for(var l=0;l<currentWordLength;l++){letterArray.push(/*#__PURE__*/_jsx(\"span\",{id:\"word-\".concat(currentWord.key,\"-letter-\").concat(l+1),className:\"letter \".concat(classAssigner(currentWord.word[l],enteredWord.word[l],currentWordLength,enteredWordLength,l,enteredWord.isWrong,blinkCurrentLetter,wordChanged,enteredWord.word==\"\")),children:currentWord.word[l]},\"word-\".concat(currentWord.key,\"-letter-\").concat(l+1)));}}else{for(var _l=0;_l<enteredWordLength;_l++){letterArray.push(/*#__PURE__*/_jsx(\"span\",{id:\"word-\".concat(currentWord.key,\"-letter-\").concat(_l+1),className:\"letter \".concat(_l+1<=enteredWordLength?currentWord.word[_l]==enteredWord.word[_l]?enteredWord.isWrong?\"custom-dark-yellow\":\"custom-dark-cyan\":\"custom-dark-red\":\"\"),children:_l+1<=currentWordLength?currentWord.word[_l]:enteredWord.word[_l]},\"word-\".concat(currentWord.key,\"-letter-\").concat(_l+1)));}}updatedWord=/*#__PURE__*/_jsx(\"span\",{className:\"test-words\",id:currentWord.id,children:letterArray},currentWord.id);updatedWordList=_toConsumableArray(prevTestWords);updatedWordList[currentWordIndex]=updatedWord;return updatedWordList;}function classAssigner(currentLetter,enteredLetter,currentWordLength,enteredWordLength,currentLetterIndex,enteredWordIsWrong,blinkCurrentLetter,wordChanged,enteredWordIsEmpty){var classVal=\"letter \";if(enteredWordLength>=currentLetterIndex+1){if(currentLetter==enteredLetter){if(enteredWordIsWrong||wordChanged&&enteredWordLength<currentWordLength){classVal+=\"custom-dark-yellow\";}else{classVal+=\"custom-dark-cyan\";}}else{classVal+=\"custom-dark-red\";}}else if(enteredWordLength==currentLetterIndex&&blinkCurrentLetter){classVal+=\"current-letter\";}else if(wordChanged&&!enteredWordIsEmpty){classVal+=\"custom-dark-grey\";}return classVal;}","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/testWords.js"],"names":["words","reducer","state","forHtml","rawWords","action","type","testWordsLoader","updateCurrentWord","payload","currentWord","enteredWord","blinkCurrentLetter","wordChanged","j","wordsArrayHtml","wordsArray","prevRanNum","i","r","Math","floor","random","length","word","letterArray","l","push","prevTestWords","updatedWordList","currentWordIndex","htmlIndex","enteredWordLength","currentWordLength","updatedWord","key","classAssigner","isWrong","id","currentLetter","enteredLetter","currentLetterIndex","enteredWordIsWrong","enteredWordIsEmpty","classVal"],"mappings":"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","sourcesContent":["import words from \"../../components/wordsData\";\r\n\r\nconst reducer = (state = { forHtml: [], rawWords: [] }, action) => {\r\n  switch (action.type) {\r\n    case \"NEW_WORDS\":\r\n      return testWordsLoader();\r\n    case \"UPDATE_CURRENT_WORD\":\r\n      return {\r\n        forHtml: updateCurrentWord(\r\n          state.forHtml,\r\n          action.payload.currentWord,\r\n          action.payload.enteredWord,\r\n          action.payload.blinkCurrentLetter,\r\n          action.payload.wordChanged\r\n        ),\r\n        rawWords: state.rawWords,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction testWordsLoader() {\r\n  let j = 500;\r\n  let wordsArrayHtml = [];\r\n  let wordsArray = [];\r\n  let prevRanNum = 0;\r\n  for (let i = 0; i < j; i++) {\r\n    var r = Math.floor(Math.random() * words.length);\r\n    if (r == prevRanNum) {\r\n      r++;\r\n    }\r\n    prevRanNum = r;\r\n    const word = words[r];\r\n    let letterArray = [];\r\n    for (let l = 0; l < word.length; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${i + 1}-letter-${l + 1}`}\r\n          id={`word-${i + 1}-letter-${l + 1}`}\r\n          className={`letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`}\r\n        >\r\n          {word[l]}\r\n        </span>\r\n      );\r\n    }\r\n    wordsArrayHtml.push(\r\n      <span\r\n        className={`test-words${i == 0 ? \" current-word\" : \"\"}`}\r\n        id={`word-${i + 1}`}\r\n        key={`word-${i + 1}`}\r\n      >\r\n        {letterArray}\r\n      </span>\r\n    );\r\n    wordsArrayHtml.push(\" \");\r\n    wordsArray.push(word);\r\n  }\r\n  return { forHtml: wordsArrayHtml, rawWords: wordsArray };\r\n}\r\n\r\nfunction updateCurrentWord(\r\n  prevTestWords,\r\n  currentWord,\r\n  enteredWord,\r\n  blinkCurrentLetter,\r\n  wordChanged\r\n) {\r\n  let updatedWordList = [];\r\n  let currentWordIndex = currentWord.htmlIndex;\r\n\r\n  let enteredWordLength = enteredWord.word.length;\r\n  let currentWordLength = currentWord.word.length;\r\n\r\n  let letterArray = [];\r\n  let updatedWord;\r\n\r\n  if (currentWordLength >= enteredWordLength) {\r\n    for (let l = 0; l < currentWordLength; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${currentWord.key}-letter-${l + 1}`}\r\n          id={`word-${currentWord.key}-letter-${l + 1}`}\r\n          className={`letter ${classAssigner(\r\n            currentWord.word[l],\r\n            enteredWord.word[l],\r\n            currentWordLength,\r\n            enteredWordLength,\r\n            l,\r\n            enteredWord.isWrong,\r\n            blinkCurrentLetter,\r\n            wordChanged,\r\n            enteredWord.word == \"\"\r\n          )}`}\r\n        >\r\n          {currentWord.word[l]}\r\n        </span>\r\n      );\r\n    }\r\n  } else {\r\n    for (let l = 0; l < enteredWordLength; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${currentWord.key}-letter-${l + 1}`}\r\n          id={`word-${currentWord.key}-letter-${l + 1}`}\r\n          className={`letter ${\r\n            l + 1 <= enteredWordLength\r\n              ? currentWord.word[l] == enteredWord.word[l]\r\n                ? enteredWord.isWrong\r\n                  ? \"custom-dark-yellow\"\r\n                  : \"custom-dark-cyan\"\r\n                : \"custom-dark-red\"\r\n              : \"\"\r\n          }`}\r\n        >\r\n          {l + 1 <= currentWordLength\r\n            ? currentWord.word[l]\r\n            : enteredWord.word[l]}\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n  updatedWord = (\r\n    <span className={\"test-words\"} id={currentWord.id} key={currentWord.id}>\r\n      {letterArray}\r\n    </span>\r\n  );\r\n\r\n  updatedWordList = [...prevTestWords];\r\n  updatedWordList[currentWordIndex] = updatedWord;\r\n  return updatedWordList;\r\n}\r\n\r\nfunction classAssigner(\r\n  currentLetter,\r\n  enteredLetter,\r\n  currentWordLength,\r\n  enteredWordLength,\r\n  currentLetterIndex,\r\n  enteredWordIsWrong,\r\n  blinkCurrentLetter,\r\n  wordChanged,\r\n  enteredWordIsEmpty\r\n) {\r\n  let classVal = \"letter \";\r\n\r\n  if (enteredWordLength >= currentLetterIndex + 1) {\r\n    if (currentLetter == enteredLetter) {\r\n      if (\r\n        enteredWordIsWrong ||\r\n        (wordChanged && enteredWordLength < currentWordLength)\r\n      ) {\r\n        classVal += \"custom-dark-yellow\";\r\n      } else {\r\n        classVal += \"custom-dark-cyan\";\r\n      }\r\n    } else {\r\n      classVal += \"custom-dark-red\";\r\n    }\r\n  } else if (enteredWordLength == currentLetterIndex && blinkCurrentLetter) {\r\n    classVal += \"current-letter\";\r\n  } else if (wordChanged && !enteredWordIsEmpty) {\r\n    classVal += \"custom-dark-grey\";\r\n  }\r\n  return classVal;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}