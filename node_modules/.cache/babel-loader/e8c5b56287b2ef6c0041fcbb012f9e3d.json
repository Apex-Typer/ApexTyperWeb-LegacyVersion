{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TextInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, componentDidMount } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { firstWord, nextWord, prevWord, updateInput, resetInput, focusInput, blurInput, updateCurrentWord, updateAndChangeCurrentWord, confirmWord, updateInputLog, switchTestOn, incrementErrorLog, decrementErrorLog, inactivateCurrentWord } from \"../state/action-creators/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TextInput() {\n  _s();\n\n  const currentWord = useSelector(state => state.currentWord);\n  const time = useSelector(state => state.testTimer.time);\n  const enteredWord = useSelector(state => state.enteredWord);\n  const inputLog = useSelector(state => state.inputLog.log);\n  const errorLog = useSelector(state => state.inputLog.errors);\n  const testWords = useSelector(state => state.testWords);\n  const testOn = useSelector(state => state.testOn);\n  const inputFocused = useSelector(state => state.inputFocused);\n  const dispatch = useDispatch();\n  const inputRef = useRef(null);\n  const testContentScrollerCount = useRef(0);\n  useEffect(() => {\n    if (currentWord.key > 0) {\n      if (inputRef.current && document.activeElement != inputRef.current) {\n        inputRef.current.focus();\n      }\n\n      let currentLineHeight = parseInt(window.getComputedStyle(document.getElementById(\"TestContent\")).getPropertyValue(\"line-height\"));\n\n      if (currentWord.top == 0) {\n        testContentScrollerCount.current = 0;\n        document.getElementById(\"TestContentChild\").style.transform = `translateY(${currentLineHeight}px)`;\n      } else if (currentWord.top - currentLineHeight * testContentScrollerCount.current != 0) {\n        testContentScroller();\n      }\n\n      if (currentWord.key <= inputLog.length && enteredWord.word == \"\") {\n        dispatch(updateInput(inputLog[currentWord.index].word, currentWord.word));\n\n        if (inputLog[currentWord.index].isWrong) {\n          dispatch(decrementErrorLog());\n        }\n\n        dispatch(updateInputLog(currentWord, enteredWord));\n      }\n    }\n  }, [currentWord]);\n  useEffect(() => {\n    if (currentWord.key > 0) {\n      dispatch(updateCurrentWord(currentWord, enteredWord));\n    }\n  }, [enteredWord]);\n  useEffect(() => {\n    if (enteredWord.isWrong) {\n      dispatch(incrementErrorLog());\n    }\n  }, [enteredWord.isWrong]);\n\n  function testContentScroller() {\n    let currentLineHeight = parseInt(window.getComputedStyle(document.getElementById(\"TestContent\")).getPropertyValue(\"line-height\"));\n    let topOffsetFactor = (currentWord.top - currentLineHeight * testContentScrollerCount.current) / currentLineHeight;\n    testContentScrollerCount.current = testContentScrollerCount.current + topOffsetFactor;\n    document.getElementById(\"TestContentChild\").style.transform = `translateY(${-1 * (currentLineHeight * testContentScrollerCount.current - currentLineHeight)}px)`;\n  }\n\n  function textInputChangeHandler(e) {\n    // let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n    let enteredValue = e.target.value;\n    if (enteredValue) dispatch(updateInput(enteredValue, currentWord.word));\n\n    if (!testOn && currentWord.key == 1 && enteredValue != \"\" && time != 0) {\n      dispatch(switchTestOn());\n    }\n  }\n\n  function keyDownHandler(e) {\n    let keyClicked = e.nativeEvent.code;\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n\n    if (keyClicked == \"Space\" && enteredValue != \"\") {\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\n      dispatch(updateInputLog(currentWord, enteredWord));\n      dispatch(nextWord(testWords.rawWords));\n      dispatch(resetInput());\n    } else if (keyClicked == \"Backspace\" && enteredValue == \"\" && currentWord.key > 1 && !inputLog[currentWord.index - 1].isComplete) {\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\n      dispatch(prevWord(testWords.rawWords));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      id: \"textInput\",\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      maxLength: \"15\",\n      value: enteredWord.word // onKeyDown={(e) => keyDownHandler(e)}\n      ,\n      onKeyDown: e => keyDownHandler(e),\n      onChange: e => textInputChangeHandler(e),\n      onBlur: () => {\n        dispatch(blurInput());\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextInput, \"gs09aTboqrlufz9FB1ajii65nu4=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = TextInput;\nexport default TextInput;\nconst Container = styled.div`\n  width: 100%;\n  position: absolute;\n\n  input {\n    background-color: transparent;\n    border: none;\n    cursor: default;\n    border-bottom: \"none\";\n    caret-color: transparent !important;\n    font-size: 1.2em;\n    font-family: \"Quicksand\", sans-serif;\n    font-weight: 500;\n    text-align: center;\n    color: transparent;\n    transition: all 150ms ease-in-out;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TextInput.js"],"names":["React","useState","useEffect","useRef","componentDidMount","styled","useSelector","useDispatch","firstWord","nextWord","prevWord","updateInput","resetInput","focusInput","blurInput","updateCurrentWord","updateAndChangeCurrentWord","confirmWord","updateInputLog","switchTestOn","incrementErrorLog","decrementErrorLog","inactivateCurrentWord","TextInput","currentWord","state","time","testTimer","enteredWord","inputLog","log","errorLog","errors","testWords","testOn","inputFocused","dispatch","inputRef","testContentScrollerCount","key","current","document","activeElement","focus","currentLineHeight","parseInt","window","getComputedStyle","getElementById","getPropertyValue","top","style","transform","testContentScroller","length","word","index","isWrong","topOffsetFactor","textInputChangeHandler","e","enteredValue","target","value","keyDownHandler","keyClicked","nativeEvent","code","String","replace","rawWords","isComplete","Container","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, componentDidMount } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  firstWord,\r\n  nextWord,\r\n  prevWord,\r\n  updateInput,\r\n  resetInput,\r\n  focusInput,\r\n  blurInput,\r\n  updateCurrentWord,\r\n  updateAndChangeCurrentWord,\r\n  confirmWord,\r\n  updateInputLog,\r\n  switchTestOn,\r\n  incrementErrorLog,\r\n  decrementErrorLog,\r\n  inactivateCurrentWord,\r\n} from \"../state/action-creators/index\";\r\n\r\nfunction TextInput() {\r\n  const currentWord = useSelector((state) => state.currentWord);\r\n  const time = useSelector((state) => state.testTimer.time);\r\n  const enteredWord = useSelector((state) => state.enteredWord);\r\n  const inputLog = useSelector((state) => state.inputLog.log);\r\n  const errorLog = useSelector((state) => state.inputLog.errors);\r\n  const testWords = useSelector((state) => state.testWords);\r\n  const testOn = useSelector((state) => state.testOn);\r\n  const inputFocused = useSelector((state) => state.inputFocused);\r\n  const dispatch = useDispatch();\r\n\r\n  const inputRef = useRef(null);\r\n  const testContentScrollerCount = useRef(0);\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key > 0) {\r\n      if (inputRef.current && document.activeElement != inputRef.current) {\r\n        inputRef.current.focus();\r\n      }\r\n      let currentLineHeight = parseInt(\r\n        window\r\n          .getComputedStyle(document.getElementById(\"TestContent\"))\r\n          .getPropertyValue(\"line-height\")\r\n      );\r\n\r\n      if (currentWord.top == 0) {\r\n        testContentScrollerCount.current = 0;\r\n        document.getElementById(\r\n          \"TestContentChild\"\r\n        ).style.transform = `translateY(${currentLineHeight}px)`;\r\n      } else if (\r\n        currentWord.top -\r\n          currentLineHeight * testContentScrollerCount.current !=\r\n        0\r\n      ) {\r\n        testContentScroller();\r\n      }\r\n\r\n      if (currentWord.key <= inputLog.length && enteredWord.word == \"\") {\r\n        dispatch(\r\n          updateInput(inputLog[currentWord.index].word, currentWord.word)\r\n        );\r\n        if (inputLog[currentWord.index].isWrong) {\r\n          dispatch(decrementErrorLog());\r\n        }\r\n        dispatch(updateInputLog(currentWord, enteredWord));\r\n      }\r\n    }\r\n  }, [currentWord]);\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key > 0) {\r\n      dispatch(updateCurrentWord(currentWord, enteredWord));\r\n    }\r\n  }, [enteredWord]);\r\n\r\n  useEffect(() => {\r\n    if (enteredWord.isWrong) {\r\n      dispatch(incrementErrorLog());\r\n    }\r\n  }, [enteredWord.isWrong]);\r\n\r\n  function testContentScroller() {\r\n    let currentLineHeight = parseInt(\r\n      window\r\n        .getComputedStyle(document.getElementById(\"TestContent\"))\r\n        .getPropertyValue(\"line-height\")\r\n    );\r\n\r\n    let topOffsetFactor =\r\n      (currentWord.top - currentLineHeight * testContentScrollerCount.current) /\r\n      currentLineHeight;\r\n\r\n    testContentScrollerCount.current =\r\n      testContentScrollerCount.current + topOffsetFactor;\r\n\r\n    document.getElementById(\"TestContentChild\").style.transform = `translateY(${\r\n      -1 *\r\n      (currentLineHeight * testContentScrollerCount.current - currentLineHeight)\r\n    }px)`;\r\n  }\r\n\r\n  function textInputChangeHandler(e) {\r\n    // let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    let enteredValue = e.target.value;\r\n    if(enteredValue)\r\n    dispatch(updateInput(enteredValue, currentWord.word));\r\n    if (!testOn && currentWord.key == 1 && enteredValue != \"\" && time != 0) {\r\n      dispatch(switchTestOn());\r\n    }\r\n  }\r\n\r\n  function keyDownHandler(e) {\r\n    let keyClicked = e.nativeEvent.code;\r\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    if (keyClicked == \"Space\" && enteredValue != \"\") {\r\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\r\n      dispatch(updateInputLog(currentWord, enteredWord));\r\n      dispatch(nextWord(testWords.rawWords));\r\n      dispatch(resetInput());\r\n    } else if (\r\n      keyClicked == \"Backspace\" &&\r\n      enteredValue == \"\" &&\r\n      currentWord.key > 1 &&\r\n      !inputLog[currentWord.index - 1].isComplete\r\n    ) {\r\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\r\n      dispatch(prevWord(testWords.rawWords));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <input\r\n        ref={inputRef}\r\n        id=\"textInput\"\r\n        autoCapitalize=\"off\"\r\n        autoComplete=\"off\"\r\n        spellCheck=\"false\"\r\n        maxLength=\"15\"\r\n        value={enteredWord.word}\r\n        // onKeyDown={(e) => keyDownHandler(e)}\r\n        onKeyDown={(e) => keyDownHandler(e)}\r\n        onChange={(e) => textInputChangeHandler(e)}\r\n        onBlur={() => {\r\n          dispatch(blurInput());\r\n        }}\r\n      ></input>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  position: absolute;\r\n\r\n  input {\r\n    background-color: transparent;\r\n    border: none;\r\n    cursor: default;\r\n    border-bottom: \"none\";\r\n    caret-color: transparent !important;\r\n    font-size: 1.2em;\r\n    font-family: \"Quicksand\", sans-serif;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    color: transparent;\r\n    transition: all 150ms ease-in-out;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}