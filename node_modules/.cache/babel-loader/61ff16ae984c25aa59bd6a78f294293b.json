{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\state\\\\reducers\\\\testWords.js\";\nimport words from \"../../components/wordsData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"NEW_WORDS\":\n      return testWordsLoader();\n    // case \"EVALUATE_WORDS\":\n    //   return testWordsEvaluate(\n    //     state,\n    //     action.payload.currentWord,\n    //     action.payload.enteredWord,\n    //     action.payload.inputType\n    //   );\n    // case \"UPDATE_CURRENT_WORD\":\n    //   return updateCurrentWord(\n    //     state,\n    //     action.payload.direction,\n    //     action.payload.currentWord,\n    //     action.payload.enteredWord\n    //   );\n\n    case \"UPDATE_CURRENT_WORD\":\n      return updateCurrentWord(state, action.payload.currentWord, action.payload.enteredWord);\n\n    case \"SKIP_CURRENT_WORD\":\n      return skipCurrentWord(state, action.payload.currentWord, action.payload.enteredWord, action.payload.skipTo);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nfunction testWordsLoader() {\n  let j = 500;\n  let wordList = [];\n  let prevRanNum = 0;\n\n  for (let i = 0; i < j; i++) {\n    var r = Math.floor(Math.random() * words.length);\n\n    if (r == prevRanNum) {\n      r++;\n    }\n\n    prevRanNum = r;\n    const word = words[r];\n    let letterArray = [];\n\n    for (let l = 0; l < word.length; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${i + 1}-letter-${l + 1}`,\n        className: `letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`,\n        children: word[l]\n      }, `word-${i + 1}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this));\n    }\n\n    wordList.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `test-words${i == 0 ? \" current-word\" : \"\"}`,\n      id: `word-${i + 1}`,\n      children: letterArray\n    }, `word-${i + 1}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this));\n    wordList.push(\" \");\n  }\n\n  return wordList;\n}\n\nfunction updateCurrentWord(prevTestWords, currentWord, enteredWord) {\n  let updatedWordList = [];\n  updatedWordList = [...prevTestWords];\n  updatedWordList[currentWordIndex] = updatedWord;\n  return updatedWordList;\n}\n\nfunction skipCurrentWord(prevTestWords, currentWord, enteredWord, skipTo) {\n  switch (skipTo) {\n    case \"FORWARD\":\n    default:\n      break;\n  }\n}\n\nfunction wordElementUpdater(currentWord, enteredWord, classValues) {\n  let enteredWordLength = enteredWord.word.length;\n  let currentWordLength = currentWord.word.length;\n  let currentWordIndex = currentWord.index;\n  let letterArray = [];\n  let updatedWord;\n\n  if (currentWordLength >= enteredWordLength) {\n    for (let l = 0; l < currentWordLength; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${currentWord.key}-letter-${l + 1}`,\n        className: `letter ${l + 1 <= enteredWordLength ? currentWord.word[l] == enteredWord.word[l] ? classValues.correct : classValues.wrong : l == enteredWordLength ? \" current-letter\" : \"\"}`,\n        children: currentWord.word[l]\n      }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this));\n    }\n  } else {\n    for (let l = 0; l < enteredWordLength; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${currentWord.key}-letter-${l + 1}`,\n        className: `letter ${l + 1 <= enteredWordLength ? currentWord.word[l] == enteredWord.word[l] ? classValues.correct : classValues.wrong : l == enteredWordLength ? \" current-letter\" : \"\"}`,\n        children: l + 1 < currentWordLength ? currentWord.word[l] : enteredWord[l]\n      }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"test-words\",\n    id: currentWord.id,\n    children: letterArray\n  }, currentWord.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n} // function testWordsEvaluate(prevTestWords, currentWord, enteredWord, inputType) {\n//   let enteredWordLength = enteredWord.length;\n//   let currentWordLength = currentWord.word.length;\n//   let currentWordSliced = currentWord.word.slice(0, enteredWordLength);\n//   let currentWordIndex = currentWord.index;\n//   let updatedWord;\n//   let updatedWordList;\n//   if (enteredWordLength <= currentWordLength) {\n//     if (enteredWord != currentWordSliced) {\n//       if (enteredWord != \"\") {\n//         updatedWord = wordElementUpdater(\n//           currentWord,\n//           currentWordLength,\n//           enteredWord,\n//           \"WRONG_WARNING\",\n//           inputType\n//         );\n//       } else {\n//         updatedWord = wordElementUpdater(\n//           currentWord,\n//           currentWordLength,\n//           enteredWord,\n//           \"EMPTY\",\n//           inputType\n//         );\n//       }\n//     } else if (enteredWord == currentWordSliced) {\n//       if (enteredWordLength < currentWordLength) {\n//         if (enteredWord != \"\") {\n//           updatedWord = wordElementUpdater(\n//             currentWord,\n//             currentWordLength,\n//             enteredWord,\n//             \"CORRECT\",\n//             inputType\n//           );\n//         } else {\n//           updatedWord = wordElementUpdater(\n//             currentWord,\n//             currentWordLength,\n//             enteredWord,\n//             \"EMPTY\",\n//             inputType\n//           );\n//         }\n//       } else if (enteredWordLength == currentWordLength) {\n//         updatedWord = wordElementUpdater(\n//           currentWord,\n//           currentWordLength,\n//           enteredWord,\n//           \"COMPLETED_WARNING\",\n//           inputType\n//         );\n//       }\n//     }\n//   } else if (enteredWordLength > currentWordLength) {\n//     updatedWord = wordElementUpdater(\n//       currentWord,\n//       currentWordLength,\n//       enteredWord,\n//       \"WRONG_WARNING\",\n//       inputType\n//     );\n//   }\n//   if (updatedWord) {\n//     updatedWordList = [...prevTestWords];\n//     updatedWordList[currentWordIndex] = updatedWord;\n//     return updatedWordList;\n//   } else {\n//     return prevTestWords;\n//   }\n// }\n// function updateCurrentWord(prevTestWords, direction, currentWord, enteredWord) {\n//   let currentWordIndex = currentWord.index;\n//   let currentWordLength = currentWord.word.length;\n//   let updatedWord;\n//   if (enteredWord == currentWord.word) {\n//     updatedWord = wordElementUpdater(\n//       currentWord,\n//       currentWordLength,\n//       enteredWord,\n//       \"CORRECT\",\n//       \"FINISHED_WORD\"\n//     );\n//   } else {\n//     updatedWord = wordElementUpdater(\n//       currentWord,\n//       currentWordLength,\n//       enteredWord,\n//       \"WRONG\",\n//       \"FINISHED_WORD\"\n//     );\n//   }\n//   let updatedWordList = [...prevTestWords];\n//   updatedWordList[currentWordIndex] = updatedWord;\n//   return updatedWordList;\n// }\n// function wordElementUpdater(\n//   currentWord,\n//   currentWordLength,\n//   enteredWord,\n//   wordState,\n//   inputType\n// ) {\n//   let letterArray = [];\n//   let updatedWord;\n//   switch (inputType) {\n//     case \"FLOAT\":\n//       for (let l = 0; l < currentWordLength; l++) {\n//         letterArray.push(\n//           <span\n//             key={`word-${currentWord.key}-letter-${l + 1}`}\n//             id={`word-${currentWord.key}-letter-${l + 1}`}\n//             className=\"letter\"\n//           >\n//             {currentWord.word[l]}\n//           </span>\n//         );\n//       }\n//       switch (wordState) {\n//         case \"WRONG_WARNING\":\n//           updatedWord = (\n//             <span\n//               className={\"test-words current-word wrong-warning\"}\n//               id={currentWord.id}\n//               key={currentWord.id}\n//             >\n//               {letterArray}\n//             </span>\n//           );\n//           return updatedWord;\n//         case \"COMPLETED_WARNING\":\n//           updatedWord = (\n//             <span\n//               className={\"test-words current-word completed-warning\"}\n//               id={currentWord.id}\n//               key={currentWord.id}\n//             >\n//               {letterArray}\n//             </span>\n//           );\n//           return updatedWord;\n//         case \"CORRECT\":\n//           updatedWord = (\n//             <span\n//               className={\"test-words current-word\"}\n//               id={currentWord.id}\n//               key={currentWord.id}\n//             >\n//               {letterArray}\n//             </span>\n//           );\n//           return updatedWord;\n//         case \"EMPTY\":\n//           updatedWord = (\n//             <span\n//               className={\"test-words current-word current-word-blinker\"}\n//               id={currentWord.id}\n//               key={currentWord.id}\n//             >\n//               {letterArray}\n//             </span>\n//           );\n//           return updatedWord;\n//         default:\n//           return updatedWord;\n//       }\n//     case \"INLINE\":\n//       let enteredWordLength = enteredWord.length;\n//       if (currentWordLength >= enteredWordLength) {\n//         for (let l = 0; l < currentWordLength; l++) {\n//           letterArray.push(\n//             <span\n//               key={`word-${currentWord.key}-letter-${l + 1}`}\n//               id={`word-${currentWord.key}-letter-${l + 1}`}\n//               className={`letter${\n//                 l + 1 <= enteredWordLength\n//                   ? currentWord.word[l] == enteredWord[l]\n//                     ? \" correct\"\n//                     : \" wrong\"\n//                   : l == enteredWordLength\n//                   ? \" current-letter\"\n//                   : \"\"\n//               }`}\n//             >\n//               {currentWord.word[l]}\n//             </span>\n//           );\n//         }\n//       } else {\n//         for (let l = 0; l < enteredWordLength; l++) {\n//           letterArray.push(\n//             <span\n//               key={`word-${currentWord.key}-letter-${l + 1}`}\n//               id={`word-${currentWord.key}-letter-${l + 1}`}\n//               className={`letter${\n//                 l + 1 <= enteredWordLength\n//                   ? currentWord.word[l] == enteredWord[l]\n//                     ? \" correct\"\n//                     : \" wrong\"\n//                   : l == enteredWordLength\n//                   ? \" current-letter\"\n//                   : \"\"\n//               }`}\n//             >\n//               {l + 1 < currentWordLength ? currentWord.word[l] : enteredWord[l]}\n//             </span>\n//           );\n//         }\n//       }\n//       updatedWord = (\n//         <span className={\"test-words\"} id={currentWord.id} key={currentWord.id}>\n//           {letterArray}\n//         </span>\n//       );\n//       return updatedWord;\n//     case \"FINISHED_WORD\":\n//       switch (wordState) {\n//         case \"CORRECT\":\n//           for (let l = 0; l < currentWordLength; l++) {\n//             letterArray.push(\n//               <span\n//                 key={`word-${currentWord.key}-letter-${l + 1}`}\n//                 id={`word-${currentWord.key}-letter-${l + 1}`}\n//                 className=\"letter\"\n//               >\n//                 {currentWord.word[l]}\n//               </span>\n//             );\n//           }\n//           updatedWord = (\n//             <span\n//               className={\"test-words correct\"}\n//               id={currentWord.id}\n//               key={currentWord.id}\n//             >\n//               {letterArray}\n//             </span>\n//           );\n//           return updatedWord;\n//         case \"WRONG\":\n//           let loopCount =\n//             currentWordLength >= enteredWord.length\n//               ? currentWordLength\n//               : enteredWord.length;\n//           for (let l = 0; l < loopCount; l++) {\n//             letterArray.push(\n//               <span\n//                 key={`word-${currentWord.key}-letter-${l + 1}`}\n//                 id={`word-${currentWord.key}-letter-${l + 1}`}\n//                 className={`letter ${\n//                   currentWord.word[l] == enteredWord[l] ? \"yellow\" : \"wrong\"\n//                 }`}\n//               >\n//                 {l + 1 <= currentWordLength\n//                   ? currentWord.word[l]\n//                   : enteredWord[l]}\n//               </span>\n//             );\n//           }\n//           updatedWord = (\n//             <span\n//               className={\"test-words\"}\n//               id={currentWord.id}\n//               key={currentWord.id}\n//             >\n//               {letterArray}\n//             </span>\n//           );\n//           return updatedWord;\n//         default:\n//           return updatedWord;\n//       }\n//   }\n// }","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/testWords.js"],"names":["words","reducer","state","action","type","testWordsLoader","updateCurrentWord","payload","currentWord","enteredWord","skipCurrentWord","skipTo","j","wordList","prevRanNum","i","r","Math","floor","random","length","word","letterArray","l","push","prevTestWords","updatedWordList","currentWordIndex","updatedWord","wordElementUpdater","classValues","enteredWordLength","currentWordLength","index","key","correct","wrong","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,4BAAlB;;;AAEA,MAAMC,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAOC,eAAe,EAAtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAK,qBAAL;AACE,aAAOC,iBAAiB,CACtBJ,KADsB,EAEtBC,MAAM,CAACI,OAAP,CAAeC,WAFO,EAGtBL,MAAM,CAACI,OAAP,CAAeE,WAHO,CAAxB;;AAKF,SAAK,mBAAL;AACE,aAAOC,eAAe,CACpBR,KADoB,EAEpBC,MAAM,CAACI,OAAP,CAAeC,WAFK,EAGpBL,MAAM,CAACI,OAAP,CAAeE,WAHK,EAIpBN,MAAM,CAACI,OAAP,CAAeI,MAJK,CAAtB;;AAMF;AACE,aAAOT,KAAP;AA/BJ;AAiCD,CAlCD;;AAoCA,eAAeD,OAAf;;AAEA,SAASI,eAAT,GAA2B;AACzB,MAAIO,CAAC,GAAG,GAAR;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAC1B,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBnB,KAAK,CAACoB,MAAjC,CAAR;;AACA,QAAIJ,CAAC,IAAIF,UAAT,EAAqB;AACnBE,MAAAA,CAAC;AACF;;AACDF,IAAAA,UAAU,GAAGE,CAAb;AACA,UAAMK,IAAI,GAAGrB,KAAK,CAACgB,CAAD,CAAlB;AACA,QAAIM,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACD,MAAzB,EAAiCG,CAAC,EAAlC,EAAsC;AACpCD,MAAAA,WAAW,CAACE,IAAZ,eACE;AAEE,QAAA,EAAE,EAAG,QAAOT,CAAC,GAAG,CAAE,WAAUQ,CAAC,GAAG,CAAE,EAFpC;AAGE,QAAA,SAAS,EAAG,SAAQR,CAAC,IAAI,CAAL,IAAUQ,CAAC,IAAI,CAAf,GAAmB,iBAAnB,GAAuC,EAAG,EAHhE;AAAA,kBAKGF,IAAI,CAACE,CAAD;AALP,SACQ,QAAOR,CAAC,GAAG,CAAE,WAAUQ,CAAC,GAAG,CAAE,EADrC;AAAA;AAAA;AAAA;AAAA,cADF;AASD;;AACDV,IAAAA,QAAQ,CAACW,IAAT,eACE;AACE,MAAA,SAAS,EAAG,aAAYT,CAAC,IAAI,CAAL,GAAS,eAAT,GAA2B,EAAG,EADxD;AAEE,MAAA,EAAE,EAAG,QAAOA,CAAC,GAAG,CAAE,EAFpB;AAAA,gBAKGO;AALH,OAGQ,QAAOP,CAAC,GAAG,CAAE,EAHrB;AAAA;AAAA;AAAA;AAAA,YADF;AASAF,IAAAA,QAAQ,CAACW,IAAT,CAAc,GAAd;AACD;;AACD,SAAOX,QAAP;AACD;;AAED,SAASP,iBAAT,CAA2BmB,aAA3B,EAA0CjB,WAA1C,EAAuDC,WAAvD,EAAoE;AAClE,MAAIiB,eAAe,GAAG,EAAtB;AAEAA,EAAAA,eAAe,GAAG,CAAC,GAAGD,aAAJ,CAAlB;AACAC,EAAAA,eAAe,CAACC,gBAAD,CAAf,GAAoCC,WAApC;AACA,SAAOF,eAAP;AACD;;AAED,SAAShB,eAAT,CAAyBe,aAAzB,EAAuCjB,WAAvC,EAAmDC,WAAnD,EAA+DE,MAA/D,EAAsE;AACpE,UAAQA,MAAR;AACE,SAAK,SAAL;AAEA;AACE;AAJJ;AAMD;;AAED,SAASkB,kBAAT,CAA4BrB,WAA5B,EAAyCC,WAAzC,EAAsDqB,WAAtD,EAAkE;AAChE,MAAIC,iBAAiB,GAAGtB,WAAW,CAACY,IAAZ,CAAiBD,MAAzC;AACA,MAAIY,iBAAiB,GAAGxB,WAAW,CAACa,IAAZ,CAAiBD,MAAzC;AACA,MAAIO,gBAAgB,GAAGnB,WAAW,CAACyB,KAAnC;AAEA,MAAIX,WAAW,GAAG,EAAlB;AACA,MAAIM,WAAJ;;AAEA,MAAII,iBAAiB,IAAID,iBAAzB,EAA4C;AAC1C,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,iBAApB,EAAuCT,CAAC,EAAxC,EAA4C;AAC1CD,MAAAA,WAAW,CAACE,IAAZ,eACE;AAEE,QAAA,EAAE,EAAG,QAAOhB,WAAW,CAAC0B,GAAI,WAAUX,CAAC,GAAG,CAAE,EAF9C;AAGE,QAAA,SAAS,EAAG,UACVA,CAAC,GAAG,CAAJ,IAASQ,iBAAT,GACIvB,WAAW,CAACa,IAAZ,CAAiBE,CAAjB,KAAuBd,WAAW,CAACY,IAAZ,CAAiBE,CAAjB,CAAvB,GACEO,WAAW,CAACK,OADd,GAEEL,WAAW,CAACM,KAHlB,GAIIb,CAAC,IAAIQ,iBAAL,GACA,iBADA,GAEA,EACL,EAXH;AAAA,kBAaGvB,WAAW,CAACa,IAAZ,CAAiBE,CAAjB;AAbH,SACQ,QAAOf,WAAW,CAAC0B,GAAI,WAAUX,CAAC,GAAG,CAAE,EAD/C;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD;AACF,GApBD,MAoBO;AACL,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,iBAApB,EAAuCR,CAAC,EAAxC,EAA4C;AAC1CD,MAAAA,WAAW,CAACE,IAAZ,eACE;AAEE,QAAA,EAAE,EAAG,QAAOhB,WAAW,CAAC0B,GAAI,WAAUX,CAAC,GAAG,CAAE,EAF9C;AAGE,QAAA,SAAS,EAAG,UACVA,CAAC,GAAG,CAAJ,IAASQ,iBAAT,GACIvB,WAAW,CAACa,IAAZ,CAAiBE,CAAjB,KAAuBd,WAAW,CAACY,IAAZ,CAAiBE,CAAjB,CAAvB,GACAO,WAAW,CAACK,OADZ,GAEAL,WAAW,CAACM,KAHhB,GAIIb,CAAC,IAAIQ,iBAAL,GACA,iBADA,GAEA,EACL,EAXH;AAAA,kBAaGR,CAAC,GAAG,CAAJ,GAAQS,iBAAR,GAA4BxB,WAAW,CAACa,IAAZ,CAAiBE,CAAjB,CAA5B,GAAkDd,WAAW,CAACc,CAAD;AAbhE,SACQ,QAAOf,WAAW,CAAC0B,GAAI,WAAUX,CAAC,GAAG,CAAE,EAD/C;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD;AACF;;AACDK,EAAAA,WAAW,gBACT;AAAM,IAAA,SAAS,EAAE,YAAjB;AAA+B,IAAA,EAAE,EAAEpB,WAAW,CAAC6B,EAA/C;AAAA,cACGf;AADH,KAAwDd,WAAW,CAAC6B,EAApE;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import words from \"../../components/wordsData\";\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"NEW_WORDS\":\r\n      return testWordsLoader();\r\n    // case \"EVALUATE_WORDS\":\r\n    //   return testWordsEvaluate(\r\n    //     state,\r\n    //     action.payload.currentWord,\r\n    //     action.payload.enteredWord,\r\n    //     action.payload.inputType\r\n    //   );\r\n    // case \"UPDATE_CURRENT_WORD\":\r\n    //   return updateCurrentWord(\r\n    //     state,\r\n    //     action.payload.direction,\r\n    //     action.payload.currentWord,\r\n    //     action.payload.enteredWord\r\n    //   );\r\n    case \"UPDATE_CURRENT_WORD\":\r\n      return updateCurrentWord(\r\n        state,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord\r\n      );\r\n    case \"SKIP_CURRENT_WORD\":\r\n      return skipCurrentWord(\r\n        state,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord,\r\n        action.payload.skipTo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction testWordsLoader() {\r\n  let j = 500;\r\n  let wordList = [];\r\n  let prevRanNum = 0;\r\n  for (let i = 0; i < j; i++) {\r\n    var r = Math.floor(Math.random() * words.length);\r\n    if (r == prevRanNum) {\r\n      r++;\r\n    }\r\n    prevRanNum = r;\r\n    const word = words[r];\r\n    let letterArray = [];\r\n    for (let l = 0; l < word.length; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${i + 1}-letter-${l + 1}`}\r\n          id={`word-${i + 1}-letter-${l + 1}`}\r\n          className={`letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`}\r\n        >\r\n          {word[l]}\r\n        </span>\r\n      );\r\n    }\r\n    wordList.push(\r\n      <span\r\n        className={`test-words${i == 0 ? \" current-word\" : \"\"}`}\r\n        id={`word-${i + 1}`}\r\n        key={`word-${i + 1}`}\r\n      >\r\n        {letterArray}\r\n      </span>\r\n    );\r\n    wordList.push(\" \");\r\n  }\r\n  return wordList;\r\n}\r\n\r\nfunction updateCurrentWord(prevTestWords, currentWord, enteredWord) {\r\n  let updatedWordList = [];\r\n\r\n  updatedWordList = [...prevTestWords];\r\n  updatedWordList[currentWordIndex] = updatedWord;\r\n  return updatedWordList;\r\n}\r\n\r\nfunction skipCurrentWord(prevTestWords,currentWord,enteredWord,skipTo){\r\n  switch (skipTo) {\r\n    case \"FORWARD\":\r\n        \r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nfunction wordElementUpdater(currentWord, enteredWord, classValues){\r\n  let enteredWordLength = enteredWord.word.length;\r\n  let currentWordLength = currentWord.word.length;\r\n  let currentWordIndex = currentWord.index;\r\n\r\n  let letterArray = [];\r\n  let updatedWord;\r\n\r\n  if (currentWordLength >= enteredWordLength) {\r\n    for (let l = 0; l < currentWordLength; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${currentWord.key}-letter-${l + 1}`}\r\n          id={`word-${currentWord.key}-letter-${l + 1}`}\r\n          className={`letter ${\r\n            l + 1 <= enteredWordLength\r\n              ? currentWord.word[l] == enteredWord.word[l]\r\n                ? classValues.correct\r\n                : classValues.wrong\r\n              : l == enteredWordLength\r\n              ? \" current-letter\"\r\n              : \"\"\r\n          }`}\r\n        >\r\n          {currentWord.word[l]}\r\n        </span>\r\n      );\r\n    }\r\n  } else {\r\n    for (let l = 0; l < enteredWordLength; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${currentWord.key}-letter-${l + 1}`}\r\n          id={`word-${currentWord.key}-letter-${l + 1}`}\r\n          className={`letter ${\r\n            l + 1 <= enteredWordLength\r\n              ? currentWord.word[l] == enteredWord.word[l]\r\n              ? classValues.correct\r\n              : classValues.wrong\r\n              : l == enteredWordLength\r\n              ? \" current-letter\"\r\n              : \"\"\r\n          }`}\r\n        >\r\n          {l + 1 < currentWordLength ? currentWord.word[l] : enteredWord[l]}\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n  updatedWord = (\r\n    <span className={\"test-words\"} id={currentWord.id} key={currentWord.id}>\r\n      {letterArray}\r\n    </span>\r\n  );\r\n}\r\n\r\n// function testWordsEvaluate(prevTestWords, currentWord, enteredWord, inputType) {\r\n//   let enteredWordLength = enteredWord.length;\r\n//   let currentWordLength = currentWord.word.length;\r\n//   let currentWordSliced = currentWord.word.slice(0, enteredWordLength);\r\n//   let currentWordIndex = currentWord.index;\r\n//   let updatedWord;\r\n//   let updatedWordList;\r\n//   if (enteredWordLength <= currentWordLength) {\r\n//     if (enteredWord != currentWordSliced) {\r\n//       if (enteredWord != \"\") {\r\n//         updatedWord = wordElementUpdater(\r\n//           currentWord,\r\n//           currentWordLength,\r\n//           enteredWord,\r\n//           \"WRONG_WARNING\",\r\n//           inputType\r\n//         );\r\n//       } else {\r\n//         updatedWord = wordElementUpdater(\r\n//           currentWord,\r\n//           currentWordLength,\r\n//           enteredWord,\r\n//           \"EMPTY\",\r\n//           inputType\r\n//         );\r\n//       }\r\n//     } else if (enteredWord == currentWordSliced) {\r\n//       if (enteredWordLength < currentWordLength) {\r\n//         if (enteredWord != \"\") {\r\n//           updatedWord = wordElementUpdater(\r\n//             currentWord,\r\n//             currentWordLength,\r\n//             enteredWord,\r\n//             \"CORRECT\",\r\n//             inputType\r\n//           );\r\n//         } else {\r\n//           updatedWord = wordElementUpdater(\r\n//             currentWord,\r\n//             currentWordLength,\r\n//             enteredWord,\r\n//             \"EMPTY\",\r\n//             inputType\r\n//           );\r\n//         }\r\n//       } else if (enteredWordLength == currentWordLength) {\r\n//         updatedWord = wordElementUpdater(\r\n//           currentWord,\r\n//           currentWordLength,\r\n//           enteredWord,\r\n//           \"COMPLETED_WARNING\",\r\n//           inputType\r\n//         );\r\n//       }\r\n//     }\r\n//   } else if (enteredWordLength > currentWordLength) {\r\n//     updatedWord = wordElementUpdater(\r\n//       currentWord,\r\n//       currentWordLength,\r\n//       enteredWord,\r\n//       \"WRONG_WARNING\",\r\n//       inputType\r\n//     );\r\n//   }\r\n//   if (updatedWord) {\r\n//     updatedWordList = [...prevTestWords];\r\n//     updatedWordList[currentWordIndex] = updatedWord;\r\n//     return updatedWordList;\r\n//   } else {\r\n//     return prevTestWords;\r\n//   }\r\n// }\r\n\r\n// function updateCurrentWord(prevTestWords, direction, currentWord, enteredWord) {\r\n//   let currentWordIndex = currentWord.index;\r\n//   let currentWordLength = currentWord.word.length;\r\n\r\n//   let updatedWord;\r\n\r\n//   if (enteredWord == currentWord.word) {\r\n//     updatedWord = wordElementUpdater(\r\n//       currentWord,\r\n//       currentWordLength,\r\n//       enteredWord,\r\n//       \"CORRECT\",\r\n//       \"FINISHED_WORD\"\r\n//     );\r\n//   } else {\r\n//     updatedWord = wordElementUpdater(\r\n//       currentWord,\r\n//       currentWordLength,\r\n//       enteredWord,\r\n//       \"WRONG\",\r\n//       \"FINISHED_WORD\"\r\n//     );\r\n//   }\r\n\r\n//   let updatedWordList = [...prevTestWords];\r\n//   updatedWordList[currentWordIndex] = updatedWord;\r\n//   return updatedWordList;\r\n// }\r\n\r\n// function wordElementUpdater(\r\n//   currentWord,\r\n//   currentWordLength,\r\n//   enteredWord,\r\n//   wordState,\r\n//   inputType\r\n// ) {\r\n//   let letterArray = [];\r\n//   let updatedWord;\r\n//   switch (inputType) {\r\n//     case \"FLOAT\":\r\n//       for (let l = 0; l < currentWordLength; l++) {\r\n//         letterArray.push(\r\n//           <span\r\n//             key={`word-${currentWord.key}-letter-${l + 1}`}\r\n//             id={`word-${currentWord.key}-letter-${l + 1}`}\r\n//             className=\"letter\"\r\n//           >\r\n//             {currentWord.word[l]}\r\n//           </span>\r\n//         );\r\n//       }\r\n//       switch (wordState) {\r\n//         case \"WRONG_WARNING\":\r\n//           updatedWord = (\r\n//             <span\r\n//               className={\"test-words current-word wrong-warning\"}\r\n//               id={currentWord.id}\r\n//               key={currentWord.id}\r\n//             >\r\n//               {letterArray}\r\n//             </span>\r\n//           );\r\n//           return updatedWord;\r\n//         case \"COMPLETED_WARNING\":\r\n//           updatedWord = (\r\n//             <span\r\n//               className={\"test-words current-word completed-warning\"}\r\n//               id={currentWord.id}\r\n//               key={currentWord.id}\r\n//             >\r\n//               {letterArray}\r\n//             </span>\r\n//           );\r\n//           return updatedWord;\r\n//         case \"CORRECT\":\r\n//           updatedWord = (\r\n//             <span\r\n//               className={\"test-words current-word\"}\r\n//               id={currentWord.id}\r\n//               key={currentWord.id}\r\n//             >\r\n//               {letterArray}\r\n//             </span>\r\n//           );\r\n//           return updatedWord;\r\n//         case \"EMPTY\":\r\n//           updatedWord = (\r\n//             <span\r\n//               className={\"test-words current-word current-word-blinker\"}\r\n//               id={currentWord.id}\r\n//               key={currentWord.id}\r\n//             >\r\n//               {letterArray}\r\n//             </span>\r\n//           );\r\n//           return updatedWord;\r\n//         default:\r\n//           return updatedWord;\r\n//       }\r\n//     case \"INLINE\":\r\n//       let enteredWordLength = enteredWord.length;\r\n//       if (currentWordLength >= enteredWordLength) {\r\n//         for (let l = 0; l < currentWordLength; l++) {\r\n//           letterArray.push(\r\n//             <span\r\n//               key={`word-${currentWord.key}-letter-${l + 1}`}\r\n//               id={`word-${currentWord.key}-letter-${l + 1}`}\r\n//               className={`letter${\r\n//                 l + 1 <= enteredWordLength\r\n//                   ? currentWord.word[l] == enteredWord[l]\r\n//                     ? \" correct\"\r\n//                     : \" wrong\"\r\n//                   : l == enteredWordLength\r\n//                   ? \" current-letter\"\r\n//                   : \"\"\r\n//               }`}\r\n//             >\r\n//               {currentWord.word[l]}\r\n//             </span>\r\n//           );\r\n//         }\r\n//       } else {\r\n//         for (let l = 0; l < enteredWordLength; l++) {\r\n//           letterArray.push(\r\n//             <span\r\n//               key={`word-${currentWord.key}-letter-${l + 1}`}\r\n//               id={`word-${currentWord.key}-letter-${l + 1}`}\r\n//               className={`letter${\r\n//                 l + 1 <= enteredWordLength\r\n//                   ? currentWord.word[l] == enteredWord[l]\r\n//                     ? \" correct\"\r\n//                     : \" wrong\"\r\n//                   : l == enteredWordLength\r\n//                   ? \" current-letter\"\r\n//                   : \"\"\r\n//               }`}\r\n//             >\r\n//               {l + 1 < currentWordLength ? currentWord.word[l] : enteredWord[l]}\r\n//             </span>\r\n//           );\r\n//         }\r\n//       }\r\n//       updatedWord = (\r\n//         <span className={\"test-words\"} id={currentWord.id} key={currentWord.id}>\r\n//           {letterArray}\r\n//         </span>\r\n//       );\r\n//       return updatedWord;\r\n//     case \"FINISHED_WORD\":\r\n//       switch (wordState) {\r\n//         case \"CORRECT\":\r\n//           for (let l = 0; l < currentWordLength; l++) {\r\n//             letterArray.push(\r\n//               <span\r\n//                 key={`word-${currentWord.key}-letter-${l + 1}`}\r\n//                 id={`word-${currentWord.key}-letter-${l + 1}`}\r\n//                 className=\"letter\"\r\n//               >\r\n//                 {currentWord.word[l]}\r\n//               </span>\r\n//             );\r\n//           }\r\n//           updatedWord = (\r\n//             <span\r\n//               className={\"test-words correct\"}\r\n//               id={currentWord.id}\r\n//               key={currentWord.id}\r\n//             >\r\n//               {letterArray}\r\n//             </span>\r\n//           );\r\n//           return updatedWord;\r\n//         case \"WRONG\":\r\n//           let loopCount =\r\n//             currentWordLength >= enteredWord.length\r\n//               ? currentWordLength\r\n//               : enteredWord.length;\r\n//           for (let l = 0; l < loopCount; l++) {\r\n//             letterArray.push(\r\n//               <span\r\n//                 key={`word-${currentWord.key}-letter-${l + 1}`}\r\n//                 id={`word-${currentWord.key}-letter-${l + 1}`}\r\n//                 className={`letter ${\r\n//                   currentWord.word[l] == enteredWord[l] ? \"yellow\" : \"wrong\"\r\n//                 }`}\r\n//               >\r\n//                 {l + 1 <= currentWordLength\r\n//                   ? currentWord.word[l]\r\n//                   : enteredWord[l]}\r\n//               </span>\r\n//             );\r\n//           }\r\n//           updatedWord = (\r\n//             <span\r\n//               className={\"test-words\"}\r\n//               id={currentWord.id}\r\n//               key={currentWord.id}\r\n//             >\r\n//               {letterArray}\r\n//             </span>\r\n//           );\r\n//           return updatedWord;\r\n//         default:\r\n//           return updatedWord;\r\n//       }\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}