{"ast":null,"code":"import { current } from \"@reduxjs/toolkit\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"UPDATE_INPUT_LOG\":\n      return inputLogUpdater(action.payload.enteredWord, action.payload.currentWord, state);\n\n    case \"RESET_INPUT_LOG\":\n      return {};\n\n    default:\n      return state;\n  }\n};\n\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\n  let updatedInputLog = [];\n\n  if (currentWord.key > prevInputLog.length) {\n    updatedInputLog = prevInputLog.log;\n    updatedInputLog[currentWord.index] = enteredWord;\n  } else {\n    updatedInputLog = prevInputLog;\n    updatedInputLog.splice(currentWord.index, 1);\n  }\n\n  const wrongWords = updatedInputLog.filter(prevLog => prevLog.isWrong); // console.log(newInputLog);\n\n  updatedInputLog = {\n    log: updatedInputLog,\n    wrongWords: wrongWords.lenght\n  };\n  return updatedInputLog;\n}\n\nexport default reducer;","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/inputLog.js"],"names":["current","reducer","state","action","type","inputLogUpdater","payload","enteredWord","currentWord","prevInputLog","updatedInputLog","key","length","log","index","splice","wrongWords","filter","prevLog","isWrong","lenght"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAOC,eAAe,CACpBF,MAAM,CAACG,OAAP,CAAeC,WADK,EAEpBJ,MAAM,CAACG,OAAP,CAAeE,WAFK,EAGpBN,KAHoB,CAAtB;;AAKF,SAAK,iBAAL;AACE,aAAO,EAAP;;AACF;AACE,aAAOA,KAAP;AAVJ;AAYD,CAbD;;AAeA,SAASG,eAAT,CAAyBE,WAAzB,EAAsCC,WAAtC,EAAmDC,YAAnD,EAAiE;AAC/D,MAAIC,eAAe,GAAG,EAAtB;;AACA,MAAIF,WAAW,CAACG,GAAZ,GAAkBF,YAAY,CAACG,MAAnC,EAA2C;AACzCF,IAAAA,eAAe,GAAGD,YAAY,CAACI,GAA/B;AACAH,IAAAA,eAAe,CAACF,WAAW,CAACM,KAAb,CAAf,GAAqCP,WAArC;AACD,GAHD,MAGO;AACLG,IAAAA,eAAe,GAAGD,YAAlB;AACAC,IAAAA,eAAe,CAACK,MAAhB,CAAuBP,WAAW,CAACM,KAAnC,EAA0C,CAA1C;AACD;;AACD,QAAME,UAAU,GAAGN,eAAe,CAACO,MAAhB,CAAwBC,OAAD,IAAaA,OAAO,CAACC,OAA5C,CAAnB,CAT+D,CAU/D;;AACAT,EAAAA,eAAe,GAAG;AAAEG,IAAAA,GAAG,EAAEH,eAAP;AAAwBM,IAAAA,UAAU,EAAEA,UAAU,CAACI;AAA/C,GAAlB;AACA,SAAOV,eAAP;AACD;;AAED,eAAeT,OAAf","sourcesContent":["import { current } from \"@reduxjs/toolkit\";\r\n\r\nconst reducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_INPUT_LOG\":\r\n      return inputLogUpdater(\r\n        action.payload.enteredWord,\r\n        action.payload.currentWord,\r\n        state\r\n      );\r\n    case \"RESET_INPUT_LOG\":\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\r\n  let updatedInputLog = [];\r\n  if (currentWord.key > prevInputLog.length) {\r\n    updatedInputLog = prevInputLog.log;\r\n    updatedInputLog[currentWord.index] = enteredWord;\r\n  } else {\r\n    updatedInputLog = prevInputLog;\r\n    updatedInputLog.splice(currentWord.index, 1);\r\n  }\r\n  const wrongWords = updatedInputLog.filter((prevLog) => prevLog.isWrong);\r\n  // console.log(newInputLog);\r\n  updatedInputLog = { log: updatedInputLog, wrongWords: wrongWords.lenght };\r\n  return updatedInputLog;\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}