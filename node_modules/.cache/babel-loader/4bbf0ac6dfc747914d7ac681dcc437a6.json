{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\state\\\\reducers\\\\testWords.js\";\nimport words from \"../../components/wordsData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"NEW_WORDS\":\n      return testWordsLoader();\n\n    case \"UPDATE_CURRENT_WORD\":\n      return updateCurrentWord(state, action.payload.currentWord, action.payload.enteredWord, action.payload.isFinalUpdate);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nfunction testWordsLoader() {\n  let j = 500;\n  let wordList = [];\n  let prevRanNum = 0;\n\n  for (let i = 0; i < j; i++) {\n    var r = Math.floor(Math.random() * words.length);\n\n    if (r == prevRanNum) {\n      r++;\n    }\n\n    prevRanNum = r;\n    const word = words[r];\n    let letterArray = [];\n\n    for (let l = 0; l < word.length; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${i + 1}-letter-${l + 1}`,\n        className: `letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`,\n        children: word[l]\n      }, `word-${i + 1}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this));\n    }\n\n    wordList.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `test-words${i == 0 ? \" current-word\" : \"\"}`,\n      id: `word-${i + 1}`,\n      children: letterArray\n    }, `word-${i + 1}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this));\n    wordList.push(\" \");\n  }\n\n  return wordList;\n}\n\nfunction updateCurrentWord(prevTestWords, currentWord, enteredWord) {\n  let updatedWordList = [];\n  let currentWordIndex = currentWord.index;\n  let updatedWord = wordElementUpdater(currentWord, enteredWord);\n  updatedWordList = [...prevTestWords];\n  updatedWordList[currentWordIndex] = updatedWord;\n  return updatedWordList;\n}\n\nfunction skipCurrentWord(prevTestWords, currentWord, enteredWord, skipTo) {\n  let updatedWordList = [];\n  let currentWordIndex = currentWord.index;\n\n  switch (skipTo) {\n    case \"FORWARD\":\n      let updatedWord = wordElementUpdater(currentWord, enteredWord);\n      updatedWordList = [...prevTestWords];\n      updatedWordList[currentWordIndex] = updatedWord;\n      return updatedWordList;\n\n    default:\n      break;\n  }\n}\n\nfunction wordElementUpdater(currentWord, enteredWord) {\n  return updatedWord;\n}","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/testWords.js"],"names":["words","reducer","state","action","type","testWordsLoader","updateCurrentWord","payload","currentWord","enteredWord","isFinalUpdate","j","wordList","prevRanNum","i","r","Math","floor","random","length","word","letterArray","l","push","prevTestWords","updatedWordList","currentWordIndex","index","updatedWord","wordElementUpdater","skipCurrentWord","skipTo"],"mappings":"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","sourcesContent":["import words from \"../../components/wordsData\";\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"NEW_WORDS\":\r\n      return testWordsLoader();\r\n    case \"UPDATE_CURRENT_WORD\":\r\n      return updateCurrentWord(\r\n        state,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord,\r\n        action.payload.isFinalUpdate\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction testWordsLoader() {\r\n  let j = 500;\r\n  let wordList = [];\r\n  let prevRanNum = 0;\r\n  for (let i = 0; i < j; i++) {\r\n    var r = Math.floor(Math.random() * words.length);\r\n    if (r == prevRanNum) {\r\n      r++;\r\n    }\r\n    prevRanNum = r;\r\n    const word = words[r];\r\n    let letterArray = [];\r\n    for (let l = 0; l < word.length; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${i + 1}-letter-${l + 1}`}\r\n          id={`word-${i + 1}-letter-${l + 1}`}\r\n          className={`letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`}\r\n        >\r\n          {word[l]}\r\n        </span>\r\n      );\r\n    }\r\n    wordList.push(\r\n      <span\r\n        className={`test-words${i == 0 ? \" current-word\" : \"\"}`}\r\n        id={`word-${i + 1}`}\r\n        key={`word-${i + 1}`}\r\n      >\r\n        {letterArray}\r\n      </span>\r\n    );\r\n    wordList.push(\" \");\r\n  }\r\n  return wordList;\r\n}\r\n\r\nfunction updateCurrentWord(prevTestWords, currentWord, enteredWord) {\r\n  let updatedWordList = [];\r\n  let currentWordIndex = currentWord.index;\r\n\r\n  let updatedWord = wordElementUpdater(currentWord, enteredWord);\r\n\r\n  updatedWordList = [...prevTestWords];\r\n  updatedWordList[currentWordIndex] = updatedWord;\r\n  return updatedWordList;\r\n}\r\n\r\nfunction skipCurrentWord(prevTestWords, currentWord, enteredWord, skipTo) {\r\n  let updatedWordList = [];\r\n  let currentWordIndex = currentWord.index;\r\n  switch (skipTo) {\r\n    case \"FORWARD\":\r\n      let updatedWord = wordElementUpdater(currentWord, enteredWord);\r\n\r\n      updatedWordList = [...prevTestWords];\r\n      updatedWordList[currentWordIndex] = updatedWord;\r\n      return updatedWordList;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nfunction wordElementUpdater(currentWord, enteredWord) {\r\n  \r\n  return updatedWord;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}