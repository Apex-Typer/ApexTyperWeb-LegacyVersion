{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\state\\\\reducers\\\\testWords.js\";\nimport words from \"../../components/wordsData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    forHtml: [],\n    rawWords: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"NEW_WORDS\":\n      return testWordsLoader();\n\n    case \"UPDATE_CURRENT_WORD\":\n      return updateCurrentWord(state, action.payload.currentWord, action.payload.enteredWord, action.payload.blinkCurrentLetter, action.payload.wordChanged);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nfunction testWordsLoader() {\n  let j = 500;\n  let wordsArrayHtml = [];\n  let wordsArray = [];\n  let prevRanNum = 0;\n\n  for (let i = 0; i < j; i++) {\n    var r = Math.floor(Math.random() * words.length);\n\n    if (r == prevRanNum) {\n      r++;\n    }\n\n    prevRanNum = r;\n    const word = words[r];\n    let letterArray = [];\n\n    for (let l = 0; l < word.length; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${i + 1}-letter-${l + 1}`,\n        className: `letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`,\n        children: word[l]\n      }, `word-${i + 1}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this));\n    }\n\n    wordsArrayHtml.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `test-words${i == 0 ? \" current-word\" : \"\"}`,\n      id: `word-${i + 1}`,\n      children: letterArray\n    }, `word-${i + 1}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this));\n    wordsArrayHtml.push(\" \");\n    wordsArray.push(word);\n    console.log(wordsArray);\n  }\n\n  return {\n    forHtml: wordsArrayHtml,\n    raw\n  };\n}\n\nfunction updateCurrentWord(prevTestWords, currentWord, enteredWord, blinkCurrentLetter, wordChanged) {\n  let updatedWordList = [];\n  let currentWordIndex = currentWord.index;\n  let enteredWordLength = enteredWord.word.length;\n  let currentWordLength = currentWord.word.length;\n  let letterArray = [];\n  let updatedWord;\n\n  if (currentWordLength >= enteredWordLength) {\n    for (let l = 0; l < currentWordLength; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${currentWord.key}-letter-${l + 1}`,\n        className: `letter ${classAssigner(currentWord.word[l], enteredWord.word[l], currentWordLength, enteredWordLength, l, enteredWord.isWrong, blinkCurrentLetter, wordChanged, enteredWord.word == \"\")}`,\n        children: currentWord.word[l]\n      }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this));\n    }\n  } else {\n    for (let l = 0; l < enteredWordLength; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${currentWord.key}-letter-${l + 1}`,\n        className: `letter ${l + 1 <= enteredWordLength ? currentWord.word[l] == enteredWord.word[l] ? enteredWord.isWrong ? \"custom-dark-yellow\" : \"custom-dark-cyan\" : \"custom-dark-red\" : \"\"}`,\n        children: l + 1 < currentWordLength ? currentWord.word[l] : enteredWord.word[l]\n      }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"test-words\",\n    id: currentWord.id,\n    children: letterArray\n  }, currentWord.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n  updatedWordList = [...prevTestWords];\n  updatedWordList[currentWordIndex] = updatedWord;\n  return updatedWordList;\n}\n\nfunction classAssigner(currentLetter, enteredLetter, currentWordLength, enteredWordLength, currentLetterIndex, enteredWordIsWrong, blinkCurrentLetter, wordChanged, enteredWordIsEmpty) {\n  let classVal = \"letter \";\n\n  if (enteredWordLength >= currentLetterIndex + 1) {\n    if (currentLetter == enteredLetter) {\n      if (enteredWordIsWrong || wordChanged && enteredWordLength < currentWordLength) {\n        classVal += \"custom-dark-yellow\";\n      } else {\n        classVal += \"custom-dark-cyan\";\n      }\n    } else {\n      classVal += \"custom-dark-red\";\n    }\n  } else if (enteredWordLength == currentLetterIndex && blinkCurrentLetter) {\n    classVal += \"current-letter\";\n  } else if (wordChanged && !enteredWordIsEmpty) {\n    classVal += \"custom-dark-grey\";\n  }\n\n  return classVal;\n}","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/testWords.js"],"names":["words","reducer","state","forHtml","rawWords","action","type","testWordsLoader","updateCurrentWord","payload","currentWord","enteredWord","blinkCurrentLetter","wordChanged","j","wordsArrayHtml","wordsArray","prevRanNum","i","r","Math","floor","random","length","word","letterArray","l","push","console","log","raw","prevTestWords","updatedWordList","currentWordIndex","index","enteredWordLength","currentWordLength","updatedWord","key","classAssigner","isWrong","id","currentLetter","enteredLetter","currentLetterIndex","enteredWordIsWrong","enteredWordIsEmpty","classVal"],"mappings":"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","sourcesContent":["import words from \"../../components/wordsData\";\r\n\r\nconst reducer = (state = { forHtml: [], rawWords: [] }, action) => {\r\n  switch (action.type) {\r\n    case \"NEW_WORDS\":\r\n      return testWordsLoader();\r\n    case \"UPDATE_CURRENT_WORD\":\r\n      return updateCurrentWord(\r\n        state,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord,\r\n        action.payload.blinkCurrentLetter,\r\n        action.payload.wordChanged\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction testWordsLoader() {\r\n  let j = 500;\r\n  let wordsArrayHtml = [];\r\n  let wordsArray = [];\r\n  let prevRanNum = 0;\r\n  for (let i = 0; i < j; i++) {\r\n    var r = Math.floor(Math.random() * words.length);\r\n    if (r == prevRanNum) {\r\n      r++;\r\n    }\r\n    prevRanNum = r;\r\n    const word = words[r];\r\n    let letterArray = [];\r\n    for (let l = 0; l < word.length; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${i + 1}-letter-${l + 1}`}\r\n          id={`word-${i + 1}-letter-${l + 1}`}\r\n          className={`letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`}\r\n        >\r\n          {word[l]}\r\n        </span>\r\n      );\r\n    }\r\n    wordsArrayHtml.push(\r\n      <span\r\n        className={`test-words${i == 0 ? \" current-word\" : \"\"}`}\r\n        id={`word-${i + 1}`}\r\n        key={`word-${i + 1}`}\r\n      >\r\n        {letterArray}\r\n      </span>\r\n    );\r\n    wordsArrayHtml.push(\" \");\r\n    wordsArray.push(word);\r\n    console.log(wordsArray);\r\n  }\r\n  return {forHtml:wordsArrayHtml,raw};\r\n}\r\n\r\nfunction updateCurrentWord(\r\n  prevTestWords,\r\n  currentWord,\r\n  enteredWord,\r\n  blinkCurrentLetter,\r\n  wordChanged\r\n) {\r\n  let updatedWordList = [];\r\n  let currentWordIndex = currentWord.index;\r\n\r\n  let enteredWordLength = enteredWord.word.length;\r\n  let currentWordLength = currentWord.word.length;\r\n\r\n  let letterArray = [];\r\n  let updatedWord;\r\n\r\n  if (currentWordLength >= enteredWordLength) {\r\n    for (let l = 0; l < currentWordLength; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${currentWord.key}-letter-${l + 1}`}\r\n          id={`word-${currentWord.key}-letter-${l + 1}`}\r\n          className={`letter ${classAssigner(\r\n            currentWord.word[l],\r\n            enteredWord.word[l],\r\n            currentWordLength,\r\n            enteredWordLength,\r\n            l,\r\n            enteredWord.isWrong,\r\n            blinkCurrentLetter,\r\n            wordChanged,\r\n            enteredWord.word == \"\"\r\n          )}`}\r\n        >\r\n          {currentWord.word[l]}\r\n        </span>\r\n      );\r\n    }\r\n  } else {\r\n    for (let l = 0; l < enteredWordLength; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${currentWord.key}-letter-${l + 1}`}\r\n          id={`word-${currentWord.key}-letter-${l + 1}`}\r\n          className={`letter ${\r\n            l + 1 <= enteredWordLength\r\n              ? currentWord.word[l] == enteredWord.word[l]\r\n                ? enteredWord.isWrong\r\n                  ? \"custom-dark-yellow\"\r\n                  : \"custom-dark-cyan\"\r\n                : \"custom-dark-red\"\r\n              : \"\"\r\n          }`}\r\n        >\r\n          {l + 1 < currentWordLength\r\n            ? currentWord.word[l]\r\n            : enteredWord.word[l]}\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n  updatedWord = (\r\n    <span className={\"test-words\"} id={currentWord.id} key={currentWord.id}>\r\n      {letterArray}\r\n    </span>\r\n  );\r\n\r\n  updatedWordList = [...prevTestWords];\r\n  updatedWordList[currentWordIndex] = updatedWord;\r\n  return updatedWordList;\r\n}\r\n\r\nfunction classAssigner(\r\n  currentLetter,\r\n  enteredLetter,\r\n  currentWordLength,\r\n  enteredWordLength,\r\n  currentLetterIndex,\r\n  enteredWordIsWrong,\r\n  blinkCurrentLetter,\r\n  wordChanged,\r\n  enteredWordIsEmpty\r\n) {\r\n  let classVal = \"letter \";\r\n\r\n  if (enteredWordLength >= currentLetterIndex + 1) {\r\n    if (currentLetter == enteredLetter) {\r\n      if (\r\n        enteredWordIsWrong ||\r\n        (wordChanged && enteredWordLength < currentWordLength)\r\n      ) {\r\n        classVal += \"custom-dark-yellow\";\r\n      } else {\r\n        classVal += \"custom-dark-cyan\";\r\n      }\r\n    } else {\r\n      classVal += \"custom-dark-red\";\r\n    }\r\n  } else if (enteredWordLength == currentLetterIndex && blinkCurrentLetter) {\r\n    classVal += \"current-letter\";\r\n  } else if (wordChanged && !enteredWordIsEmpty) {\r\n    classVal += \"custom-dark-grey\";\r\n  }\r\n  return classVal;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}