{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TextInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TextInput(props) {\n  _s();\n\n  const [currentWord, setCurrentWord] = useState({\n    key: 1,\n    id: \"word-1\",\n    word: \"\",\n    width: 0,\n    left: 0\n  });\n  var textInput = document.getElementById(\"textInput\");\n  useEffect(() => {\n    setCurrentWord(prevWord => ({ ...prevWord,\n      word: document.getElementById(currentWord.id).innerText,\n      width: document.getElementById(currentWord.id).offsetWidth,\n      left: document.getElementById(currentWord.id).offsetLeft - document.getElementById(currentWord.id).parentElement.offsetLeft\n    }));\n  }, []);\n\n  if (currentWord.word != \"\") {}\n\n  function currentWordBlinker() {\n    if (textInput.value == \"\" || textInput.value == \" \") {\n      document.getElementById(currentWord.id).classList.add(\"current-word-blinker\");\n    } else {\n      document.getElementById(currentWord.id).classList.remove(\"current-word-blinker\");\n    }\n  }\n\n  function wordIncrementer(e) {\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\n    textInput.value = \"\";\n    document.getElementById(currentWord.id).classList.remove(\"current-word-blinker\");\n    document.getElementById(currentWord.id).classList.remove(\"right-warning\");\n    document.getElementById(currentWord.id).classList.remove(\"wrong-warning\");\n    document.getElementById(currentWord.id).classList.remove(\"current-word\");\n\n    if (enteredValue == currentWord.word) {\n      document.getElementById(currentWord.id).classList.add(\"correct\");\n    } else {\n      document.getElementById(currentWord.id).classList.add(\"wrong\");\n    }\n\n    document.getElementById(`word-${currentWord.key + 1}`).classList.add(\"current-word\");\n    setCurrentWord(prevWord => ({\n      key: prevWord.key + 1,\n      id: `word-${prevWord.key + 1}`,\n      word: document.getElementById(`word-${prevWord.key + 1}`).innerText,\n      width: document.getElementById(`word-${prevWord.key + 1}`).offsetWidth,\n      left: document.getElementById(`word-${prevWord.key + 1}`).offsetLeft - document.getElementById(`word-${prevWord.key + 1}`).parentElement.offsetLeft\n    }));\n    currentWordBlinker();\n  }\n\n  function textInputEvaluater(e) {\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\n    wrong = false;\n    document.getElementById(currentWord.id).classList.remove(\"right-warning\");\n    document.getElementById(currentWord.id).classList.remove(\"wrong-warning\");\n\n    if (enteredValue != currentWord.word.slice(0, enteredValue.length)) {\n      document.getElementById(currentWord.id).classList.add(\"wrong-warning\");\n      wrong = true;\n    } else if (enteredValue == currentWord.word) {\n      document.getElementById(currentWord.id).classList.add(\"right-warning\");\n    }\n  }\n\n  function textInputClickHandler(e) {\n    if (e.keyCode == 32) {\n      if (e.target.value == \"\" || e.target.value == \" \") {\n        textInput.value = \"\";\n      } else {\n        wordIncrementer(e);\n      }\n    } else {\n      textInputEvaluater(e);\n      currentWordBlinker();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    width: `${currentWord.width}px`,\n    left: `${currentWord.left}px`,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"textInput\",\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      maxLength: \"15\",\n      onKeyDown: e => setTimeout(() => {\n        textInputClickHandler(e);\n      }, 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextInput, \"KH2sBSrN09OGVelMOSG3ktXbWmo=\");\n\n_c = TextInput;\nexport default TextInput;\nconst Container = styled.div`\n  width: 100%;\n  input {\n    background-color: transparent;\n    border: none;\n    border-bottom: #aaa solid 2px;\n    caret-color: #ffff;\n    font-size: 1.2em;\n    text-align: center;\n    margin: 10px 0 20px;\n    padding: 3px 3px 5px;\n    color: #ffff;\n    width: ${props => props.width};\n    transform: translateX(${props => props.left});\n    transition: all 150ms ease-in-out;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TextInput.js"],"names":["React","useState","useEffect","useRef","styled","TextInput","props","currentWord","setCurrentWord","key","id","word","width","left","textInput","document","getElementById","prevWord","innerText","offsetWidth","offsetLeft","parentElement","currentWordBlinker","value","classList","add","remove","wordIncrementer","e","enteredValue","target","replace","textInputEvaluater","wrong","slice","length","textInputClickHandler","keyCode","setTimeout","Container","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction TextInput(props) {\r\n  const [currentWord, setCurrentWord] = useState({\r\n    key: 1,\r\n    id: \"word-1\",\r\n    word: \"\",\r\n    width: 0,\r\n    left: 0,\r\n  });\r\n\r\n  var textInput = document.getElementById(\"textInput\");\r\n\r\n  useEffect(() => {\r\n    setCurrentWord((prevWord) => ({\r\n      ...prevWord,\r\n      word: document.getElementById(currentWord.id).innerText,\r\n      width: document.getElementById(currentWord.id).offsetWidth,\r\n      left:\r\n        document.getElementById(currentWord.id).offsetLeft -\r\n        document.getElementById(currentWord.id).parentElement.offsetLeft,\r\n    }));\r\n  }, []);\r\n\r\n  if(currentWord.word != \"\"){\r\n\r\n  }\r\n\r\n  function currentWordBlinker() {\r\n    if (textInput.value == \"\" || textInput.value == \" \") {\r\n      document\r\n        .getElementById(currentWord.id)\r\n        .classList.add(\"current-word-blinker\");\r\n    } else {\r\n      document\r\n        .getElementById(currentWord.id)\r\n        .classList.remove(\"current-word-blinker\");\r\n    }\r\n  }\r\n\r\n  function wordIncrementer(e) {\r\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\r\n    textInput.value = \"\";\r\n    document\r\n      .getElementById(currentWord.id)\r\n      .classList.remove(\"current-word-blinker\");\r\n    document.getElementById(currentWord.id).classList.remove(\"right-warning\");\r\n    document.getElementById(currentWord.id).classList.remove(\"wrong-warning\");\r\n    document.getElementById(currentWord.id).classList.remove(\"current-word\");\r\n    if (enteredValue == currentWord.word) {\r\n      document.getElementById(currentWord.id).classList.add(\"correct\");\r\n    } else {\r\n      document.getElementById(currentWord.id).classList.add(\"wrong\");\r\n    }\r\n    document\r\n      .getElementById(`word-${currentWord.key + 1}`)\r\n      .classList.add(\"current-word\");\r\n    setCurrentWord((prevWord) => ({\r\n      key: prevWord.key + 1,\r\n      id: `word-${prevWord.key + 1}`,\r\n      word: document.getElementById(`word-${prevWord.key + 1}`).innerText,\r\n      width: document.getElementById(`word-${prevWord.key + 1}`).offsetWidth,\r\n      left:\r\n        document.getElementById(`word-${prevWord.key + 1}`).offsetLeft -\r\n        document.getElementById(`word-${prevWord.key + 1}`).parentElement\r\n          .offsetLeft,\r\n    }));\r\n    currentWordBlinker();\r\n  }\r\n\r\n  function textInputEvaluater(e) {\r\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\r\n    wrong = false;\r\n    document.getElementById(currentWord.id).classList.remove(\"right-warning\");\r\n    document.getElementById(currentWord.id).classList.remove(\"wrong-warning\");\r\n    if (enteredValue != currentWord.word.slice(0, enteredValue.length)) {\r\n      document.getElementById(currentWord.id).classList.add(\"wrong-warning\");\r\n      wrong = true;\r\n    } else if (enteredValue == currentWord.word) {\r\n      document.getElementById(currentWord.id).classList.add(\"right-warning\");\r\n    }\r\n  }\r\n\r\n  function textInputClickHandler(e) {\r\n    if (e.keyCode == 32) {\r\n      if (e.target.value == \"\" || e.target.value == \" \") {\r\n        textInput.value = \"\";\r\n      } else {\r\n        wordIncrementer(e);\r\n      }\r\n    } else {\r\n      textInputEvaluater(e);\r\n      currentWordBlinker();\r\n    }\r\n  }\r\n  return (\r\n    <Container width={`${currentWord.width}px`} left={`${currentWord.left}px`}>\r\n      <input\r\n        id=\"textInput\"\r\n        autoCapitalize=\"off\"\r\n        autoComplete=\"off\"\r\n        spellCheck=\"false\"\r\n        maxLength=\"15\"\r\n        onKeyDown={(e) =>\r\n          setTimeout(() => {\r\n            textInputClickHandler(e);\r\n          }, 1)\r\n        }\r\n      ></input>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  input {\r\n    background-color: transparent;\r\n    border: none;\r\n    border-bottom: #aaa solid 2px;\r\n    caret-color: #ffff;\r\n    font-size: 1.2em;\r\n    text-align: center;\r\n    margin: 10px 0 20px;\r\n    padding: 3px 3px 5px;\r\n    color: #ffff;\r\n    width: ${(props) => props.width};\r\n    transform: translateX(${(props) => props.left});\r\n    transition: all 150ms ease-in-out;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}