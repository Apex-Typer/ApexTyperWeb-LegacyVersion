{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TextInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { confirmWord, nextWord, prevWord, updateInput, resetInput } from \"../state/action-creators/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TextInput(props) {\n  _s();\n\n  const curWord = useSelector(state => state.currentWord);\n  const enteredWord = useSelector(state => state.enteredWord);\n  const dispatch = useDispatch();\n  console.log(curWord);\n  const [currentWord, setCurrentWord] = useState({\n    key: 1,\n    id: \"word-1\",\n    word: \"\",\n    width: 0,\n    left: 0\n  });\n  const testContentScrollerCount = useRef(1);\n  var textInput = document.getElementById(\"textInput\");\n\n  if (currentWord.word != \"\") {\n    currentWordBlinker();\n    textInput.focus();\n  }\n\n  if (currentWord.key > 1 && document.getElementById(currentWord.id).offsetLeft - document.getElementById(currentWord.id).parentElement.offsetLeft == 5) {\n    testContentScroller();\n  }\n\n  useEffect(() => {\n    dispatch(confirmWord());\n    setCurrentWord(prevWord => ({ ...prevWord,\n      word: document.getElementById(currentWord.id).innerText,\n      width: document.getElementById(currentWord.id).offsetWidth,\n      left: document.getElementById(currentWord.id).offsetLeft - document.getElementById(currentWord.id).parentElement.offsetLeft\n    }));\n  }, []);\n\n  function currentWordBlinker() {\n    if (textInput.value == \"\" || textInput.value == \" \") {\n      document.getElementById(currentWord.id).classList.add(\"current-word-blinker\");\n    } else {\n      document.getElementById(currentWord.id).classList.remove(\"current-word-blinker\");\n    }\n  }\n\n  function testContentScroller() {\n    let currentLineHeight = parseInt(window.getComputedStyle(document.getElementById(\"testContent\")).getPropertyValue(\"line-height\"));\n    document.getElementById(\"testContentChild\").style.transform = `translateY(-${currentLineHeight * testContentScrollerCount.current}px)`;\n    testContentScrollerCount.current++;\n  }\n\n  function wordIncrementer(e) {\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\n    textInput.value = \"\";\n    document.getElementById(currentWord.id).classList.remove(\"current-word-blinker\");\n    document.getElementById(currentWord.id).classList.remove(\"right-warning\");\n    document.getElementById(currentWord.id).classList.remove(\"wrong-warning\");\n    document.getElementById(currentWord.id).classList.remove(\"current-word\");\n\n    if (enteredValue == currentWord.word) {\n      document.getElementById(currentWord.id).classList.add(\"correct\");\n    } else {\n      document.getElementById(currentWord.id).classList.add(\"wrong\"); // wrongWordHandler(e);\n    }\n\n    document.getElementById(`word-${currentWord.key + 1}`).classList.add(\"current-word\");\n    setCurrentWord(prevWord => ({\n      key: prevWord.key + 1,\n      id: `word-${prevWord.key + 1}`,\n      word: document.getElementById(`word-${prevWord.key + 1}`).innerText,\n      width: document.getElementById(`word-${prevWord.key + 1}`).offsetWidth,\n      left: document.getElementById(`word-${prevWord.key + 1}`).offsetLeft - document.getElementById(`word-${prevWord.key + 1}`).parentElement.offsetLeft\n    }));\n  }\n\n  function textInputEvaluater(e) {\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\n    document.getElementById(currentWord.id).classList.remove(\"right-warning\");\n    document.getElementById(currentWord.id).classList.remove(\"wrong-warning\");\n\n    if (enteredValue != currentWord.word.slice(0, enteredValue.length)) {\n      document.getElementById(currentWord.id).classList.add(\"wrong-warning\");\n    } else if (enteredValue == currentWord.word) {\n      document.getElementById(currentWord.id).classList.add(\"right-warning\");\n    }\n  }\n\n  function textInputClickHandler(e) {\n    if (e.keyCode == 32) {\n      if (e.target.value == \"\" || e.target.value == \" \") {\n        textInput.value = \"\";\n      } else {\n        wordIncrementer(e);\n      }\n    } else {\n      textInputEvaluater(e);\n      currentWordBlinker();\n    }\n  }\n\n  function wrongWordHandler(e) {\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\n    let entValLen = enteredValue.length;\n    let currWrdLen = currentWord.word.length;\n\n    if (currWrdLen <= entValLen) {\n      for (let i = 0; i < currWrdLen; i++) {\n        if (currentWord.word[i] == enteredValue[i]) {\n          document.getElementById(`${currentWord.id}-letter-${i}`).classList.add(\"yellow\");\n        } else {\n          document.getElementById(`${currentWord.id}-letter-${i}`).classList.add(\"wrong\");\n        }\n      }\n\n      if (currWrdLen < entValLen) {\n        let extraLetters = enteredValue.slice(currWrdLen);\n\n        for (let i = 0; i < extraLetters.length; i++) {\n          let newLetter = document.createElement(\"span\").appendChild(document.createTextNode(extraLetters[i]));\n          newLetter.setAttribute(\"id\", `${currentWord.id}-letter-${currWrdLen + i}`);\n          newLetter.setAttribute(\"class\", \"wrong\");\n          document.getElementById(currentWord.id).appendChild(newLetter);\n        }\n      }\n    } else {\n      for (let i = 0; i < currWrdLen; i++) {\n        if (i < entValLen) {\n          if (currentWord.word[i] == enteredValue[i]) {\n            document.getElementById(`${currentWord.id}-letter-${i}`).classList.add(\"yellow\");\n          } else {\n            document.getElementById(`${currentWord.id}-letter-${i}`).classList.add(\"wrong\");\n          }\n        } else {\n          document.getElementById(`${currentWord.id}-letter-${i}`).classList.add(\"wrong\");\n        }\n      }\n    }\n  }\n\n  function textInputChangeHandler(e) {\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\n    dispatch(updateInput(enteredValue));\n  }\n\n  console.log(enteredWord);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    width: `${currentWord.width}px`,\n    left: `${currentWord.left}px`,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"textInput\",\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      maxLength: \"15\" // onKeyDown={(e) =>\n      //   setTimeout(() => {\n      //     textInputClickHandler(e);\n      //   }, 1)\n      // }\n      ,\n      onChange: e => textInputChangeHandler(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextInput, \"sPRsElOhGmXkC23B0rM+p5koktU=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = TextInput;\nexport default TextInput;\nconst Container = styled.div`\n  width: 100%;\n  input {\n    background-color: transparent;\n    border: none;\n    border-bottom: #aaa solid 2px;\n    caret-color: #ffff;\n    font-size: 1.2em;\n    text-align: center;\n    margin: 10px 0 20px;\n    padding: 3px 3px 5px;\n    color: #ffff;\n    width: ${props => props.width};\n    transform: translateX(${props => props.left});\n    transition: all 150ms ease-in-out;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TextInput.js"],"names":["React","useState","useEffect","useRef","styled","useSelector","useDispatch","confirmWord","nextWord","prevWord","updateInput","resetInput","TextInput","props","curWord","state","currentWord","enteredWord","dispatch","console","log","setCurrentWord","key","id","word","width","left","testContentScrollerCount","textInput","document","getElementById","currentWordBlinker","focus","offsetLeft","parentElement","testContentScroller","innerText","offsetWidth","value","classList","add","remove","currentLineHeight","parseInt","window","getComputedStyle","getPropertyValue","style","transform","current","wordIncrementer","e","enteredValue","target","replace","textInputEvaluater","slice","length","textInputClickHandler","keyCode","wrongWordHandler","entValLen","currWrdLen","i","extraLetters","newLetter","createElement","appendChild","createTextNode","setAttribute","textInputChangeHandler","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,WADF,EAEEC,QAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,UALF,QAMO,gCANP;;;AAQA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACxB,QAAMC,OAAO,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAA3B;AACA,QAAMC,WAAW,GAAGZ,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACE,WAAlB,CAA/B;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACA,QAAM,CAACE,WAAD,EAAcK,cAAd,IAAgCpB,QAAQ,CAAC;AAC7CqB,IAAAA,GAAG,EAAE,CADwC;AAE7CC,IAAAA,EAAE,EAAE,QAFyC;AAG7CC,IAAAA,IAAI,EAAE,EAHuC;AAI7CC,IAAAA,KAAK,EAAE,CAJsC;AAK7CC,IAAAA,IAAI,EAAE;AALuC,GAAD,CAA9C;AAQA,QAAMC,wBAAwB,GAAGxB,MAAM,CAAC,CAAD,CAAvC;AAEA,MAAIyB,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAhB;;AAEA,MAAId,WAAW,CAACQ,IAAZ,IAAoB,EAAxB,EAA4B;AAC1BO,IAAAA,kBAAkB;AAClBH,IAAAA,SAAS,CAACI,KAAV;AACD;;AACD,MACEhB,WAAW,CAACM,GAAZ,GAAkB,CAAlB,IACAO,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCU,UAAxC,GACEJ,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCW,aAAxC,CAAsDD,UADxD,IAEE,CAJJ,EAKE;AACAE,IAAAA,mBAAmB;AACpB;;AACDjC,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,CAACX,WAAW,EAAZ,CAAR;AACAc,IAAAA,cAAc,CAAEZ,QAAD,KAAe,EAC5B,GAAGA,QADyB;AAE5Be,MAAAA,IAAI,EAAEK,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCa,SAFlB;AAG5BX,MAAAA,KAAK,EAAEI,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCc,WAHnB;AAI5BX,MAAAA,IAAI,EACFG,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCU,UAAxC,GACAJ,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCW,aAAxC,CAAsDD;AAN5B,KAAf,CAAD,CAAd;AAQD,GAVQ,EAUN,EAVM,CAAT;;AAYA,WAASF,kBAAT,GAA8B;AAC5B,QAAIH,SAAS,CAACU,KAAV,IAAmB,EAAnB,IAAyBV,SAAS,CAACU,KAAV,IAAmB,GAAhD,EAAqD;AACnDT,MAAAA,QAAQ,CACLC,cADH,CACkBd,WAAW,CAACO,EAD9B,EAEGgB,SAFH,CAEaC,GAFb,CAEiB,sBAFjB;AAGD,KAJD,MAIO;AACLX,MAAAA,QAAQ,CACLC,cADH,CACkBd,WAAW,CAACO,EAD9B,EAEGgB,SAFH,CAEaE,MAFb,CAEoB,sBAFpB;AAGD;AACF;;AAED,WAASN,mBAAT,GAA+B;AAC7B,QAAIO,iBAAiB,GAAGC,QAAQ,CAC9BC,MAAM,CACHC,gBADH,CACoBhB,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CADpB,EAEGgB,gBAFH,CAEoB,aAFpB,CAD8B,CAAhC;AAKAjB,IAAAA,QAAQ,CAACC,cAAT,CACE,kBADF,EAEEiB,KAFF,CAEQC,SAFR,GAEqB,eACnBN,iBAAiB,GAAGf,wBAAwB,CAACsB,OAC9C,KAJD;AAKAtB,IAAAA,wBAAwB,CAACsB,OAAzB;AACD;;AAED,WAASC,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B,QAAIC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASf,KAAT,CAAegB,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAnB;AACA1B,IAAAA,SAAS,CAACU,KAAV,GAAkB,EAAlB;AACAT,IAAAA,QAAQ,CACLC,cADH,CACkBd,WAAW,CAACO,EAD9B,EAEGgB,SAFH,CAEaE,MAFb,CAEoB,sBAFpB;AAGAZ,IAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDE,MAAlD,CAAyD,eAAzD;AACAZ,IAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDE,MAAlD,CAAyD,eAAzD;AACAZ,IAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDE,MAAlD,CAAyD,cAAzD;;AACA,QAAIW,YAAY,IAAIpC,WAAW,CAACQ,IAAhC,EAAsC;AACpCK,MAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDC,GAAlD,CAAsD,SAAtD;AACD,KAFD,MAEO;AACLX,MAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDC,GAAlD,CAAsD,OAAtD,EADK,CAEL;AACD;;AACDX,IAAAA,QAAQ,CACLC,cADH,CACmB,QAAOd,WAAW,CAACM,GAAZ,GAAkB,CAAE,EAD9C,EAEGiB,SAFH,CAEaC,GAFb,CAEiB,cAFjB;AAIAnB,IAAAA,cAAc,CAAEZ,QAAD,KAAe;AAC5Ba,MAAAA,GAAG,EAAEb,QAAQ,CAACa,GAAT,GAAe,CADQ;AAE5BC,MAAAA,EAAE,EAAG,QAAOd,QAAQ,CAACa,GAAT,GAAe,CAAE,EAFD;AAG5BE,MAAAA,IAAI,EAAEK,QAAQ,CAACC,cAAT,CAAyB,QAAOrB,QAAQ,CAACa,GAAT,GAAe,CAAE,EAAjD,EAAoDc,SAH9B;AAI5BX,MAAAA,KAAK,EAAEI,QAAQ,CAACC,cAAT,CAAyB,QAAOrB,QAAQ,CAACa,GAAT,GAAe,CAAE,EAAjD,EAAoDe,WAJ/B;AAK5BX,MAAAA,IAAI,EACFG,QAAQ,CAACC,cAAT,CAAyB,QAAOrB,QAAQ,CAACa,GAAT,GAAe,CAAE,EAAjD,EAAoDW,UAApD,GACAJ,QAAQ,CAACC,cAAT,CAAyB,QAAOrB,QAAQ,CAACa,GAAT,GAAe,CAAE,EAAjD,EAAoDY,aAApD,CACGD;AARuB,KAAf,CAAD,CAAd;AAUD;;AAED,WAASsB,kBAAT,CAA4BJ,CAA5B,EAA+B;AAC7B,QAAIC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASf,KAAT,CAAegB,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAnB;AACAzB,IAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDE,MAAlD,CAAyD,eAAzD;AACAZ,IAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDE,MAAlD,CAAyD,eAAzD;;AACA,QAAIW,YAAY,IAAIpC,WAAW,CAACQ,IAAZ,CAAiBgC,KAAjB,CAAuB,CAAvB,EAA0BJ,YAAY,CAACK,MAAvC,CAApB,EAAoE;AAClE5B,MAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDC,GAAlD,CAAsD,eAAtD;AACD,KAFD,MAEO,IAAIY,YAAY,IAAIpC,WAAW,CAACQ,IAAhC,EAAsC;AAC3CK,MAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwCgB,SAAxC,CAAkDC,GAAlD,CAAsD,eAAtD;AACD;AACF;;AAED,WAASkB,qBAAT,CAA+BP,CAA/B,EAAkC;AAChC,QAAIA,CAAC,CAACQ,OAAF,IAAa,EAAjB,EAAqB;AACnB,UAAIR,CAAC,CAACE,MAAF,CAASf,KAAT,IAAkB,EAAlB,IAAwBa,CAAC,CAACE,MAAF,CAASf,KAAT,IAAkB,GAA9C,EAAmD;AACjDV,QAAAA,SAAS,CAACU,KAAV,GAAkB,EAAlB;AACD,OAFD,MAEO;AACLY,QAAAA,eAAe,CAACC,CAAD,CAAf;AACD;AACF,KAND,MAMO;AACLI,MAAAA,kBAAkB,CAACJ,CAAD,CAAlB;AACApB,MAAAA,kBAAkB;AACnB;AACF;;AAED,WAAS6B,gBAAT,CAA0BT,CAA1B,EAA6B;AAC3B,QAAIC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASf,KAAT,CAAegB,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAnB;AACA,QAAIO,SAAS,GAAGT,YAAY,CAACK,MAA7B;AACA,QAAIK,UAAU,GAAG9C,WAAW,CAACQ,IAAZ,CAAiBiC,MAAlC;;AACA,QAAIK,UAAU,IAAID,SAAlB,EAA6B;AAC3B,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAApB,EAAgCC,CAAC,EAAjC,EAAqC;AACnC,YAAI/C,WAAW,CAACQ,IAAZ,CAAiBuC,CAAjB,KAAuBX,YAAY,CAACW,CAAD,CAAvC,EAA4C;AAC1ClC,UAAAA,QAAQ,CACLC,cADH,CACmB,GAAEd,WAAW,CAACO,EAAG,WAAUwC,CAAE,EADhD,EAEGxB,SAFH,CAEaC,GAFb,CAEiB,QAFjB;AAGD,SAJD,MAIO;AACLX,UAAAA,QAAQ,CACLC,cADH,CACmB,GAAEd,WAAW,CAACO,EAAG,WAAUwC,CAAE,EADhD,EAEGxB,SAFH,CAEaC,GAFb,CAEiB,OAFjB;AAGD;AACF;;AACD,UAAIsB,UAAU,GAAGD,SAAjB,EAA4B;AAC1B,YAAIG,YAAY,GAAGZ,YAAY,CAACI,KAAb,CAAmBM,UAAnB,CAAnB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,YAAY,CAACP,MAAjC,EAAyCM,CAAC,EAA1C,EAA8C;AAC5C,cAAIE,SAAS,GAAGpC,QAAQ,CACrBqC,aADa,CACC,MADD,EAEbC,WAFa,CAEDtC,QAAQ,CAACuC,cAAT,CAAwBJ,YAAY,CAACD,CAAD,CAApC,CAFC,CAAhB;AAGAE,UAAAA,SAAS,CAACI,YAAV,CACE,IADF,EAEG,GAAErD,WAAW,CAACO,EAAG,WAAUuC,UAAU,GAAGC,CAAE,EAF7C;AAIAE,UAAAA,SAAS,CAACI,YAAV,CAAuB,OAAvB,EAAgC,OAAhC;AACAxC,UAAAA,QAAQ,CAACC,cAAT,CAAwBd,WAAW,CAACO,EAApC,EAAwC4C,WAAxC,CAAoDF,SAApD;AACD;AACF;AACF,KA1BD,MA0BO;AACL,WAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAApB,EAAgCC,CAAC,EAAjC,EAAqC;AACnC,YAAIA,CAAC,GAAGF,SAAR,EAAmB;AACjB,cAAI7C,WAAW,CAACQ,IAAZ,CAAiBuC,CAAjB,KAAuBX,YAAY,CAACW,CAAD,CAAvC,EAA4C;AAC1ClC,YAAAA,QAAQ,CACLC,cADH,CACmB,GAAEd,WAAW,CAACO,EAAG,WAAUwC,CAAE,EADhD,EAEGxB,SAFH,CAEaC,GAFb,CAEiB,QAFjB;AAGD,WAJD,MAIO;AACLX,YAAAA,QAAQ,CACLC,cADH,CACmB,GAAEd,WAAW,CAACO,EAAG,WAAUwC,CAAE,EADhD,EAEGxB,SAFH,CAEaC,GAFb,CAEiB,OAFjB;AAGD;AACF,SAVD,MAUO;AACLX,UAAAA,QAAQ,CACLC,cADH,CACmB,GAAEd,WAAW,CAACO,EAAG,WAAUwC,CAAE,EADhD,EAEGxB,SAFH,CAEaC,GAFb,CAEiB,OAFjB;AAGD;AACF;AACF;AACF;;AAED,WAAS8B,sBAAT,CAAgCnB,CAAhC,EAAmC;AACjC,QAAIC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASf,KAAT,CAAegB,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAnB;AACApC,IAAAA,QAAQ,CAACR,WAAW,CAAC0C,YAAD,CAAZ,CAAR;AACD;;AACDjC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AAEA,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,EAAG,GAAED,WAAW,CAACS,KAAM,IAAvC;AAA4C,IAAA,IAAI,EAAG,GAAET,WAAW,CAACU,IAAK,IAAtE;AAAA,2BACE;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,cAAc,EAAC,KAFjB;AAGE,MAAA,YAAY,EAAC,KAHf;AAIE,MAAA,UAAU,EAAC,OAJb;AAKE,MAAA,SAAS,EAAC,IALZ,CAME;AACA;AACA;AACA;AACA;AAVF;AAWE,MAAA,QAAQ,EAAGyB,CAAD,IAAOmB,sBAAsB,CAACnB,CAAD;AAXzC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GApMQvC,S;UACSP,W,EACIA,W,EACHC,W;;;KAHVM,S;AAsMT,eAAeA,SAAf;AAEA,MAAM2D,SAAS,GAAGnE,MAAM,CAACoE,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAc3D,KAAD,IAAWA,KAAK,CAACY,KAAM;AACpC,4BAA6BZ,KAAD,IAAWA,KAAK,CAACa,IAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;MAAM6C,S","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  confirmWord,\r\n  nextWord,\r\n  prevWord,\r\n  updateInput,\r\n  resetInput,\r\n} from \"../state/action-creators/index\";\r\n\r\nfunction TextInput(props) {\r\n  const curWord = useSelector((state) => state.currentWord);\r\n  const enteredWord = useSelector((state) => state.enteredWord);\r\n  const dispatch = useDispatch();\r\n  console.log(curWord);\r\n  const [currentWord, setCurrentWord] = useState({\r\n    key: 1,\r\n    id: \"word-1\",\r\n    word: \"\",\r\n    width: 0,\r\n    left: 0,\r\n  });\r\n\r\n  const testContentScrollerCount = useRef(1);\r\n\r\n  var textInput = document.getElementById(\"textInput\");\r\n\r\n  if (currentWord.word != \"\") {\r\n    currentWordBlinker();\r\n    textInput.focus();\r\n  }\r\n  if (\r\n    currentWord.key > 1 &&\r\n    document.getElementById(currentWord.id).offsetLeft -\r\n      document.getElementById(currentWord.id).parentElement.offsetLeft ==\r\n      5\r\n  ) {\r\n    testContentScroller();\r\n  }\r\n  useEffect(() => {\r\n    dispatch(confirmWord());\r\n    setCurrentWord((prevWord) => ({\r\n      ...prevWord,\r\n      word: document.getElementById(currentWord.id).innerText,\r\n      width: document.getElementById(currentWord.id).offsetWidth,\r\n      left:\r\n        document.getElementById(currentWord.id).offsetLeft -\r\n        document.getElementById(currentWord.id).parentElement.offsetLeft,\r\n    }));\r\n  }, []);\r\n\r\n  function currentWordBlinker() {\r\n    if (textInput.value == \"\" || textInput.value == \" \") {\r\n      document\r\n        .getElementById(currentWord.id)\r\n        .classList.add(\"current-word-blinker\");\r\n    } else {\r\n      document\r\n        .getElementById(currentWord.id)\r\n        .classList.remove(\"current-word-blinker\");\r\n    }\r\n  }\r\n\r\n  function testContentScroller() {\r\n    let currentLineHeight = parseInt(\r\n      window\r\n        .getComputedStyle(document.getElementById(\"testContent\"))\r\n        .getPropertyValue(\"line-height\")\r\n    );\r\n    document.getElementById(\r\n      \"testContentChild\"\r\n    ).style.transform = `translateY(-${\r\n      currentLineHeight * testContentScrollerCount.current\r\n    }px)`;\r\n    testContentScrollerCount.current++;\r\n  }\r\n\r\n  function wordIncrementer(e) {\r\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\r\n    textInput.value = \"\";\r\n    document\r\n      .getElementById(currentWord.id)\r\n      .classList.remove(\"current-word-blinker\");\r\n    document.getElementById(currentWord.id).classList.remove(\"right-warning\");\r\n    document.getElementById(currentWord.id).classList.remove(\"wrong-warning\");\r\n    document.getElementById(currentWord.id).classList.remove(\"current-word\");\r\n    if (enteredValue == currentWord.word) {\r\n      document.getElementById(currentWord.id).classList.add(\"correct\");\r\n    } else {\r\n      document.getElementById(currentWord.id).classList.add(\"wrong\");\r\n      // wrongWordHandler(e);\r\n    }\r\n    document\r\n      .getElementById(`word-${currentWord.key + 1}`)\r\n      .classList.add(\"current-word\");\r\n\r\n    setCurrentWord((prevWord) => ({\r\n      key: prevWord.key + 1,\r\n      id: `word-${prevWord.key + 1}`,\r\n      word: document.getElementById(`word-${prevWord.key + 1}`).innerText,\r\n      width: document.getElementById(`word-${prevWord.key + 1}`).offsetWidth,\r\n      left:\r\n        document.getElementById(`word-${prevWord.key + 1}`).offsetLeft -\r\n        document.getElementById(`word-${prevWord.key + 1}`).parentElement\r\n          .offsetLeft,\r\n    }));\r\n  }\r\n\r\n  function textInputEvaluater(e) {\r\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\r\n    document.getElementById(currentWord.id).classList.remove(\"right-warning\");\r\n    document.getElementById(currentWord.id).classList.remove(\"wrong-warning\");\r\n    if (enteredValue != currentWord.word.slice(0, enteredValue.length)) {\r\n      document.getElementById(currentWord.id).classList.add(\"wrong-warning\");\r\n    } else if (enteredValue == currentWord.word) {\r\n      document.getElementById(currentWord.id).classList.add(\"right-warning\");\r\n    }\r\n  }\r\n\r\n  function textInputClickHandler(e) {\r\n    if (e.keyCode == 32) {\r\n      if (e.target.value == \"\" || e.target.value == \" \") {\r\n        textInput.value = \"\";\r\n      } else {\r\n        wordIncrementer(e);\r\n      }\r\n    } else {\r\n      textInputEvaluater(e);\r\n      currentWordBlinker();\r\n    }\r\n  }\r\n\r\n  function wrongWordHandler(e) {\r\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\r\n    let entValLen = enteredValue.length;\r\n    let currWrdLen = currentWord.word.length;\r\n    if (currWrdLen <= entValLen) {\r\n      for (let i = 0; i < currWrdLen; i++) {\r\n        if (currentWord.word[i] == enteredValue[i]) {\r\n          document\r\n            .getElementById(`${currentWord.id}-letter-${i}`)\r\n            .classList.add(\"yellow\");\r\n        } else {\r\n          document\r\n            .getElementById(`${currentWord.id}-letter-${i}`)\r\n            .classList.add(\"wrong\");\r\n        }\r\n      }\r\n      if (currWrdLen < entValLen) {\r\n        let extraLetters = enteredValue.slice(currWrdLen);\r\n        for (let i = 0; i < extraLetters.length; i++) {\r\n          let newLetter = document\r\n            .createElement(\"span\")\r\n            .appendChild(document.createTextNode(extraLetters[i]));\r\n          newLetter.setAttribute(\r\n            \"id\",\r\n            `${currentWord.id}-letter-${currWrdLen + i}`\r\n          );\r\n          newLetter.setAttribute(\"class\", \"wrong\");\r\n          document.getElementById(currentWord.id).appendChild(newLetter);\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < currWrdLen; i++) {\r\n        if (i < entValLen) {\r\n          if (currentWord.word[i] == enteredValue[i]) {\r\n            document\r\n              .getElementById(`${currentWord.id}-letter-${i}`)\r\n              .classList.add(\"yellow\");\r\n          } else {\r\n            document\r\n              .getElementById(`${currentWord.id}-letter-${i}`)\r\n              .classList.add(\"wrong\");\r\n          }\r\n        } else {\r\n          document\r\n            .getElementById(`${currentWord.id}-letter-${i}`)\r\n            .classList.add(\"wrong\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function textInputChangeHandler(e) {\r\n    let enteredValue = e.target.value.replace(/\\s/g, \"\");\r\n    dispatch(updateInput(enteredValue));\r\n  }\r\n  console.log(enteredWord);\r\n\r\n  return (\r\n    <Container width={`${currentWord.width}px`} left={`${currentWord.left}px`}>\r\n      <input\r\n        id=\"textInput\"\r\n        autoCapitalize=\"off\"\r\n        autoComplete=\"off\"\r\n        spellCheck=\"false\"\r\n        maxLength=\"15\"\r\n        // onKeyDown={(e) =>\r\n        //   setTimeout(() => {\r\n        //     textInputClickHandler(e);\r\n        //   }, 1)\r\n        // }\r\n        onChange={(e) => textInputChangeHandler(e)}\r\n      ></input>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  input {\r\n    background-color: transparent;\r\n    border: none;\r\n    border-bottom: #aaa solid 2px;\r\n    caret-color: #ffff;\r\n    font-size: 1.2em;\r\n    text-align: center;\r\n    margin: 10px 0 20px;\r\n    padding: 3px 3px 5px;\r\n    color: #ffff;\r\n    width: ${(props) => props.width};\r\n    transform: translateX(${(props) => props.left});\r\n    transition: all 150ms ease-in-out;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}