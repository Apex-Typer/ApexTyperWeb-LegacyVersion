{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TextInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, componentDidMount } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { firstWord, nextWord, prevWord, updateInput, resetInput, focusInput, blurInput, updateCurrentWord, updateAndChangeCurrentWord, confirmWord, updateInputLog } from \"../state/action-creators/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TextInput() {\n  _s();\n\n  const currentWord = useSelector(state => state.currentWord);\n  const enteredWord = useSelector(state => state.enteredWord);\n  const inputLog = useSelector(state => state.inputLog);\n  const testWords = useSelector(state => state.testWords);\n  const dispatch = useDispatch();\n  const inputRef = useRef(null);\n  const testContentScrollerCount = useRef(0);\n  useEffect(() => {\n    dispatch(confirmWord(currentWord));\n\n    if (currentWord.key > 0) {}\n  }, []);\n  useEffect(() => {\n    if (currentWord.key > 0) {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n\n      let currentLineHeight = parseInt(window.getComputedStyle(document.getElementById(\"testContent\")).getPropertyValue(\"line-height\"));\n\n      if (currentWord.top == 0) {\n        document.getElementById(\"testContentChild\").style.transform = `translateY(${currentLineHeight}px)`;\n      } else if (currentWord.top - currentLineHeight * testContentScrollerCount.current != 0) {\n        testContentScroller();\n      }\n    }\n\n    if (currentWord.key <= inputLog.length && enteredWord.word == \"\") {\n      dispatch(updateInput(inputLog[currentWord.index].word, currentWord.word));\n      dispatch(updateInputLog(currentWord, enteredWord));\n    }\n  }, [currentWord]);\n  useEffect(() => {\n    if (currentWord.key > 0) {\n      dispatch(updateCurrentWord(currentWord, enteredWord));\n    }\n  }, [enteredWord]);\n\n  function testContentScroller() {\n    let currentLineHeight = parseInt(window.getComputedStyle(document.getElementById(\"testContent\")).getPropertyValue(\"line-height\"));\n    let topOffsetFactor = (currentWord.top - currentLineHeight * testContentScrollerCount.current) / currentLineHeight;\n    testContentScrollerCount.current = testContentScrollerCount.current + topOffsetFactor;\n    document.getElementById(\"testContentChild\").style.transform = `translateY(${-1 * (currentLineHeight * testContentScrollerCount.current - currentLineHeight)}px)`;\n  }\n\n  function textInputChangeHandler(e) {\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n    dispatch(updateInput(enteredValue, currentWord.word));\n  }\n\n  function keyDownHandler(e) {\n    let keyClicked = e.nativeEvent.code;\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n\n    if (keyClicked == \"Space\" && enteredValue != \"\") {\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\n      dispatch(updateInputLog(currentWord, enteredWord));\n      dispatch(nextWord(testWords.rawWords));\n      dispatch(resetInput());\n    } else if (keyClicked == \"Backspace\" && enteredValue == \"\" && currentWord.key > 1 && !inputLog[currentWord.index - 1].isComplete) {\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\n      dispatch(prevWord(testWords.rawWords));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      id: \"textInput\",\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      maxLength: \"15\",\n      value: enteredWord.word,\n      onKeyDown: e => keyDownHandler(e),\n      onChange: e => textInputChangeHandler(e),\n      onBlur: () => {\n        dispatch(blurInput());\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextInput, \"5mJaehwfeRcl/0LZr8esFVm64HU=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = TextInput;\nexport default TextInput;\nconst Container = styled.div`\n  width: 100%;\n  position: absolute;\n\n  input {\n    background-color: transparent;\n    border: none;\n    cursor: default;\n    border-bottom: \"none\";\n    caret-color: transparent;\n    font-size: 1.2em;\n    font-family: \"Quicksand\", sans-serif;\n    font-weight: 500;\n    text-align: center;\n    color: transparent;\n    /* color: white; */\n    transition: all 150ms ease-in-out;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TextInput.js"],"names":["React","useState","useEffect","useRef","componentDidMount","styled","useSelector","useDispatch","firstWord","nextWord","prevWord","updateInput","resetInput","focusInput","blurInput","updateCurrentWord","updateAndChangeCurrentWord","confirmWord","updateInputLog","TextInput","currentWord","state","enteredWord","inputLog","testWords","dispatch","inputRef","testContentScrollerCount","key","current","focus","currentLineHeight","parseInt","window","getComputedStyle","document","getElementById","getPropertyValue","top","style","transform","testContentScroller","length","word","index","topOffsetFactor","textInputChangeHandler","e","enteredValue","String","target","value","replace","keyDownHandler","keyClicked","nativeEvent","code","rawWords","isComplete","Container","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, componentDidMount } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  firstWord,\r\n  nextWord,\r\n  prevWord,\r\n  updateInput,\r\n  resetInput,\r\n  focusInput,\r\n  blurInput,\r\n  updateCurrentWord,\r\n  updateAndChangeCurrentWord,\r\n  confirmWord,\r\n  updateInputLog,\r\n} from \"../state/action-creators/index\";\r\n\r\nfunction TextInput() {\r\n  const currentWord = useSelector((state) => state.currentWord);\r\n  const enteredWord = useSelector((state) => state.enteredWord);\r\n  const inputLog = useSelector((state) => state.inputLog);\r\n  const testWords = useSelector((state) => state.testWords);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const inputRef = useRef(null);\r\n  const testContentScrollerCount = useRef(0);\r\n\r\n  useEffect(() => {\r\n    dispatch(confirmWord(currentWord));\r\n    if(currentWord.key>0){\r\n      \r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key > 0) {\r\n      if (inputRef.current) {\r\n        inputRef.current.focus();\r\n      }\r\n      let currentLineHeight = parseInt(\r\n        window\r\n          .getComputedStyle(document.getElementById(\"testContent\"))\r\n          .getPropertyValue(\"line-height\")\r\n      );\r\n      if (currentWord.top == 0) {\r\n        document.getElementById(\r\n          \"testContentChild\"\r\n        ).style.transform = `translateY(${currentLineHeight}px)`;\r\n      } else if (\r\n        currentWord.top -\r\n          currentLineHeight * testContentScrollerCount.current !=\r\n        0\r\n      ) {\r\n        testContentScroller();\r\n      }\r\n    }\r\n    if (currentWord.key <= inputLog.length && enteredWord.word == \"\") {\r\n      dispatch(updateInput(inputLog[currentWord.index].word, currentWord.word));\r\n      dispatch(updateInputLog(currentWord, enteredWord));\r\n    }\r\n  }, [currentWord]);\r\n\r\n  useEffect(() => {\r\n    if (currentWord.key > 0) {\r\n      dispatch(updateCurrentWord(currentWord, enteredWord));\r\n    }\r\n  }, [enteredWord]);\r\n\r\n  function testContentScroller() {\r\n    let currentLineHeight = parseInt(\r\n      window\r\n        .getComputedStyle(document.getElementById(\"testContent\"))\r\n        .getPropertyValue(\"line-height\")\r\n    );\r\n\r\n    let topOffsetFactor =\r\n      (currentWord.top - currentLineHeight * testContentScrollerCount.current) /\r\n      currentLineHeight;\r\n\r\n    testContentScrollerCount.current =\r\n      testContentScrollerCount.current + topOffsetFactor;\r\n\r\n    document.getElementById(\"testContentChild\").style.transform = `translateY(${\r\n      -1 *\r\n      (currentLineHeight * testContentScrollerCount.current - currentLineHeight)\r\n    }px)`;\r\n  }\r\n\r\n  function textInputChangeHandler(e) {\r\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    dispatch(updateInput(enteredValue, currentWord.word));\r\n  }\r\n\r\n  function keyDownHandler(e) {\r\n    let keyClicked = e.nativeEvent.code;\r\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    if (keyClicked == \"Space\" && enteredValue != \"\") {\r\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\r\n      dispatch(updateInputLog(currentWord, enteredWord));\r\n      dispatch(nextWord(testWords.rawWords));\r\n      dispatch(resetInput());\r\n    } else if (\r\n      keyClicked == \"Backspace\" &&\r\n      enteredValue == \"\" &&\r\n      currentWord.key > 1 &&\r\n      !inputLog[currentWord.index - 1].isComplete\r\n    ) {\r\n      dispatch(updateAndChangeCurrentWord(currentWord, enteredWord));\r\n      dispatch(prevWord(testWords.rawWords));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <input\r\n        ref={inputRef}\r\n        id=\"textInput\"\r\n        autoCapitalize=\"off\"\r\n        autoComplete=\"off\"\r\n        spellCheck=\"false\"\r\n        maxLength=\"15\"\r\n        value={enteredWord.word}\r\n        onKeyDown={(e) => keyDownHandler(e)}\r\n        onChange={(e) => textInputChangeHandler(e)}\r\n        onBlur={() => {\r\n          dispatch(blurInput());\r\n        }}\r\n      ></input>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  position: absolute;\r\n\r\n  input {\r\n    background-color: transparent;\r\n    border: none;\r\n    cursor: default;\r\n    border-bottom: \"none\";\r\n    caret-color: transparent;\r\n    font-size: 1.2em;\r\n    font-family: \"Quicksand\", sans-serif;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    color: transparent;\r\n    /* color: white; */\r\n    transition: all 150ms ease-in-out;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}