{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\state\\\\reducers\\\\testWords.js\";\nimport { store } from \"../store\";\nimport words from \"../../components/wordsData\";\nimport { prevWord } from \"../action-creators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"NEW_WORDS\":\n      return testWordsLoader(action.payload.inputType);\n\n    case \"EVALUATE_WORDS\":\n      return testWordsEvaluate(state, action.payload.currentWord, action.payload.enteredWord, action.payload.inputType);\n\n    case \"UPDATE_CURRENT_WORD\":\n      return updateCurrentWord(state, action.payload.direction, action.payload.currentWord, action.payload.enteredWord);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nfunction testWordsLoader(inputType) {\n  let j = 500;\n  let wordList = [];\n  let prevRanNum = 0;\n\n  for (let i = 0; i < j; i++) {\n    var r = Math.floor(Math.random() * words.length);\n\n    if (r == prevRanNum) {\n      r++;\n    }\n\n    prevRanNum = r;\n    const word = words[r];\n    let letterArray = [];\n\n    for (let l = 0; l < word.length; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${i + 1}-letter-${l + 1}`,\n        className: `letter${i == 0 && l == 0 && inputType == \"INLINE\" ? \" current-letter\" : \"\"}`,\n        children: word[l]\n      }, `word-${i + 1}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this));\n    }\n\n    wordList.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `test-words${i == 0 && inputType == \"FLOAT\" ? \" current-word current-word-blinker\" : \"\"}`,\n      id: `word-${i + 1}`,\n      children: letterArray\n    }, `word-${i + 1}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this));\n    wordList.push(\" \");\n  }\n\n  return wordList;\n}\n\nfunction testWordsEvaluate(prevTestWords, currentWord, enteredWord, inputType) {\n  let enteredWordLength = enteredWord.length;\n  let currentWordLength = currentWord.word.length;\n  let currentWordSliced = currentWord.word.slice(0, enteredWordLength);\n  let currentWordIndex = currentWord.index;\n  let updatedWord;\n  let updatedWordList;\n\n  if (enteredWordLength <= currentWordLength) {\n    if (enteredWord != currentWordSliced) {\n      if (enteredWord != \"\") {\n        updatedWord = wordElementUpdater(currentWord, currentWordLength, enteredWord, \"WRONG_WARNING\", inputType);\n      } else {\n        updatedWord = wordElementUpdater(currentWord, currentWordLength, enteredWord, \"EMPTY\", inputType);\n      }\n    } else if (enteredWord == currentWordSliced) {\n      if (enteredWordLength < currentWordLength) {\n        if (enteredWord != \"\") {\n          updatedWord = wordElementUpdater(currentWord, currentWordLength, enteredWord, \"CORRECT\", inputType);\n        } else {\n          updatedWord = wordElementUpdater(currentWord, currentWordLength, enteredWord, \"EMPTY\", inputType);\n        }\n      } else if (enteredWordLength == currentWordLength) {\n        updatedWord = wordElementUpdater(currentWord, currentWordLength, enteredWord, \"COMPLETED_WARNING\", inputType);\n      }\n    }\n  } else if (enteredWordLength > currentWordLength) {\n    updatedWord = wordElementUpdater(currentWord, currentWordLength, enteredWord, \"WRONG_WARNING\", inputType);\n  }\n\n  if (updatedWord) {\n    updatedWordList = [...prevTestWords];\n    updatedWordList[currentWordIndex] = updatedWord;\n    return updatedWordList;\n  } else {\n    return prevTestWords;\n  }\n}\n\nfunction updateCurrentWord(prevTestWords, direction, currentWord, enteredWord) {\n  let currentWordIndex = currentWord.index;\n  let currentWordLength = currentWord.word.length;\n  let updatedWord;\n\n  if (enteredWord == currentWord.word) {\n    updatedWord = wordElementUpdater(currentWord, currentWordLength, enteredWord, \"CORRECT\", \"FINISHED_WORD\");\n  } else {\n    updatedWord = wordElementUpdater(currentWord, currentWordLength, enteredWord, \"WRONG\", \"FINISHED_WORD\");\n  }\n\n  let updatedWordList = [...prevTestWords];\n  updatedWordList[currentWordIndex] = updatedWord;\n  return updatedWordList;\n}\n\nfunction wordElementUpdater(currentWord, currentWordLength, enteredWord, wordState, inputType) {\n  let letterArray = [];\n  let updatedWord;\n\n  switch (inputType) {\n    case \"FLOAT\":\n      for (let l = 0; l < currentWordLength; l++) {\n        letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          id: `word-${currentWord.key}-letter-${l + 1}`,\n          className: \"letter\",\n          children: currentWord.word[l]\n        }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this));\n      }\n\n      switch (wordState) {\n        case \"WRONG_WARNING\":\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words current-word wrong-warning\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        case \"COMPLETED_WARNING\":\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words current-word completed-warning\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        case \"CORRECT\":\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words current-word\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        case \"EMPTY\":\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words current-word current-word-blinker\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        default:\n          return updatedWord;\n      }\n\n    case \"INLINE\":\n      let enteredWordLength = enteredWord.length;\n\n      if (currentWordLength >= enteredWordLength) {\n        for (let l = 0; l < currentWordLength; l++) {\n          letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            id: `word-${currentWord.key}-letter-${l + 1}`,\n            className: `letter${l + 1 <= enteredWordLength ? currentWord.word[l] == enteredWord[l] ? \" correct\" : \" wrong\" : l == enteredWordLength ? \" current-letter\" : \"\"}`,\n            children: currentWord.word[l]\n          }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this));\n        }\n      } else {\n        for (let l = 0; l < enteredWordLength; l++) {\n          letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            id: `word-${currentWord.key}-letter-${l + 1}`,\n            className: `letter${l + 1 <= enteredWordLength ? currentWord.word[l] == enteredWord[l] ? \" correct\" : \" wrong\" : l == enteredWordLength ? \" current-letter\" : \"\"}`,\n            children: l\n          }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this));\n        }\n      }\n\n      updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"test-words\",\n        id: currentWord.id,\n        children: letterArray\n      }, currentWord.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this);\n      return updatedWord;\n\n    case \"FINISHED_WORD\":\n      switch (wordState) {\n        case \"CORRECT\":\n          for (let l = 0; l < currentWordLength; l++) {\n            letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n              id: `word-${currentWord.key}-letter-${l + 1}`,\n              className: \"letter\",\n              children: currentWord.word[l]\n            }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this));\n          }\n\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words correct\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        case \"WRONG\":\n          for (let l = 0; l < currentWordLength; l++) {\n            letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n              id: `word-${currentWord.key}-letter-${l + 1}`,\n              className: `letter ${currentWord.word[l] == enteredWord[l] ? \"yellow\" : \"wrong\"}`,\n              children: currentWord.word[l]\n            }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this));\n          }\n\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        default:\n          return updatedWord;\n      }\n\n  }\n}","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/testWords.js"],"names":["store","words","prevWord","reducer","state","action","type","testWordsLoader","payload","inputType","testWordsEvaluate","currentWord","enteredWord","updateCurrentWord","direction","j","wordList","prevRanNum","i","r","Math","floor","random","length","word","letterArray","l","push","prevTestWords","enteredWordLength","currentWordLength","currentWordSliced","slice","currentWordIndex","index","updatedWord","updatedWordList","wordElementUpdater","wordState","key","id"],"mappings":"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","sourcesContent":["import { store } from \"../store\";\r\nimport words from \"../../components/wordsData\";\r\nimport { prevWord } from \"../action-creators\";\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"NEW_WORDS\":\r\n      return testWordsLoader(action.payload.inputType);\r\n    case \"EVALUATE_WORDS\":\r\n      return testWordsEvaluate(\r\n        state,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord,\r\n        action.payload.inputType\r\n      );\r\n    case \"UPDATE_CURRENT_WORD\":\r\n      return updateCurrentWord(\r\n        state,\r\n        action.payload.direction,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction testWordsLoader(inputType) {\r\n  let j = 500;\r\n  let wordList = [];\r\n  let prevRanNum = 0;\r\n  for (let i = 0; i < j; i++) {\r\n    var r = Math.floor(Math.random() * words.length);\r\n    if (r == prevRanNum) {\r\n      r++;\r\n    }\r\n    prevRanNum = r;\r\n    const word = words[r];\r\n    let letterArray = [];\r\n    for (let l = 0; l < word.length; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${i + 1}-letter-${l + 1}`}\r\n          id={`word-${i + 1}-letter-${l + 1}`}\r\n          className={`letter${\r\n            i == 0 && l == 0 && inputType == \"INLINE\" ? \" current-letter\" : \"\"\r\n          }`}\r\n        >\r\n          {word[l]}\r\n        </span>\r\n      );\r\n    }\r\n    wordList.push(\r\n      <span\r\n        className={`test-words${\r\n          i == 0 && inputType == \"FLOAT\"\r\n            ? \" current-word current-word-blinker\"\r\n            : \"\"\r\n        }`}\r\n        id={`word-${i + 1}`}\r\n        key={`word-${i + 1}`}\r\n      >\r\n        {letterArray}\r\n      </span>\r\n    );\r\n    wordList.push(\" \");\r\n  }\r\n  return wordList;\r\n}\r\n\r\nfunction testWordsEvaluate(prevTestWords, currentWord, enteredWord, inputType) {\r\n  let enteredWordLength = enteredWord.length;\r\n  let currentWordLength = currentWord.word.length;\r\n  let currentWordSliced = currentWord.word.slice(0, enteredWordLength);\r\n  let currentWordIndex = currentWord.index;\r\n  let updatedWord;\r\n  let updatedWordList;\r\n  if (enteredWordLength <= currentWordLength) {\r\n    if (enteredWord != currentWordSliced) {\r\n      if (enteredWord != \"\") {\r\n        updatedWord = wordElementUpdater(\r\n          currentWord,\r\n          currentWordLength,\r\n          enteredWord,\r\n          \"WRONG_WARNING\",\r\n          inputType\r\n        );\r\n      } else {\r\n        updatedWord = wordElementUpdater(\r\n          currentWord,\r\n          currentWordLength,\r\n          enteredWord,\r\n          \"EMPTY\",\r\n          inputType\r\n        );\r\n      }\r\n    } else if (enteredWord == currentWordSliced) {\r\n      if (enteredWordLength < currentWordLength) {\r\n        if (enteredWord != \"\") {\r\n          updatedWord = wordElementUpdater(\r\n            currentWord,\r\n            currentWordLength,\r\n            enteredWord,\r\n            \"CORRECT\",\r\n            inputType\r\n          );\r\n        } else {\r\n          updatedWord = wordElementUpdater(\r\n            currentWord,\r\n            currentWordLength,\r\n            enteredWord,\r\n            \"EMPTY\",\r\n            inputType\r\n          );\r\n        }\r\n      } else if (enteredWordLength == currentWordLength) {\r\n        updatedWord = wordElementUpdater(\r\n          currentWord,\r\n          currentWordLength,\r\n          enteredWord,\r\n          \"COMPLETED_WARNING\",\r\n          inputType\r\n        );\r\n      }\r\n    }\r\n  } else if (enteredWordLength > currentWordLength) {\r\n    updatedWord = wordElementUpdater(\r\n      currentWord,\r\n      currentWordLength,\r\n      enteredWord,\r\n      \"WRONG_WARNING\",\r\n      inputType\r\n    );\r\n  }\r\n  if (updatedWord) {\r\n    updatedWordList = [...prevTestWords];\r\n    updatedWordList[currentWordIndex] = updatedWord;\r\n    return updatedWordList;\r\n  } else {\r\n    return prevTestWords;\r\n  }\r\n}\r\n\r\nfunction updateCurrentWord(prevTestWords, direction, currentWord, enteredWord) {\r\n  let currentWordIndex = currentWord.index;\r\n  let currentWordLength = currentWord.word.length;\r\n\r\n  let updatedWord;\r\n\r\n  if (enteredWord == currentWord.word) {\r\n    updatedWord = wordElementUpdater(\r\n      currentWord,\r\n      currentWordLength,\r\n      enteredWord,\r\n      \"CORRECT\",\r\n      \"FINISHED_WORD\"\r\n    );\r\n  } else {\r\n    updatedWord = wordElementUpdater(\r\n      currentWord,\r\n      currentWordLength,\r\n      enteredWord,\r\n      \"WRONG\",\r\n      \"FINISHED_WORD\"\r\n    );\r\n  }\r\n\r\n  let updatedWordList = [...prevTestWords];\r\n  updatedWordList[currentWordIndex] = updatedWord;\r\n  return updatedWordList;\r\n}\r\n\r\nfunction wordElementUpdater(\r\n  currentWord,\r\n  currentWordLength,\r\n  enteredWord,\r\n  wordState,\r\n  inputType\r\n) {\r\n  let letterArray = [];\r\n  let updatedWord;\r\n  switch (inputType) {\r\n    case \"FLOAT\":\r\n      for (let l = 0; l < currentWordLength; l++) {\r\n        letterArray.push(\r\n          <span\r\n            key={`word-${currentWord.key}-letter-${l + 1}`}\r\n            id={`word-${currentWord.key}-letter-${l + 1}`}\r\n            className=\"letter\"\r\n          >\r\n            {currentWord.word[l]}\r\n          </span>\r\n        );\r\n      }\r\n      switch (wordState) {\r\n        case \"WRONG_WARNING\":\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words current-word wrong-warning\"}\r\n              id={currentWord.id}\r\n              key={currentWord.id}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        case \"COMPLETED_WARNING\":\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words current-word completed-warning\"}\r\n              id={currentWord.id}\r\n              key={currentWord.id}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        case \"CORRECT\":\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words current-word\"}\r\n              id={currentWord.id}\r\n              key={currentWord.id}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        case \"EMPTY\":\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words current-word current-word-blinker\"}\r\n              id={currentWord.id}\r\n              key={currentWord.id}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        default:\r\n          return updatedWord;\r\n      }\r\n    case \"INLINE\":\r\n      let enteredWordLength = enteredWord.length\r\n      if (currentWordLength >= enteredWordLength) {\r\n        for (let l = 0; l < currentWordLength; l++) {\r\n          letterArray.push(\r\n            <span\r\n              key={`word-${currentWord.key}-letter-${l + 1}`}\r\n              id={`word-${currentWord.key}-letter-${l + 1}`}\r\n              className={`letter${\r\n                l + 1 <= enteredWordLength\r\n                  ? currentWord.word[l] == enteredWord[l]\r\n                    ? \" correct\"\r\n                    : \" wrong\"\r\n                  : l==enteredWordLength ? \" current-letter\" :\"\"\r\n              }`}\r\n            >\r\n              {currentWord.word[l]}\r\n            </span>\r\n          );\r\n        }\r\n      }else{\r\n        for (let l = 0; l < enteredWordLength; l++) {\r\n          letterArray.push(\r\n            <span\r\n              key={`word-${currentWord.key}-letter-${l + 1}`}\r\n              id={`word-${currentWord.key}-letter-${l + 1}`}\r\n              className={`letter${\r\n                l + 1 <= enteredWordLength\r\n                  ? currentWord.word[l] == enteredWord[l]\r\n                    ? \" correct\"\r\n                    : \" wrong\"\r\n                  : l==enteredWordLength ? \" current-letter\" :\"\"\r\n              }`}\r\n            >\r\n              {l}\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n      updatedWord = (\r\n        <span\r\n          className={\"test-words\"}\r\n          id={currentWord.id}\r\n          key={currentWord.id}\r\n        >\r\n          {letterArray}\r\n        </span>\r\n      );\r\n      return updatedWord;\r\n    case \"FINISHED_WORD\":\r\n      switch (wordState) {\r\n        case \"CORRECT\":\r\n          for (let l = 0; l < currentWordLength; l++) {\r\n            letterArray.push(\r\n              <span\r\n                key={`word-${currentWord.key}-letter-${l + 1}`}\r\n                id={`word-${currentWord.key}-letter-${l + 1}`}\r\n                className=\"letter\"\r\n              >\r\n                {currentWord.word[l]}\r\n              </span>\r\n            );\r\n          }\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words correct\"}\r\n              id={currentWord.id}\r\n              key={currentWord.id}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        case \"WRONG\":\r\n          for (let l = 0; l < currentWordLength; l++) {\r\n            letterArray.push(\r\n              <span\r\n                key={`word-${currentWord.key}-letter-${l + 1}`}\r\n                id={`word-${currentWord.key}-letter-${l + 1}`}\r\n                className={`letter ${\r\n                  currentWord.word[l] == enteredWord[l] ? \"yellow\" : \"wrong\"\r\n                }`}\r\n              >\r\n                {currentWord.word[l]}\r\n              </span>\r\n            );\r\n          }\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words\"}\r\n              id={currentWord.id}\r\n              key={currentWord.id}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        default:\r\n          return updatedWord;\r\n      }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}