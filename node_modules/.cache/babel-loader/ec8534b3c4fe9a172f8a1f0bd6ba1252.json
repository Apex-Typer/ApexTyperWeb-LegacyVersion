{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\CountdownTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { decrementLiveTime, resetLiveTime } from \"../state/action-creators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CountdownTimer(props) {\n  _s();\n\n  // states and functions for showing the countdown timer once the test starts\n  const time = useSelector(state => state.testTimer.liveTime);\n  const timeForDisplay = useSelector(state => state.testTimer.forDisplay);\n  const dispatch = useDispatch();\n\n  function runTimer() {\n    setInterval(function () {\n      dispatch(decrementLiveTime());\n    }, 1000);\n  }\n\n  useEffect(() => {\n    if (time < 0) {\n      dispatch(resetLiveTime());\n    }\n  }, [time]);\n  useEffect(() => {\n    if (props.testOn && time > 0) {\n      runTimer();\n    }\n  }, [props.testOn]);\n  return /*#__PURE__*/_jsxDEV(TimeView, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"time-view\",\n      children: time <= 60 ? `${time}s` : `${timeForDisplay.minutes}s:${timeForDisplay.seconds}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownTimer, \"H3C8GEp3bz9C8GZ8opOXbXXWwF4=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = CountdownTimer;\nexport default CountdownTimer;\nconst TimeView = styled.div``;\n_c2 = TimeView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountdownTimer\");\n$RefreshReg$(_c2, \"TimeView\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/CountdownTimer.js"],"names":["React","useState","useEffect","useDispatch","useSelector","styled","decrementLiveTime","resetLiveTime","CountdownTimer","props","time","state","testTimer","liveTime","timeForDisplay","forDisplay","dispatch","runTimer","setInterval","testOn","minutes","seconds","TimeView","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,0BAAjD;;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC7B;AAEA,QAAMC,IAAI,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBC,QAA5B,CAAxB;AACA,QAAMC,cAAc,GAAGV,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBG,UAA5B,CAAlC;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;;AAEA,WAASc,QAAT,GAAoB;AAClBC,IAAAA,WAAW,CAAC,YAAY;AACtBF,MAAAA,QAAQ,CAACV,iBAAiB,EAAlB,CAAR;AACD,KAFU,EAER,IAFQ,CAAX;AAGD;;AAEDJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,IAAI,GAAG,CAAX,EAAc;AACZM,MAAAA,QAAQ,CAACT,aAAa,EAAd,CAAR;AACD;AACF,GAJQ,EAIN,CAACG,IAAD,CAJM,CAAT;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,KAAK,CAACU,MAAN,IAAgBT,IAAI,GAAG,CAA3B,EAA8B;AAC5BO,MAAAA,QAAQ;AACT;AACF,GAJQ,EAIN,CAACR,KAAK,CAACU,MAAP,CAJM,CAAT;AAMA,sBACE,QAAC,QAAD;AAAA,2BACE;AAAG,MAAA,EAAE,EAAC,WAAN;AAAA,gBACGT,IAAI,IAAI,EAAR,GACI,GAAEA,IAAK,GADX,GAEI,GAAEI,cAAc,CAACM,OAAQ,KAAIN,cAAc,CAACO,OAAQ;AAH3D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAlCQb,c;UAGMJ,W,EACUA,W,EACND,W;;;KALVK,c;AAoCT,eAAeA,cAAf;AAEA,MAAMc,QAAQ,GAAGjB,MAAM,CAACkB,GAAI,EAA5B;MAAMD,Q","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { decrementLiveTime, resetLiveTime } from \"../state/action-creators\";\r\n\r\nfunction CountdownTimer(props) {\r\n  // states and functions for showing the countdown timer once the test starts\r\n\r\n  const time = useSelector((state) => state.testTimer.liveTime);\r\n  const timeForDisplay = useSelector((state) => state.testTimer.forDisplay);\r\n  const dispatch = useDispatch();\r\n\r\n  function runTimer() {\r\n    setInterval(function () {\r\n      dispatch(decrementLiveTime());\r\n    }, 1000);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (time < 0) {\r\n      dispatch(resetLiveTime());\r\n    }\r\n  }, [time]);\r\n\r\n  useEffect(() => {\r\n    if (props.testOn && time > 0) {\r\n      runTimer();\r\n    }\r\n  }, [props.testOn]);\r\n\r\n  return (\r\n    <TimeView>\r\n      <p id=\"time-view\">\r\n        {time <= 60\r\n          ? `${time}s`\r\n          : `${timeForDisplay.minutes}s:${timeForDisplay.seconds}`}\r\n      </p>\r\n    </TimeView>\r\n  );\r\n}\r\n\r\nexport default CountdownTimer;\r\n\r\nconst TimeView = styled.div``;\r\n"]},"metadata":{},"sourceType":"module"}