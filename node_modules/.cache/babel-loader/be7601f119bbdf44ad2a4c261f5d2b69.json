{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\state\\\\reducers\\\\testWords.js\";\nimport { store } from \"../store\";\nimport words from \"../../components/wordsData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"NEW_WORDS\":\n      return testWordsLoader();\n\n    case \"EVALUATE_WORDS\":\n      return testWords(state, action.payload.currentWord, action.payload.enteredWord);\n\n    case \"UPDATE_CURRENT_WORD\":\n      return;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nfunction testWordsLoader() {\n  let j = 500;\n  let wordList = [];\n  let prevRanNum = 0;\n\n  for (let i = 0; i < j; i++) {\n    var r = Math.floor(Math.random() * words.length);\n\n    if (r == prevRanNum) {\n      r++;\n    }\n\n    prevRanNum = r;\n    const word = words[r];\n    let letterArray = [];\n\n    for (let l = 0; l < word.length; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${i + 1}-letter-${l + 1}`,\n        className: \"letter\",\n        children: word[l]\n      }, `word-${i + 1}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this));\n    }\n\n    wordList.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `test-words${i == 0 ? \" current-word\" : \"\"}`,\n      id: `word-${i + 1}`,\n      children: letterArray\n    }, `word-${i + 1}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this));\n    wordList.push(\" \");\n  }\n\n  return wordList;\n}\n\nfunction testWordsUpdate(prevTestWords, currentWord, enteredWord) {\n  let enteredWordLength = enteredWord.length;\n  let currentWordLength = currentWord.word.length;\n  let currentWordSliced = currentWord.word.slice(0, enteredWordLength);\n  let currentWordIndex = currentWord.key - 1;\n  let updatedWord;\n  let updatedWordList;\n\n  if (enteredWordLength <= currentWordLength) {\n    if (enteredWord != currentWordSliced) {\n      if (enteredWord != \"\") {\n        updatedWord = wordElementUpdater(currentWord, currentWordLength, \"WRONG_WARNING\", \"FLOAT\");\n      } else {\n        updatedWord = wordElementUpdater(currentWord, currentWordLength, \"EMPTY\", \"FLOAT\");\n      }\n    } else if (enteredWord == currentWordSliced) {\n      if (enteredWordLength < currentWordLength) {\n        if (enteredWord != \"\") {\n          updatedWord = wordElementUpdater(currentWord, currentWordLength, \"CORRECT\", \"FLOAT\");\n        } else {\n          updatedWord = wordElementUpdater(currentWord, currentWordLength, \"EMPTY\", \"FLOAT\");\n        }\n      } else if (enteredWordLength == currentWordLength) {\n        updatedWord = wordElementUpdater(currentWord, currentWordLength, \"COMPLETED_WARNING\", \"FLOAT\");\n      }\n    }\n  } else if (enteredWordLength > currentWordLength) {\n    updatedWord = wordElementUpdater(currentWord, currentWordLength, \"WRONG_WARNING\", \"FLOAT\");\n  }\n\n  if (updatedWord) {\n    updatedWordList = [...prevTestWords];\n    updatedWordList[currentWordIndex] = updatedWord;\n    return updatedWordList;\n  } else {\n    return prevTestWords;\n  }\n}\n\nfunction wordElementUpdater(currentWord, currentWordLength, wordState, inputType) {\n  switch (inputType) {\n    case \"FLOAT\":\n      let letterArray = [];\n      let updatedWord;\n\n      for (let l = 0; l < currentWordLength; l++) {\n        letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          id: `word-${currentWord.key}-letter-${l + 1}`,\n          className: \"letter\",\n          children: currentWord.word[l]\n        }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this));\n      }\n\n      switch (wordState) {\n        case \"WRONG_WARNING\":\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words current-word wrong-warning\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        case \"COMPLETED_WARNING\":\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words current-word completed-warning\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        case \"CORRECT\":\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words current-word\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        case \"EMPTY\":\n          updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"test-words current-word current-word-blinker\",\n            id: currentWord.id,\n            children: letterArray\n          }, currentWord.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this);\n          return updatedWord;\n\n        default:\n          return updatedWord;\n      }\n\n  }\n}","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/testWords.js"],"names":["store","words","reducer","state","action","type","testWordsLoader","testWords","payload","currentWord","enteredWord","j","wordList","prevRanNum","i","r","Math","floor","random","length","word","letterArray","l","push","testWordsUpdate","prevTestWords","enteredWordLength","currentWordLength","currentWordSliced","slice","currentWordIndex","key","updatedWord","updatedWordList","wordElementUpdater","wordState","inputType","id"],"mappings":"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","sourcesContent":["import { store } from \"../store\";\r\nimport words from \"../../components/wordsData\";\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"NEW_WORDS\":\r\n      return testWordsLoader();\r\n    case \"EVALUATE_WORDS\":\r\n      return testWords(\r\n        state,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord\r\n      );\r\n    case \"UPDATE_CURRENT_WORD\":\r\n        return \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction testWordsLoader() {\r\n  let j = 500;\r\n  let wordList = [];\r\n  let prevRanNum = 0;\r\n  for (let i = 0; i < j; i++) {\r\n    var r = Math.floor(Math.random() * words.length);\r\n    if (r == prevRanNum) {\r\n      r++;\r\n    }\r\n    prevRanNum = r;\r\n    const word = words[r];\r\n    let letterArray = [];\r\n    for (let l = 0; l < word.length; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${i + 1}-letter-${l + 1}`}\r\n          id={`word-${i + 1}-letter-${l + 1}`}\r\n          className=\"letter\"\r\n        >\r\n          {word[l]}\r\n        </span>\r\n      );\r\n    }\r\n    wordList.push(\r\n      <span\r\n        className={`test-words${i == 0 ? \" current-word\" : \"\"}`}\r\n        id={`word-${i + 1}`}\r\n        key={`word-${i + 1}`}\r\n      >\r\n        {letterArray}\r\n      </span>\r\n    );\r\n    wordList.push(\" \");\r\n  }\r\n  return wordList;\r\n}\r\n\r\nfunction testWordsUpdate(prevTestWords, currentWord, enteredWord) {\r\n  let enteredWordLength = enteredWord.length;\r\n  let currentWordLength = currentWord.word.length;\r\n  let currentWordSliced = currentWord.word.slice(0, enteredWordLength);\r\n  let currentWordIndex = currentWord.key - 1;\r\n  let updatedWord;\r\n  let updatedWordList;\r\n  if (enteredWordLength <= currentWordLength) {\r\n    if (enteredWord != currentWordSliced) {\r\n      if (enteredWord != \"\") {\r\n        updatedWord = wordElementUpdater(\r\n          currentWord,\r\n          currentWordLength,\r\n          \"WRONG_WARNING\",\r\n          \"FLOAT\"\r\n        );\r\n      } else {\r\n        updatedWord = wordElementUpdater(\r\n          currentWord,\r\n          currentWordLength,\r\n          \"EMPTY\",\r\n          \"FLOAT\"\r\n        );\r\n      }\r\n    } else if (enteredWord == currentWordSliced) {\r\n      if (enteredWordLength < currentWordLength) {\r\n        if (enteredWord != \"\") {\r\n          updatedWord = wordElementUpdater(\r\n            currentWord,\r\n            currentWordLength,\r\n            \"CORRECT\",\r\n            \"FLOAT\"\r\n          );\r\n        } else {\r\n          updatedWord = wordElementUpdater(\r\n            currentWord,\r\n            currentWordLength,\r\n            \"EMPTY\",\r\n            \"FLOAT\"\r\n          );\r\n        }\r\n      } else if (enteredWordLength == currentWordLength) {\r\n        updatedWord = wordElementUpdater(\r\n          currentWord,\r\n          currentWordLength,\r\n          \"COMPLETED_WARNING\",\r\n          \"FLOAT\"\r\n        );\r\n      }\r\n    }\r\n  } else if (enteredWordLength > currentWordLength) {\r\n    updatedWord = wordElementUpdater(\r\n      currentWord,\r\n      currentWordLength,\r\n      \"WRONG_WARNING\",\r\n      \"FLOAT\"\r\n    );\r\n  }\r\n  if (updatedWord) {\r\n    updatedWordList = [...prevTestWords];\r\n    updatedWordList[currentWordIndex] = updatedWord;\r\n    return updatedWordList;\r\n  } else {\r\n    return prevTestWords;\r\n  }\r\n}\r\n\r\nfunction wordElementUpdater(\r\n  currentWord,\r\n  currentWordLength,\r\n  wordState,\r\n  inputType\r\n) {\r\n  switch (inputType) {\r\n    case \"FLOAT\":\r\n      let letterArray = [];\r\n      let updatedWord;\r\n      for (let l = 0; l < currentWordLength; l++) {\r\n        letterArray.push(\r\n          <span\r\n            key={`word-${currentWord.key}-letter-${l + 1}`}\r\n            id={`word-${currentWord.key}-letter-${l + 1}`}\r\n            className=\"letter\"\r\n          >\r\n            {currentWord.word[l]}\r\n          </span>\r\n        );\r\n      }\r\n      switch (wordState) {\r\n        case \"WRONG_WARNING\":\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words current-word wrong-warning\"}\r\n              id={currentWord.id}\r\n              key={currentWord.key}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        case \"COMPLETED_WARNING\":\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words current-word completed-warning\"}\r\n              id={currentWord.id}\r\n              key={currentWord.key}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        case \"CORRECT\":\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words current-word\"}\r\n              id={currentWord.id}\r\n              key={currentWord.key}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        case \"EMPTY\":\r\n          updatedWord = (\r\n            <span\r\n              className={\"test-words current-word current-word-blinker\"}\r\n              id={currentWord.id}\r\n              key={currentWord.key}\r\n            >\r\n              {letterArray}\r\n            </span>\r\n          );\r\n          return updatedWord;\r\n        default:\r\n          return updatedWord;\r\n      }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}