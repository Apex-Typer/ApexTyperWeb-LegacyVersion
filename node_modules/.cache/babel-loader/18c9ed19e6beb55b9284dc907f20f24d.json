{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\CountdownTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { decrementLiveTime, resetLiveTime, resetTest } from \"../state/action-creators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CountdownTimer() {\n  _s();\n\n  // states and functions for showing the countdown timer once the test starts\n  const testOn = useSelector(state => state.testOn);\n  const liveTime = useSelector(state => state.testTimer.liveTime);\n  const timeForDisplay = useSelector(state => state.testTimer.forDisplay);\n  const dispatch = useDispatch();\n\n  function runTimer() {\n    const timerFunction = setInterval(function () {}, 1000);\n  } // useEffect(() => {\n  //   setTimeout(() => {\n  //     dispatch(decrementLiveTime());\n  //   }, 1000);\n  //   if (liveTime < 0) {\n  //     resetTest(dispatch);\n  //   }\n  // }, [liveTime]);\n\n\n  return /*#__PURE__*/_jsxDEV(TimeView, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"time-view\",\n      children: liveTime <= 60 ? `${liveTime}s` : `${timeForDisplay.minutes}:${timeForDisplay.seconds}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownTimer, \"pv34zf0GK4ExdnVhgxNksHxMLXM=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = CountdownTimer;\nexport default CountdownTimer;\nconst TimeView = styled.div``;\n_c2 = TimeView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountdownTimer\");\n$RefreshReg$(_c2, \"TimeView\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/CountdownTimer.js"],"names":["React","useState","useEffect","useDispatch","useSelector","styled","decrementLiveTime","resetLiveTime","resetTest","CountdownTimer","testOn","state","liveTime","testTimer","timeForDisplay","forDisplay","dispatch","runTimer","timerFunction","setInterval","minutes","seconds","TimeView","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SACEC,iBADF,EAEEC,aAFF,EAGEC,SAHF,QAIO,0BAJP;;;AAMA,SAASC,cAAT,GAA0B;AAAA;;AACxB;AACA,QAAMC,MAAM,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACD,MAAlB,CAA1B;AACA,QAAME,QAAQ,GAAGR,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACE,SAAN,CAAgBD,QAA5B,CAA5B;AACA,QAAME,cAAc,GAAGV,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACE,SAAN,CAAgBE,UAA5B,CAAlC;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;;AAEA,WAASc,QAAT,GAAmB;AACjB,UAAMC,aAAa,GAAGC,WAAW,CAAC,YAAU,CAE3C,CAFgC,EAE/B,IAF+B,CAAjC;AAGD,GAXuB,CAaxB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,sBACE,QAAC,QAAD;AAAA,2BACE;AAAG,MAAA,EAAE,EAAC,WAAN;AAAA,gBACGP,QAAQ,IAAI,EAAZ,GACI,GAAEA,QAAS,GADf,GAEI,GAAEE,cAAc,CAACM,OAAQ,IAAGN,cAAc,CAACO,OAAQ;AAH1D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAhCQZ,c;UAEQL,W,EACEA,W,EACMA,W,EACND,W;;;KALVM,c;AAkCT,eAAeA,cAAf;AAEA,MAAMa,QAAQ,GAAGjB,MAAM,CAACkB,GAAI,EAA5B;MAAMD,Q","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  decrementLiveTime,\r\n  resetLiveTime,\r\n  resetTest,\r\n} from \"../state/action-creators\";\r\n\r\nfunction CountdownTimer() {\r\n  // states and functions for showing the countdown timer once the test starts\r\n  const testOn = useSelector((state) => state.testOn);\r\n  const liveTime = useSelector((state) => state.testTimer.liveTime);\r\n  const timeForDisplay = useSelector((state) => state.testTimer.forDisplay);\r\n  const dispatch = useDispatch();\r\n\r\n  function runTimer(){\r\n    const timerFunction = setInterval(function(){\r\n\r\n    },1000)\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   setTimeout(() => {\r\n  //     dispatch(decrementLiveTime());\r\n  //   }, 1000);\r\n\r\n  //   if (liveTime < 0) {\r\n  //     resetTest(dispatch);\r\n  //   }\r\n  // }, [liveTime]);\r\n\r\n  return (\r\n    <TimeView>\r\n      <p id=\"time-view\">\r\n        {liveTime <= 60\r\n          ? `${liveTime}s`\r\n          : `${timeForDisplay.minutes}:${timeForDisplay.seconds}`}\r\n      </p>\r\n    </TimeView>\r\n  );\r\n}\r\n\r\nexport default CountdownTimer;\r\n\r\nconst TimeView = styled.div``;\r\n"]},"metadata":{},"sourceType":"module"}