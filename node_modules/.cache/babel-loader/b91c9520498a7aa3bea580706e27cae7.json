{"ast":null,"code":"import { current } from \"@reduxjs/toolkit\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    log: [],\n    wrongWords: 0\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"UPDATE_INPUT_LOG\":\n      return inputLogUpdater(action.payload.enteredWord, action.payload.currentWord, state);\n\n    case \"RESET_INPUT_LOG\":\n      return {\n        log: [],\n        wrongWords: 0\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\n  let updatedInputLog = [];\n\n  if (currentWord.key > prevInputLog.log.length) {\n    updatedInputLog = prevInputLog.log;\n    updatedInputLog[currentWord.index] = enteredWord;\n  } else {\n    updatedInputLog = prevInputLog;\n    updatedInputLog.splice(currentWord.index, 1);\n  }\n\n  const wrongWords = updatedInputLog.filter(prevLog => prevLog.isWrong);\n  updatedInputLog = {\n    log: updatedInputLog,\n    wrongWords: wrongWords.lent\n  };\n  console.log(updatedInputLog);\n  return updatedInputLog;\n}\n\nexport default reducer;","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/inputLog.js"],"names":["current","reducer","state","log","wrongWords","action","type","inputLogUpdater","payload","enteredWord","currentWord","prevInputLog","updatedInputLog","key","length","index","splice","filter","prevLog","isWrong","lent","console"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,OAAO,GAAG,YAAgD;AAAA,MAA/CC,KAA+C,uEAAvC;AAAEC,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,UAAU,EAAE;AAAvB,GAAuC;AAAA,MAAXC,MAAW;;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAOC,eAAe,CACpBF,MAAM,CAACG,OAAP,CAAeC,WADK,EAEpBJ,MAAM,CAACG,OAAP,CAAeE,WAFK,EAGpBR,KAHoB,CAAtB;;AAKF,SAAK,iBAAL;AACE,aAAO;AAAEC,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,UAAU,EAAE;AAAvB,OAAP;;AACF;AACE,aAAOF,KAAP;AAVJ;AAYD,CAbD;;AAeA,SAASK,eAAT,CAAyBE,WAAzB,EAAsCC,WAAtC,EAAmDC,YAAnD,EAAiE;AAC/D,MAAIC,eAAe,GAAG,EAAtB;;AACA,MAAIF,WAAW,CAACG,GAAZ,GAAkBF,YAAY,CAACR,GAAb,CAAiBW,MAAvC,EAA+C;AAC7CF,IAAAA,eAAe,GAAGD,YAAY,CAACR,GAA/B;AACAS,IAAAA,eAAe,CAACF,WAAW,CAACK,KAAb,CAAf,GAAqCN,WAArC;AACD,GAHD,MAGO;AACLG,IAAAA,eAAe,GAAGD,YAAlB;AACAC,IAAAA,eAAe,CAACI,MAAhB,CAAuBN,WAAW,CAACK,KAAnC,EAA0C,CAA1C;AACD;;AACD,QAAMX,UAAU,GAAGQ,eAAe,CAACK,MAAhB,CAAwBC,OAAD,IAAaA,OAAO,CAACC,OAA5C,CAAnB;AACAP,EAAAA,eAAe,GAAG;AAAET,IAAAA,GAAG,EAAES,eAAP;AAAwBR,IAAAA,UAAU,EAAEA,UAAU,CAACgB;AAA/C,GAAlB;AACAC,EAAAA,OAAO,CAAClB,GAAR,CAAYS,eAAZ;AACA,SAAOA,eAAP;AACD;;AAED,eAAeX,OAAf","sourcesContent":["import { current } from \"@reduxjs/toolkit\";\r\n\r\nconst reducer = (state = { log: [], wrongWords: 0 }, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_INPUT_LOG\":\r\n      return inputLogUpdater(\r\n        action.payload.enteredWord,\r\n        action.payload.currentWord,\r\n        state\r\n      );\r\n    case \"RESET_INPUT_LOG\":\r\n      return { log: [], wrongWords: 0 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction inputLogUpdater(enteredWord, currentWord, prevInputLog) {\r\n  let updatedInputLog = [];\r\n  if (currentWord.key > prevInputLog.log.length) {\r\n    updatedInputLog = prevInputLog.log;\r\n    updatedInputLog[currentWord.index] = enteredWord;\r\n  } else {\r\n    updatedInputLog = prevInputLog;\r\n    updatedInputLog.splice(currentWord.index, 1);\r\n  }\r\n  const wrongWords = updatedInputLog.filter((prevLog) => prevLog.isWrong);\r\n  updatedInputLog = { log: updatedInputLog, wrongWords: wrongWords.lent };\r\n  console.log(updatedInputLog);\r\n  return updatedInputLog;\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}