{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store } from \"./state/store\";\nimport { Provider } from \"react-redux\"; // var viewport = document.querySelector(\"meta[name=viewport]\");\n// viewport.setAttribute(\n//   \"content\",\n//   viewport.content + \", height=\" + window.innerHeight\n// );\n// Global boolean variable that holds the current orientation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar pageInPortraitMode; // Listen for window resizes to detect orientation changes\n\nwindow.addEventListener(\"resize\", windowSizeChanged); // Set the global orientation variable as soon as the page loads\n\naddEventListener(\"load\", function () {\n  pageInPortraitMode = window.innerHeight > window.innerWidth;\n  document.getElementById(\"viewport\").setAttribute(\"content\", \"width=\" + window.innerWidth + \", height=\" + window.innerHeight + \", initial-scale=1.0, maximum-scale=1.0, user-scalable=0\");\n}); // Adjust viewport values only if orientation has changed (not on every window resize)\n\nfunction windowSizeChanged() {\n  if (pageInPortraitMode === true && window.innerHeight < window.innerWidth || pageInPortraitMode === false && window.innerHeight > window.innerWidth) {\n    pageInPortraitMode = window.innerHeight > window.innerWidth;\n    document.getElementById(\"viewport\").setAttribute(\"content\", \"width=\" + window.innerWidth + \", height=\" + window.innerHeight + \", initial-scale=1.0, maximum-scale=1.0, user-scalable=0\");\n  }\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 35,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/index.js"],"names":["React","ReactDOM","App","BrowserRouter","store","Provider","pageInPortraitMode","window","addEventListener","windowSizeChanged","innerHeight","innerWidth","document","getElementById","setAttribute","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;;;AACA,IAAIC,kBAAJ,C,CAEA;;AACAC,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,iBAAlC,E,CAEA;;AACAD,gBAAgB,CAAC,MAAD,EAAS,YAAW;AAClCF,EAAAA,kBAAkB,GAAGC,MAAM,CAACG,WAAP,GAAqBH,MAAM,CAACI,UAAjD;AACAC,EAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,YAApC,CAAiD,SAAjD,EAA4D,WAAWP,MAAM,CAACI,UAAlB,GAA+B,WAA/B,GAA6CJ,MAAM,CAACG,WAApD,GAAkE,yDAA9H;AACD,CAHe,CAAhB,C,CAKA;;AACA,SAASD,iBAAT,GAA6B;AAC3B,MAAMH,kBAAkB,KAAK,IAAxB,IAAkCC,MAAM,CAACG,WAAP,GAAqBH,MAAM,CAACI,UAA/D,IAAiFL,kBAAkB,KAAK,KAAxB,IAAmCC,MAAM,CAACG,WAAP,GAAqBH,MAAM,CAACI,UAAnJ,EAAiK;AAC/JL,IAAAA,kBAAkB,GAAGC,MAAM,CAACG,WAAP,GAAqBH,MAAM,CAACI,UAAjD;AACAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,YAApC,CAAiD,SAAjD,EAA4D,WAAWP,MAAM,CAACI,UAAlB,GAA+B,WAA/B,GAA6CJ,MAAM,CAACG,WAApD,GAAkE,yDAA9H;AACD;AACF;;AACDT,QAAQ,CAACc,MAAT,eACE,QAAC,aAAD;AAAA,yBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEX,KAAjB;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAMEQ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store } from \"./state/store\";\nimport { Provider } from \"react-redux\";\n\n// var viewport = document.querySelector(\"meta[name=viewport]\");\n// viewport.setAttribute(\n//   \"content\",\n//   viewport.content + \", height=\" + window.innerHeight\n// );\n\n// Global boolean variable that holds the current orientation\nvar pageInPortraitMode;\n\n// Listen for window resizes to detect orientation changes\nwindow.addEventListener(\"resize\", windowSizeChanged);\n\n// Set the global orientation variable as soon as the page loads\naddEventListener(\"load\", function() {\n  pageInPortraitMode = window.innerHeight > window.innerWidth;\n  document.getElementById(\"viewport\").setAttribute(\"content\", \"width=\" + window.innerWidth + \", height=\" + window.innerHeight + \", initial-scale=1.0, maximum-scale=1.0, user-scalable=0\");\n})\n\n// Adjust viewport values only if orientation has changed (not on every window resize)\nfunction windowSizeChanged() {\n  if (((pageInPortraitMode === true) && (window.innerHeight < window.innerWidth)) || ((pageInPortraitMode === false) && (window.innerHeight > window.innerWidth))) {\n    pageInPortraitMode = window.innerHeight > window.innerWidth;\n    document.getElementById(\"viewport\").setAttribute(\"content\", \"width=\" + window.innerWidth + \", height=\" + window.innerHeight + \", initial-scale=1.0, maximum-scale=1.0, user-scalable=0\");\n  }\n}\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}