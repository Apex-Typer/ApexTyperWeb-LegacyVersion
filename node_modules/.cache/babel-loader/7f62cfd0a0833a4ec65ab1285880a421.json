{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\components\\\\TextInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { confirmWord, nextWord, prevWord, updateInput, resetInput, newWords, evaluateWords } from \"../state/action-creators/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TextInput(props) {\n  _s();\n\n  const curWord = useSelector(state => state.currentWord);\n  const enteredWord = useSelector(state => state.enteredWord);\n  const testWords = useSelector(state => state.testWords);\n  const dispatch = useDispatch();\n  const testContentScrollerCount = useRef(1);\n  var textInput = document.getElementById(\"textInput\");\n\n  if (currentWord.key > 1 && document.getElementById(currentWord.id).offsetLeft - document.getElementById(currentWord.id).parentElement.offsetLeft == 5) {\n    testContentScroller();\n  }\n\n  useEffect(() => {\n    if (curWord.word != \"\") {\n      currentWordBlinker();\n      textInput.focus();\n    }\n  }, [enteredWord, curWord]);\n  useEffect(() => {\n    dispatch(confirmWord()); // setCurrentWord((prevWord) => ({\n    //   ...prevWord,\n    //   word: document.getElementById(currentWord.id).innerText,\n    //   width: document.getElementById(currentWord.id).offsetWidth,\n    //   left:\n    //     document.getElementById(currentWord.id).offsetLeft -\n    //     document.getElementById(currentWord.id).parentElement.offsetLeft,\n    // }));\n  }, []);\n\n  function testContentScroller() {\n    let currentLineHeight = parseInt(window.getComputedStyle(document.getElementById(\"testContent\")).getPropertyValue(\"line-height\"));\n    document.getElementById(\"testContentChild\").style.transform = `translateY(-${currentLineHeight * testContentScrollerCount.current}px)`;\n    testContentScrollerCount.current++;\n  }\n\n  function textInputChangeHandler(e) {\n    let keyClicked = e.nativeEvent.data;\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\n\n    if (keyClicked == \" \") {} else {\n      dispatch(updateInput(enteredValue));\n    }\n  }\n\n  useEffect(() => {\n    dispatch(evaluateWords(enteredWord, curWord));\n  }, [enteredWord]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    width: `${currentWord.width}px`,\n    left: `${currentWord.left}px`,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"textInput\",\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      maxLength: \"15\",\n      value: enteredWord,\n      onChange: e => setTimeout(textInputChangeHandler(e), 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextInput, \"zSX9z3ly3C1gCnrQ5fcru8xMzZ4=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = TextInput;\nexport default TextInput;\nconst Container = styled.div`\n  width: 100%;\n  input {\n    background-color: transparent;\n    border: none;\n    border-bottom: #aaa solid 2px;\n    caret-color: #ffff;\n    font-size: 1.2em;\n    text-align: center;\n    margin: 10px 0 20px;\n    padding: 3px 3px 5px;\n    color: #ffff;\n    width: ${props => props.width};\n    transform: translateX(${props => props.left});\n    transition: all 150ms ease-in-out;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInput\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/components/TextInput.js"],"names":["React","useState","useEffect","useRef","styled","useSelector","useDispatch","confirmWord","nextWord","prevWord","updateInput","resetInput","newWords","evaluateWords","TextInput","props","curWord","state","currentWord","enteredWord","testWords","dispatch","testContentScrollerCount","textInput","document","getElementById","key","id","offsetLeft","parentElement","testContentScroller","word","currentWordBlinker","focus","currentLineHeight","parseInt","window","getComputedStyle","getPropertyValue","style","transform","current","textInputChangeHandler","e","keyClicked","nativeEvent","data","enteredValue","String","target","value","replace","width","left","setTimeout","Container","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  confirmWord,\r\n  nextWord,\r\n  prevWord,\r\n  updateInput,\r\n  resetInput,\r\n  newWords,\r\n  evaluateWords,\r\n} from \"../state/action-creators/index\";\r\n\r\nfunction TextInput(props) {\r\n  const curWord = useSelector((state) => state.currentWord);\r\n  const enteredWord = useSelector((state) => state.enteredWord);\r\n  const testWords = useSelector((state) => state.testWords);\r\n  const dispatch = useDispatch();\r\n\r\n  const testContentScrollerCount = useRef(1);\r\n\r\n  var textInput = document.getElementById(\"textInput\");\r\n\r\n  if (\r\n    currentWord.key > 1 &&\r\n    document.getElementById(currentWord.id).offsetLeft -\r\n      document.getElementById(currentWord.id).parentElement.offsetLeft ==\r\n      5\r\n  ) {\r\n    testContentScroller();\r\n  }\r\n  useEffect(() => {\r\n    if (curWord.word != \"\") {\r\n      currentWordBlinker();\r\n      textInput.focus();\r\n    }\r\n  }, [enteredWord, curWord]);\r\n\r\n  useEffect(() => {\r\n    dispatch(confirmWord());\r\n    // setCurrentWord((prevWord) => ({\r\n    //   ...prevWord,\r\n    //   word: document.getElementById(currentWord.id).innerText,\r\n    //   width: document.getElementById(currentWord.id).offsetWidth,\r\n    //   left:\r\n    //     document.getElementById(currentWord.id).offsetLeft -\r\n    //     document.getElementById(currentWord.id).parentElement.offsetLeft,\r\n    // }));\r\n  }, []);\r\n\r\n\r\n  function testContentScroller() {\r\n    let currentLineHeight = parseInt(\r\n      window\r\n        .getComputedStyle(document.getElementById(\"testContent\"))\r\n        .getPropertyValue(\"line-height\")\r\n    );\r\n    document.getElementById(\r\n      \"testContentChild\"\r\n    ).style.transform = `translateY(-${\r\n      currentLineHeight * testContentScrollerCount.current\r\n    }px)`;\r\n    testContentScrollerCount.current++;\r\n  }\r\n\r\n  function textInputChangeHandler(e) {\r\n    let keyClicked = e.nativeEvent.data;\r\n    let enteredValue = String(e.target.value.replace(/\\s/g, \"\"));\r\n    if (keyClicked == \" \") {\r\n    } else {\r\n      dispatch(updateInput(enteredValue));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(evaluateWords(enteredWord, curWord));\r\n\r\n  }, [enteredWord]);\r\n\r\n  return (\r\n    <Container width={`${currentWord.width}px`} left={`${currentWord.left}px`}>\r\n      <input\r\n        id=\"textInput\"\r\n        autoCapitalize=\"off\"\r\n        autoComplete=\"off\"\r\n        spellCheck=\"false\"\r\n        maxLength=\"15\"\r\n        value={enteredWord}\r\n        onChange={(e) => setTimeout(textInputChangeHandler(e), 1)}\r\n      ></input>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  input {\r\n    background-color: transparent;\r\n    border: none;\r\n    border-bottom: #aaa solid 2px;\r\n    caret-color: #ffff;\r\n    font-size: 1.2em;\r\n    text-align: center;\r\n    margin: 10px 0 20px;\r\n    padding: 3px 3px 5px;\r\n    color: #ffff;\r\n    width: ${(props) => props.width};\r\n    transform: translateX(${(props) => props.left});\r\n    transition: all 150ms ease-in-out;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}