{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\state\\\\reducers\\\\testWords.js\";\nimport words from \"../../components/wordsData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"NEW_WORDS\":\n      return testWordsLoader();\n\n    case \"UPDATE_CURRENT_WORD\":\n      return updateCurrentWord(state, action.payload.currentWord, action.payload.enteredWord, action.payload.isFinalUpdate, action.payload.currentLetter);\n\n    case \"INACTIVATE_CURRENT_WORD\":\n      return inactivateCurrentWord(state, action.payload.currentWord, action.payload.enteredWord);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nfunction testWordsLoader() {\n  let j = 500;\n  let wordList = [];\n  let prevRanNum = 0;\n\n  for (let i = 0; i < j; i++) {\n    var r = Math.floor(Math.random() * words.length);\n\n    if (r == prevRanNum) {\n      r++;\n    }\n\n    prevRanNum = r;\n    const word = words[r];\n    let letterArray = [];\n\n    for (let l = 0; l < word.length; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${i + 1}-letter-${l + 1}`,\n        className: `letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`,\n        children: word[l]\n      }, `word-${i + 1}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this));\n    }\n\n    wordList.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `test-words${i == 0 ? \" current-word\" : \"\"}`,\n      id: `word-${i + 1}`,\n      children: letterArray\n    }, `word-${i + 1}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this));\n    wordList.push(\" \");\n  }\n\n  return wordList;\n}\n\nfunction updateCurrentWord(prevTestWords, currentWord, enteredWord, isFinalUpdate) {\n  let updatedWordList = [];\n  let currentWordIndex = currentWord.index;\n  let enteredWordLength = enteredWord.word.length;\n  let currentWordLength = currentWord.word.length;\n  let letterArray = [];\n  let updatedWord;\n\n  if (currentWordLength >= enteredWordLength) {\n    for (let l = 0; l < currentWordLength; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${currentWord.key}-letter-${l + 1}`,\n        className: `letter ${l + 1 <= enteredWordLength ? currentWord.word[l] == enteredWord.word[l] ? enteredWord.isWrong || isFinalUpdate && enteredWordLength < currentWordLength ? \"custom-dark-yellow\" : \"custom-dark-cyan\" : \"custom-dark-red\" : l == enteredWordLength && !isFinalUpdate ? \" current-letter\" : isFinalUpdate ? \"custom-dark-red\" : \"\"}`,\n        children: currentWord.word[l]\n      }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this));\n    }\n  } else {\n    for (let l = 0; l < enteredWordLength; l++) {\n      letterArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: `word-${currentWord.key}-letter-${l + 1}`,\n        className: `letter ${l + 1 <= enteredWordLength ? currentWord.word[l] == enteredWord.word[l] ? enteredWord.isWrong ? \"custom-dark-yellow\" : \"custom-dark-cyan\" : \"custom-dark-red\" : l == enteredWordLength && !isFinalUpdate ? \" current-letter\" : \"\"}`,\n        children: l + 1 < currentWordLength ? currentWord.word[l] : enteredWord.word[l]\n      }, `word-${currentWord.key}-letter-${l + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  updatedWord = /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"test-words\",\n    id: currentWord.id,\n    children: letterArray\n  }, currentWord.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n  updatedWordList = [...prevTestWords];\n  updatedWordList[currentWordIndex] = updatedWord;\n  return updatedWordList;\n}\n\nfunction inactivateCurrentWord(prevTestWords, currentWord, enteredWord) {\n  let currentLetterIndex = enteredWord.word.length;\n  let currentWordToUpdate = prevTestWords[currentWord.index];\n  let currentLetter = currentWordToUpdate.props.children[currentLetterIndex];\n  let updatedCurrentLetterProps = { ...currentLetter.props,\n    className: \"letter\"\n  };\n  let updatedCurrentLetter = { ...currentLetter,\n    props: updatedCurrentLetterProps\n  };\n  let updatedWord = currentWordToUpdate;\n  updatedWord.props.children[currentLetterIndex] = updatedCurrentLetter;\n  let updatedWordList = [...prevTestWords];\n  updatedWordList[currentWord.index] = updatedWord;\n  return updatedWordList;\n}","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/state/reducers/testWords.js"],"names":["words","reducer","state","action","type","testWordsLoader","updateCurrentWord","payload","currentWord","enteredWord","isFinalUpdate","currentLetter","inactivateCurrentWord","j","wordList","prevRanNum","i","r","Math","floor","random","length","word","letterArray","l","push","prevTestWords","updatedWordList","currentWordIndex","index","enteredWordLength","currentWordLength","updatedWord","key","isWrong","id","currentLetterIndex","currentWordToUpdate","props","children","updatedCurrentLetterProps","className","updatedCurrentLetter"],"mappings":"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","sourcesContent":["import words from \"../../components/wordsData\";\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"NEW_WORDS\":\r\n      return testWordsLoader();\r\n    case \"UPDATE_CURRENT_WORD\":\r\n      return updateCurrentWord(\r\n        state,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord,\r\n        action.payload.isFinalUpdate,\r\n        action.payload.currentLetter\r\n      );\r\n    case \"INACTIVATE_CURRENT_WORD\":\r\n      return inactivateCurrentWord(\r\n        state,\r\n        action.payload.currentWord,\r\n        action.payload.enteredWord\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction testWordsLoader() {\r\n  let j = 500;\r\n  let wordList = [];\r\n  let prevRanNum = 0;\r\n  for (let i = 0; i < j; i++) {\r\n    var r = Math.floor(Math.random() * words.length);\r\n    if (r == prevRanNum) {\r\n      r++;\r\n    }\r\n    prevRanNum = r;\r\n    const word = words[r];\r\n    let letterArray = [];\r\n    for (let l = 0; l < word.length; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${i + 1}-letter-${l + 1}`}\r\n          id={`word-${i + 1}-letter-${l + 1}`}\r\n          className={`letter${i == 0 && l == 0 ? \" current-letter\" : \"\"}`}\r\n        >\r\n          {word[l]}\r\n        </span>\r\n      );\r\n    }\r\n    wordList.push(\r\n      <span\r\n        className={`test-words${i == 0 ? \" current-word\" : \"\"}`}\r\n        id={`word-${i + 1}`}\r\n        key={`word-${i + 1}`}\r\n      >\r\n        {letterArray}\r\n      </span>\r\n    );\r\n    wordList.push(\" \");\r\n  }\r\n  return wordList;\r\n}\r\n\r\nfunction updateCurrentWord(\r\n  prevTestWords,\r\n  currentWord,\r\n  enteredWord,\r\n  isFinalUpdate\r\n) {\r\n  let updatedWordList = [];\r\n  let currentWordIndex = currentWord.index;\r\n\r\n  let enteredWordLength = enteredWord.word.length;\r\n  let currentWordLength = currentWord.word.length;\r\n\r\n  let letterArray = [];\r\n  let updatedWord;\r\n\r\n  if (currentWordLength >= enteredWordLength) {\r\n    for (let l = 0; l < currentWordLength; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${currentWord.key}-letter-${l + 1}`}\r\n          id={`word-${currentWord.key}-letter-${l + 1}`}\r\n          className={`letter ${\r\n            l + 1 <= enteredWordLength\r\n              ? currentWord.word[l] == enteredWord.word[l]\r\n                ? enteredWord.isWrong ||\r\n                  (isFinalUpdate && enteredWordLength < currentWordLength)\r\n                  ? \"custom-dark-yellow\"\r\n                  : \"custom-dark-cyan\"\r\n                : \"custom-dark-red\"\r\n              : l == enteredWordLength && !isFinalUpdate\r\n              ? \" current-letter\"\r\n              : isFinalUpdate\r\n              ? \"custom-dark-red\"\r\n              : \"\"\r\n          }`}\r\n        >\r\n          {currentWord.word[l]}\r\n        </span>\r\n      );\r\n    }\r\n  } else {\r\n    for (let l = 0; l < enteredWordLength; l++) {\r\n      letterArray.push(\r\n        <span\r\n          key={`word-${currentWord.key}-letter-${l + 1}`}\r\n          id={`word-${currentWord.key}-letter-${l + 1}`}\r\n          className={`letter ${\r\n            l + 1 <= enteredWordLength\r\n              ? currentWord.word[l] == enteredWord.word[l]\r\n                ? enteredWord.isWrong\r\n                  ? \"custom-dark-yellow\"\r\n                  : \"custom-dark-cyan\"\r\n                : \"custom-dark-red\"\r\n              : l == enteredWordLength && !isFinalUpdate\r\n              ? \" current-letter\"\r\n              : \"\"\r\n          }`}\r\n        >\r\n          {l + 1 < currentWordLength\r\n            ? currentWord.word[l]\r\n            : enteredWord.word[l]}\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n  updatedWord = (\r\n    <span className={\"test-words\"} id={currentWord.id} key={currentWord.id}>\r\n      {letterArray}\r\n    </span>\r\n  );\r\n\r\n  updatedWordList = [...prevTestWords];\r\n  updatedWordList[currentWordIndex] = updatedWord;\r\n  return updatedWordList;\r\n}\r\n\r\nfunction inactivateCurrentWord(prevTestWords, currentWord, enteredWord) {\r\n  let currentLetterIndex = enteredWord.word.length;\r\n  let currentWordToUpdate = prevTestWords[currentWord.index];\r\n  let currentLetter = currentWordToUpdate.props.children[currentLetterIndex];\r\n  let updatedCurrentLetterProps = {\r\n    ...currentLetter.props,\r\n    className: \"letter\",\r\n  };\r\n  let updatedCurrentLetter = {\r\n    ...currentLetter,\r\n    props: updatedCurrentLetterProps,\r\n  };\r\n  let updatedWord = currentWordToUpdate;\r\n  updatedWord.props.children[currentLetterIndex] = updatedCurrentLetter;\r\n  let updatedWordList = [...prevTestWords];\r\n  updatedWordList[currentWord.index] = updatedWord;\r\n  return updatedWordList;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}