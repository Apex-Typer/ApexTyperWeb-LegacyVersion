{"ast":null,"code":"var _jsxFileName = \"D:\\\\APEX_TYPER\\\\apex_typer_5.0\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store } from \"./state/store\";\nimport { Provider } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar viewport = document.querySelector(\"meta[name=viewport]\");\nviewport.setAttribute(\"content\", viewport.content + \", height=\" + window.innerHeight); // Global boolean variable that holds the current orientation\n\nvar pageInPortraitMode; // Listen for window resizes to detect orientation changes\n\nwindow.addEventListener(\"resize\", windowSizeChanged); // Set the global orientation variable as soon as the page loads\n\ndocument.addEventListener(\"load\", function () {\n  pageInPortraitMode = window.innerHeight > window.innerWidth;\n  document.getElementById(\"viewport\").setAttribute(\"content\", \"width=\" + window.innerWidth + \", height=\" + window.innerHeight + \", initial-scale=1.0, maximum-scale=1.0, user-scalable=0\");\n}); // Adjust viewport values only if orientation has changed (not on every window resize)\n\nfunction windowSizeChanged() {\n  if (pageInPortraitMode === true && window.innerHeight < window.innerWidth || pageInPortraitMode === false && window.innerHeight > window.innerWidth) {\n    pageInPortraitMode = window.innerHeight > window.innerWidth;\n    document.getElementById(\"viewport\").setAttribute(\"content\", \"width=\" + window.innerWidth + \", height=\" + window.innerHeight + \", initial-scale=1.0, maximum-scale=1.0, user-scalable=0\");\n  }\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 57,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["D:/APEX_TYPER/apex_typer_5.0/src/index.js"],"names":["React","ReactDOM","App","BrowserRouter","store","Provider","viewport","document","querySelector","setAttribute","content","window","innerHeight","pageInPortraitMode","addEventListener","windowSizeChanged","innerWidth","getElementById","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,IAAIC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,qBAAvB,CAAf;AACAF,QAAQ,CAACG,YAAT,CACE,SADF,EAEEH,QAAQ,CAACI,OAAT,GAAmB,WAAnB,GAAiCC,MAAM,CAACC,WAF1C,E,CAKA;;AACA,IAAIC,kBAAJ,C,CAEA;;AACAF,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCC,iBAAlC,E,CAEA;;AACAR,QAAQ,CAACO,gBAAT,CAA0B,MAA1B,EAAkC,YAAY;AAC5CD,EAAAA,kBAAkB,GAAGF,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACK,UAAjD;AACAT,EAAAA,QAAQ,CACLU,cADH,CACkB,UADlB,EAEGR,YAFH,CAGI,SAHJ,EAII,WACEE,MAAM,CAACK,UADT,GAEE,WAFF,GAGEL,MAAM,CAACC,WAHT,GAIE,yDARN;AAUD,CAZD,E,CAcA;;AACA,SAASG,iBAAT,GAA6B;AAC3B,MACGF,kBAAkB,KAAK,IAAvB,IAA+BF,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACK,UAA5D,IACCH,kBAAkB,KAAK,KAAvB,IAAgCF,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACK,UAF/D,EAGE;AACAH,IAAAA,kBAAkB,GAAGF,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACK,UAAjD;AACAT,IAAAA,QAAQ,CACLU,cADH,CACkB,UADlB,EAEGR,YAFH,CAGI,SAHJ,EAII,WACEE,MAAM,CAACK,UADT,GAEE,WAFF,GAGEL,MAAM,CAACC,WAHT,GAIE,yDARN;AAUD;AACF;;AAEDX,QAAQ,CAACiB,MAAT,eACE,QAAC,aAAD;AAAA,yBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEd,KAAjB;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAMEG,QAAQ,CAACU,cAAT,CAAwB,MAAxB,CANF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store } from \"./state/store\";\nimport { Provider } from \"react-redux\";\n\nvar viewport = document.querySelector(\"meta[name=viewport]\");\nviewport.setAttribute(\n  \"content\",\n  viewport.content + \", height=\" + window.innerHeight\n);\n\n// Global boolean variable that holds the current orientation\nvar pageInPortraitMode;\n\n// Listen for window resizes to detect orientation changes\nwindow.addEventListener(\"resize\", windowSizeChanged);\n\n// Set the global orientation variable as soon as the page loads\ndocument.addEventListener(\"load\", function () {\n  pageInPortraitMode = window.innerHeight > window.innerWidth;\n  document\n    .getElementById(\"viewport\")\n    .setAttribute(\n      \"content\",\n      \"width=\" +\n        window.innerWidth +\n        \", height=\" +\n        window.innerHeight +\n        \", initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"\n    );\n});\n\n// Adjust viewport values only if orientation has changed (not on every window resize)\nfunction windowSizeChanged() {\n  if (\n    (pageInPortraitMode === true && window.innerHeight < window.innerWidth) ||\n    (pageInPortraitMode === false && window.innerHeight > window.innerWidth)\n  ) {\n    pageInPortraitMode = window.innerHeight > window.innerWidth;\n    document\n      .getElementById(\"viewport\")\n      .setAttribute(\n        \"content\",\n        \"width=\" +\n          window.innerWidth +\n          \", height=\" +\n          window.innerHeight +\n          \", initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"\n      );\n  }\n}\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}